{
  "stats": {
    "suites": 1,
    "tests": 1,
    "passes": 0,
    "pending": 0,
    "failures": 1,
    "start": "2022-12-07T17:27:25.605Z",
    "end": "2022-12-07T17:27:46.514Z",
    "duration": 20909,
    "testsRegistered": 16,
    "passPercent": 0,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 15,
    "hasSkipped": true
  },
  "results": [
    {
      "uuid": "697120f1-2831-4552-86a8-5020a13e2c32",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "85ed9b41-47ba-4f96-a1f6-f08443fc8c86",
          "title": "BOOK AN APPOINTMENT",
          "fullFile": "C:\\Users\\Daniela\\Documents\\CodeceptJS-Novita\\test\\BookAnAppointment\\BookAnAppointment_test.js",
          "file": "\\test\\BookAnAppointment\\BookAnAppointment_test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook: codeceptjs.beforeSuite",
              "fullTitle": "BOOK AN APPOINTMENT \"before all\" hook: codeceptjs.beforeSuite",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.suiteSetup(suite)",
              "err": {},
              "uuid": "52edeed7-c461-4eb6-ab3a-920599b3f72d",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook: codeceptjs.before",
              "fullTitle": "BOOK AN APPOINTMENT \"before each\" hook: codeceptjs.before",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.setup(suite)",
              "err": {},
              "uuid": "69adb369-cc46-40d9-a59f-8b66c58eea87",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook: codeceptjs.afterSuite",
              "fullTitle": "BOOK AN APPOINTMENT \"after all\" hook: codeceptjs.afterSuite",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.suiteTeardown(suite)",
              "err": {},
              "uuid": "e39cc227-fc7a-46c0-94e4-a7dba5bdfdca",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook: finalize codeceptjs",
              "fullTitle": "BOOK AN APPOINTMENT \"after each\" hook: finalize codeceptjs",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.teardown(suite)",
              "err": {},
              "uuid": "a354bb0e-61e9-4ce6-b93f-5d77dfd75823",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "BOOK AN APPOINTMENT IN YOUR CAPITAL CITY",
              "fullTitle": "BOOK AN APPOINTMENT: BOOK AN APPOINTMENT IN YOUR CAPITAL CITY",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "I }) => {\n    const waitTime = 300 //seconds\n    const cities = ['Sydney', 'Parramatta', 'Melbourne', 'Brisbane', 'Adelaide', 'Perth']\n    I.amOnPage(\"/\");\n    I.waitForText('BOOK AN APPOINTMENT IN YOUR CAPITAL CITY', waitTime)\n    I.forceClick('#virtual-booking-modal-trigger')\n    I.waitForText('BOOK AN APPOINTMENT', waitTime)\n    I.see('BOOK AN APPOINTMENT')\n    // Type of appointment - Engagement/Wedding/Jewellery\n    I.selectOption('#appointment_requirement', 'engagement-ring')\n    I.forceClick('//*[@id=\"booking-placement-section\"]/label[2]/div')\n    I.fillField('#email_address', 'testing@testing.com')\n    I.click('#send_email_code_btn')\n    // In-store\n    I.forceClick('//*[@id=\"booking-placement-section\"]/label[1]/div')\n    for (const elem of cities) {\n        I.selectOption('#city', elem.toLowerCase())\n        if(elem === 'Sydney') {\n            I.see('Sydney CBD')\n        }else {\n            I.see(`${elem}`)\n        }\n    }\n    I.fillField('#phone_number', '1234567890')\n    I.click('#send_code_btn')\n    I.wait(4)\n    I.seeElement('#phone_number_verify')\n    I.fillField('#phone_number_verify', '1234')\n    // Type of appointment - Pickup/Cleaning/Resize\n    I.selectOption('#appointment_requirement', 'pickup')\n    for (const elem of cities) {\n        I.selectOption('#city', elem.toLowerCase())\n        if(elem === 'Sydney') {\n            I.see('Sydney CBD')\n        }else {\n            I.see(`${elem}`)\n        }\n    }\n    I.fillField('#phone_number', '0987654321')\n    I.seeElement('#send_code_btn')\n    I.fillField('#phone_number_verify', '1234')",
              "err": {},
              "uuid": "cfeb21d9-d843-4f28-8aaa-b9c225b54e95",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [
            "cfeb21d9-d843-4f28-8aaa-b9c225b54e95"
          ],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 0
        },
        {
          "uuid": "ccd43d69-9314-4a11-97eb-ebcac4638b0a",
          "title": "DIAMOND JEWELLERY - DIAMOND EARRINGS",
          "fullFile": "C:\\Users\\Daniela\\Documents\\CodeceptJS-Novita\\test\\Diamond Jewellery\\DiamondEarrings_test.js",
          "file": "\\test\\Diamond Jewellery\\DiamondEarrings_test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook: codeceptjs.beforeSuite",
              "fullTitle": "DIAMOND JEWELLERY - DIAMOND EARRINGS \"before all\" hook: codeceptjs.beforeSuite",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.suiteSetup(suite)",
              "err": {},
              "uuid": "1c988379-b7e4-4c92-b01d-b81da5d3df10",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook: codeceptjs.before",
              "fullTitle": "DIAMOND JEWELLERY - DIAMOND EARRINGS \"before each\" hook: codeceptjs.before",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.setup(suite)",
              "err": {},
              "uuid": "a5eefab5-c92a-4cc2-a09d-112d1bfe7538",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook: codeceptjs.afterSuite",
              "fullTitle": "DIAMOND JEWELLERY - DIAMOND EARRINGS \"after all\" hook: codeceptjs.afterSuite",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.suiteTeardown(suite)",
              "err": {},
              "uuid": "8ef7c234-4377-4eec-9c96-266fa589b608",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook: finalize codeceptjs",
              "fullTitle": "DIAMOND JEWELLERY - DIAMOND EARRINGS \"after each\" hook: finalize codeceptjs",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.teardown(suite)",
              "err": {},
              "uuid": "e0eded09-e5dc-47f5-bcbd-967fada6fdd2",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "DIAMOND EARRINGS",
              "fullTitle": "DIAMOND JEWELLERY - DIAMOND EARRINGS: DIAMOND EARRINGS",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "I }) => {\n    const waitTime = 300; //Seconds\n    const waitResponseMetalType = (metalType) => {\n        let results = [];\n        I.waitForResponse(async res => {\n            if(res.url().includes('/api/product/diamond-jewellery')) {\n                results.push(await res.json());\n                if(results[0].response.total > 0) {\n                    const total = results[0].response.total > 10 ? 10 : results[0].response.total;\n                    for (let i = 0; i < total; i++) {\n                        if(!(results[0].response.items[i].metal_name.includes(metalType))) {\n                            console.log(`>>> Error in values obtained from METAL TYPE filter: ${metalType.toUpperCase()} expected, but ${results[0].response.items[i].metal_name.toUpperCase()} was found.`);\n                        }\n                    }\n                }else {\n                    console.log(`>>> No record was found according to the filter: METAL TYPE, option ${metalType.toUpperCase()}`);\n                    return true\n                }   \n                return true;\n            }\n        }, waitTime);\n    };\n    const waitResponseType = (type) => {\n        let results = [];\n        I.waitForResponse(async res => {\n            if(res.url().includes('/api/product/diamond-jewellery')) {\n                results.push(await res.json());\n                if(results[0].response.total > 0) {\n                    const total = results[0].response.total > 10 ? 10 : results[0].response.total;\n                    for (let i = 0; i < total; i++) {\n                        if(!(results[0].response.items[i].type.toLowerCase().includes(type) || results[0].response.items[i].category_slug.toLowerCase().includes(type))) {\n                            console.log(`>>> Error in values obtained from TYPE filter: ${type.toUpperCase()} expected, but ${results[0].response.items[i].type} was found.`);\n                        }\n                    }                    \n                }else {\n                    console.log(`>>> No record was found according to the filter: TYPE, option ${type.toUpperCase()}`);\n                    return true\n                }\n                return true;\n            }\n        }, waitTime);\n    };\n    const waitResponseRingsPrice = (ringPrice, option) => {\n        let results = [];\n        I.waitForResponse(async res => {\n            if(res.url().includes('/api/product/diamond-jewellery')) {\n                results.push(await res.json());\n                if(results[0].response.total > 0) {\n                    const total = results[0].response.total > 10 ? 10 : results[0].response.total;\n                    for (let i = 0; i < total; i++) {\n                        if(ringPrice == 'under') {\n                            if(!(results[0].response.items[i].price <= 1000)) {\n                                console.log(`>>> Error in values obtained from PRICE filter: option ${option} expected, but ${results[0].response.items[i].price} was found.`);\n                            }\n                        }else if(ringPrice == 'between') {\n                            if(!(results[0].response.items[i].price > 1000 && results[0].response.items[0].width <= 2000)) {\n                                console.log(`>>> Error in values obtained from PRICE filter: option ${option} expected, but ${results[0].response.items[i].price} was found.`);\n                            }\n                        }else if(ringPrice == 'over') {\n                            if(!(results[0].response.items[i].price > 2000)) {\n                                console.log(`>>> Error in values obtained from PRICE filter: option ${option} expected, but ${results[0].response.items[i].price} was found.`);\n                            }\n                        }\n                    }\n                }else {\n                    console.log(`>>> No record was found according to the filter: PRICE, option ${option}.`);\n                    return true\n                }\n                return true;\n            }\n        }, waitTime);\n    };\n    const searchInputRingDesign = (name) => {\n        let results = [];\n        I.waitForResponse(async res => {\n            if(res.url().includes('/api/product/diamond-jewellery')) {\n                results.push(await res.json());\n                if(results[0].response.total > 0) {\n                    if(!(results[0].response.items[0].name.toLowerCase().includes(name))) {\n                        console.log(`>>> Error in values obtained from SEARCH PRODUCT filter: ${name.toUpperCase()} expected.`)\n                    }\n                }else{\n                    console.log(`No record was found according to the filter SEARCH PRODUCT INPUT, option ${name}.`);\n                    return true;\n                }\n                return true;\n            }\n        }, waitTime)\n    };\n    I.amOnPage('/');\n    I.forceClick(\"DIAMOND EARRINGS\");\n    I.seeInCurrentUrl('/lab-grown-diamond-earrings-lab-created-diamond-earrings-lab-grown-diamond-jewellery')\n    I.waitForElement('.jewellery_detail_link', waitTime);\n    I.forceClick('#jewellery_category_1')\n    I.waitForElement('.jewellery_detail_link', waitTime);\n    // ------------------------ METAL FILTER -----------------------------------\n    // METAL: 18ct White Gold\n    I.say('FILTER METAL: 18ct White Gold');\n    I.forceClick('#metal_type_3');\n    I.seeCheckboxIsChecked('#metal_type_3');\n    waitResponseMetalType('18ct White Gold');\n    I.forceClick('#metal_type_3');\n    // FILTER METAL: 18ct Yellow Gold\n    I.say('FILTER METAL: 18ct Yellow Gold');\n    I.forceClick('#metal_type_5');\n    I.seeCheckboxIsChecked('#metal_type_5');\n    waitResponseMetalType('18ct Yellow Gold');\n    I.forceClick('#metal_type_5');   \n    // FILTER METAL: Rose Gold\n    I.say('FILTER METAL: Rose Gold');\n    I.forceClick('#metal_type_4');\n    I.seeCheckboxIsChecked('#metal_type_4');\n    waitResponseMetalType('Rose Gold');\n    I.forceClick('#metal_type_4');\n    // FILTER METAL: Platinum\n    I.say('FILTER METAL: Platinum');\n    I.forceClick('#metal_type_6');\n    I.seeCheckboxIsChecked('#metal_type_6');\n    waitResponseMetalType('Platinum');\n    I.forceClick('#metal_type_6');\n    I.forceClick('#metal_type_1');\n    // ------------------------ TYPE  -----------------------------------\n    I.forceClick('#jewellery_category_1')\n    // FILTER TYPE: RINGS\n    I.say('TYPE METAL: RINGS');\n    I.forceClick('#jewellery_category_2');\n    I.seeCheckboxIsChecked('#jewellery_category_2');\n    waitResponseType('ring');\n    I.forceClick('#jewellery_category_2');\n    // FILTER TYPE: STUDS\n    I.say('TYPE METAL: STUDS');\n    I.forceClick('#earring_style_slug_1');\n    I.seeCheckboxIsChecked('#earring_style_slug_1');\n    waitResponseType('stud');\n    I.forceClick('#earring_style_slug_1');\n    // FILTER TYPE: EARRINGS\n    I.say('TYPE METAL: EARRINGS');\n    I.forceClick('#jewellery_category_3');\n    I.seeCheckboxIsChecked('#jewellery_category_3');\n    waitResponseType('earring');\n    I.forceClick('#jewellery_category_3');\n    // FILTER TYPE: BRACELETS\n    I.say('TYPE METAL: BRACELETS');\n    I.forceClick('#jewellery_category_4');\n    I.seeCheckboxIsChecked('#jewellery_category_4');\n    waitResponseType('bracelet');\n    I.forceClick('#jewellery_category_4');\n    // FILTER TYPE: NECKLACES\n    I.say('TYPE METAL: NECKLACES');\n    I.forceClick('#jewellery_category_5');\n    I.seeCheckboxIsChecked('#jewellery_category_5');\n    waitResponseType('necklace');\n    I.forceClick('#jewellery_category_5');\n    I.forceClick('#jewellery_category_1')\n    // ------------------------ PRICE FILTER -----------------------------------\n    // PRICE $1000 and Under\n    I.say('PRICE $1000 and Under');\n    I.forceClick('#jewellery_price_range_2');\n    I.seeCheckboxIsChecked('#jewellery_price_range_2');\n    waitResponseRingsPrice('under', '$1000 AND UNDER');\n    I.forceClick('#jewellery_price_range_2');\n    // PRICE BETWEEN $1000 to $2000\n    I.say('PRICE BETWEEN $1000 to $2000');\n    I.forceClick('#jewellery_price_range_3');\n    I.seeCheckboxIsChecked('#jewellery_price_range_3');\n    waitResponseRingsPrice('between', '$1000 TO $2000');\n    I.forceClick('#jewellery_price_range_3');\n    // PRICE Over $2000\n    I.say('PRICE OVER $2000');\n    I.forceClick('#jewellery_price_range_4');\n    I.seeCheckboxIsChecked('#jewellery_price_range_4');\n    waitResponseRingsPrice('over', 'OVER $2000');\n    I.forceClick('#jewellery_price_range_4');\n    \n    I.forceClick('#jewellery_price_range_1');\n    // ------------------------ INPUT FILTER -----------------------------------\n    I.say('TEXT SEARCH INPUT');\n    I.fillField('//*[@id=\"jewellery_order_section\"]/div[2]/div/input', 'white')\n    I.pressKey('Enter')\n    searchInputRingDesign('white')\n    I.fillField('//*[@id=\"jewellery_order_section\"]/div[2]/div/input', '')\n    I.pressKey('Enter')\n    I.wait(4)\n    // -------------------------------------------- SELECT FIRST ITEM/ELEMENT --------------------------------------------\n    I.say('FIRST ITEM SELECTED');\n    I.waitForElement('#jewellery_list_section .jewellery_list .jewellery_detail_link', waitTime)\n    I.wait(2)\n    I.click('#jewellery_list_section .jewellery_list .jewellery_detail_link')\n    // More Info\n    I.click('#more_info_link')\n    I.waitForText('PRODUCT DESCRIPTION', waitTime)\n    I.see('PRODUCT DESCRIPTION')\n    I.click('//*[@id=\"jewellery_more_details_box\"]/button')\n    // 20% Deposit Available\n    I.click('//*[@id=\"pay_deposit_box\"]/div/a')\n    I.wait(5)\n    I.switchToNextTab()\n    I.seeInCurrentUrl('/deposit')\n    I.closeCurrentTab()\n    I.seeInCurrentUrl('/lab-grown-diamond-earrings-lab-created-diamond-earrings-lab-grown-diamond-jewellery')\n    // Add to cart\n    I.click('#add_product_to_cart_submit')\n    I.waitForText('SHOPPING CART', waitTime)\n    I.see('SHOPPING CART')\n    I.wait(2)\n    // Pay Deposit\n    I.forceClick('//*[@id=\"cart\"]/div/div[2]/div[2]/table/tbody/tr[2]/td[1]/label')\n    I.click('#accept_deposit_policy')\n    // Checkout\n    I.click('//*[@id=\"cart\"]/div/div[2]/div[2]/table/tbody/tr[4]/td/a')\n    I.waitForText('WHERE DO YOU WANT THESE ITEMS SENT?', waitTime)\n    I.see('CHECKOUT')\n    I.wait(4)\n    // WHERE DO YOU WANT THESE ITEMS SENT? - FORM\n    I.fillField('#shipping_billing_information_form_shippingFirstName', 'Jose Testing');\n    I.fillField('#shipping_billing_information_form_shippingLastName', 'Jose Testing');\n    I.fillField('#shipping_billing_information_form_shippingAddressLineOne', 'Test Address');\n    I.click('#shipping_billing_information_form_shippingCountry');\n    I.selectOption('#shipping_billing_information_form_shippingCountry', 'Australia');\n    I.fillField('#shipping_billing_information_form_shippingState', 'Testing');\n    I.fillField('#shipping_billing_information_form_shippingSuburb', 'Testing');\n    I.fillField('#shipping_billing_information_form_shippingPostcode', '4000');\n    I.fillField('#shipping_billing_information_form_shippingPhone', '1234567');\n    I.fillField('#shipping_billing_information_form_deliveryInstructions', 'Test form, please ignore this request.');\n    I.fillField('#shipping_billing_information_form_customerNotesProposalDate', 'Test form, please ignore this request.');\n    I.fillField('#shipping_billing_information_form_shippingEmail', 'testing@testing.com');\n    // Use the same address for billing and shipping\n    I.say('USE THE SAME ADDRESS FOR BILLING AND SHIPPING');\n    I.click('#cart_shipping_content .same_shipping_billing_fields label .form-check');\n    I.fillField('#shipping_billing_information_form_billingFirstName', 'Jose Testing');\n    I.fillField('#shipping_billing_information_form_billingLastName', 'Jose Testing');\n    I.fillField('#shipping_billing_information_form_billingAddressLineOne', 'Test Address');\n    I.click('#shipping_billing_information_form_billingCountry');\n    I.selectOption('#shipping_billing_information_form_billingCountry', 'Australia');\n    I.fillField('#shipping_billing_information_form_billingState', 'Testing');\n    I.fillField('#shipping_billing_information_form_billingSuburb', 'Testing');\n    I.fillField('#shipping_billing_information_form_billingPostcode', '4000');\n    I.fillField('#shipping_billing_information_form_billingPhone', '123456');\n    I.click('#cart_shipping_content .last_row .right_submit input');\n    I.seeInCurrentUrl('/cart/payment-information');",
              "err": {},
              "uuid": "aa102048-44fb-4827-8640-f0cc1c5c86ad",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [
            "aa102048-44fb-4827-8640-f0cc1c5c86ad"
          ],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 0
        },
        {
          "uuid": "97848b1a-1820-46f0-8cc0-1a3c38a8d21d",
          "title": "DIAMOND JEWELLERY - DIAMOND NECKLACES",
          "fullFile": "C:\\Users\\Daniela\\Documents\\CodeceptJS-Novita\\test\\Diamond Jewellery\\DiamondNecklaces_test.js",
          "file": "\\test\\Diamond Jewellery\\DiamondNecklaces_test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook: codeceptjs.beforeSuite",
              "fullTitle": "DIAMOND JEWELLERY - DIAMOND NECKLACES \"before all\" hook: codeceptjs.beforeSuite",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.suiteSetup(suite)",
              "err": {},
              "uuid": "3b5bea7f-9ab8-4b4b-9428-502a932d0cb7",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook: codeceptjs.before",
              "fullTitle": "DIAMOND JEWELLERY - DIAMOND NECKLACES \"before each\" hook: codeceptjs.before",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.setup(suite)",
              "err": {},
              "uuid": "4f7bd5a6-e2fe-457e-9aa4-6f5fd55d39aa",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook: codeceptjs.afterSuite",
              "fullTitle": "DIAMOND JEWELLERY - DIAMOND NECKLACES \"after all\" hook: codeceptjs.afterSuite",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.suiteTeardown(suite)",
              "err": {},
              "uuid": "39572298-9752-4bbb-bea0-06aaa1775f02",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook: finalize codeceptjs",
              "fullTitle": "DIAMOND JEWELLERY - DIAMOND NECKLACES \"after each\" hook: finalize codeceptjs",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.teardown(suite)",
              "err": {},
              "uuid": "f402bbf1-d1b2-4428-b123-dd69ed7feb45",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "DIAMOND NECKLACES",
              "fullTitle": "DIAMOND JEWELLERY - DIAMOND NECKLACES: DIAMOND NECKLACES",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "I }) => {\n    const waitTime = 300; //Seconds\n    const waitResponseMetalType = (metalType) => {\n        let results = [];\n        I.waitForResponse(async res => {\n            if(res.url().includes('/api/product/diamond-jewellery')) {\n                results.push(await res.json());\n                if(results[0].response.total > 0) {\n                    const total = results[0].response.total > 10 ? 10 : results[0].response.total;\n                    for (let i = 0; i < total; i++) {\n                        if(!(results[0].response.items[i].metal_name.includes(metalType))) {\n                            console.log(`>>> Error in values obtained from METAL TYPE filter: ${metalType.toUpperCase()} expected, but ${results[0].response.items[i].metal_name.toUpperCase()} was found.`);\n                        }\n                    }\n                }else {\n                    console.log(`>>> No record was found according to the filter: METAL TYPE, option ${metalType.toUpperCase()}`);\n                    return true\n                }   \n                return true;\n            }\n        }, waitTime);\n    };\n    const waitResponseType = (type) => {\n        let results = [];\n        I.waitForResponse(async res => {\n            if(res.url().includes('/api/product/diamond-jewellery')) {\n                results.push(await res.json());\n                if(results[0].response.total > 0) {\n                    const total = results[0].response.total > 10 ? 10 : results[0].response.total;\n                    for (let i = 0; i < total; i++) {\n                        if(!(results[0].response.items[i].type.toLowerCase().includes(type) || results[0].response.items[i].category_slug.toLowerCase().includes(type))) {\n                            console.log(`>>> Error in values obtained from TYPE filter: ${type.toUpperCase()} expected, but it was found.`);\n                        }\n                    }\n                }else {\n                    console.log(`>>> No record was found according to the filter: TYPE, option ${type.toUpperCase()}`);\n                    return true\n                }\n                return true;\n            }\n        }, waitTime);\n    };\n    const waitResponseRingsPrice = (ringPrice, option) => {\n        let results = [];\n        I.waitForResponse(async res => {\n            if(res.url().includes('/api/product/diamond-jewellery')) {\n                results.push(await res.json());\n                if(results[0].response.total > 0) {\n                    const total = results[0].response.total > 10 ? 10 : results[0].response.total; \n                    for (let i = 0; i < total; i++) {\n                        if(ringPrice == 'under') {\n                            if(!(results[0].response.items[i].price <= 1000)) {\n                                console.log(`>>> Error in values obtained from PRICE filter: option ${option} expected, but ${results[0].response.items[i].price} was found.`);\n                            }\n                        }else if(ringPrice == 'between') {\n                            if(!(results[0].response.items[i].price > 1000 && results[0].response.items[0].width <= 2000)) {\n                                console.log(`>>> Error in values obtained from PRICE filter: option ${option} expected, but ${results[0].response.items[i].price} was found.`);\n                            }\n                        }else if(ringPrice == 'over') {\n                            if(!(results[0].response.items[i].price > 2000)) {\n                                console.log(`>>> Error in values obtained from PRICE filter: option ${option} expected, but ${results[0].response.items[i].price} was found.`);\n                            }\n                        }\n                    }\n                }else {\n                    console.log(`>>> No record was found according to the filter: PRICE, option ${option}.`);\n                    return true\n                }\n                return true;\n            }\n        }, waitTime);\n    };\n    const searchInputRingDesign = (name) => {\n        let results = [];\n        I.waitForResponse(async res => {\n            if(res.url().includes('/api/product/diamond-jewellery')) {\n                results.push(await res.json());\n                if(results[0].response.total > 0) {\n                    if(!(results[0].response.items[0].name.toLowerCase().includes(name))) {\n                        console.log(`>>> Error in values obtained from SEARCH PRODUCT filter: ${name.toUpperCase()} expected.`)\n                    }\n                }else{\n                    console.log(`No record was found according to the filter SEARCH PRODUCT INPUT, option ${name}.`);\n                    return true;\n                }\n                return true;\n            }\n        }, waitTime)\n    };\n    I.amOnPage('/');\n    I.forceClick(\"DIAMOND NECKLACES\");\n    I.seeInCurrentUrl('/lab-grown-diamond-earrings-lab-created-diamond-earrings-lab-grown-diamond-jewellery')\n    I.waitForElement('.jewellery_detail_link', waitTime);\n    I.forceClick('#jewellery_category_1')\n    I.waitForElement('.jewellery_detail_link', waitTime);\n    \n    // ------------------------ METAL FILTER -----------------------------------\n    // METAL: 18ct White Gold\n    I.say('FILTER METAL: 18ct White Gold');\n    I.forceClick('#metal_type_3');\n    I.seeCheckboxIsChecked('#metal_type_3');\n    waitResponseMetalType('18ct White Gold');\n    I.forceClick('#metal_type_3');\n    // FILTER METAL: 18ct Yellow Gold\n    I.say('FILTER METAL: 18ct Yellow Gold');\n    I.forceClick('#metal_type_5');\n    I.seeCheckboxIsChecked('#metal_type_5');\n    waitResponseMetalType('18ct Yellow Gold');\n    I.forceClick('#metal_type_5');   \n    // FILTER METAL: Rose Gold\n    I.say('FILTER METAL: Rose Gold');\n    I.forceClick('#metal_type_4');\n    I.seeCheckboxIsChecked('#metal_type_4');\n    waitResponseMetalType('Rose Gold');\n    I.forceClick('#metal_type_4');\n    // FILTER METAL: Platinum\n    I.say('FILTER METAL: Platinum');\n    I.forceClick('#metal_type_6');\n    I.seeCheckboxIsChecked('#metal_type_6');\n    waitResponseMetalType('Platinum');\n    I.forceClick('#metal_type_6');\n    I.forceClick('#metal_type_1');\n    // ------------------------ TYPE FILTER -----------------------------------\n    // TYPE: RINGS\n    I.forceClick('#jewellery_category_1')\n    // FILTER TYPE: RINGS\n    I.say('TYPE METAL: RINGS');\n    I.forceClick('#jewellery_category_2');\n    I.seeCheckboxIsChecked('#jewellery_category_2');\n    waitResponseType('ring');\n    I.forceClick('#jewellery_category_2');\n    // FILTER TYPE: STUDS\n    I.say('TYPE METAL: STUDS');\n    I.forceClick('#earring_style_slug_1');\n    I.seeCheckboxIsChecked('#earring_style_slug_1');\n    waitResponseType('stud');\n    I.forceClick('#earring_style_slug_1');\n    // FILTER TYPE: EARRINGS\n    I.say('TYPE METAL: EARRINGS');\n    I.forceClick('#jewellery_category_3');\n    I.seeCheckboxIsChecked('#jewellery_category_3');\n    waitResponseType('earring');\n    I.forceClick('#jewellery_category_3');\n    // FILTER TYPE: BRACELETS\n    I.say('TYPE METAL: BRACELETS');\n    I.forceClick('#jewellery_category_4');\n    I.seeCheckboxIsChecked('#jewellery_category_4');\n    waitResponseType('bracelet');\n    I.forceClick('#jewellery_category_4');\n    // FILTER TYPE: NECKLACES\n    I.say('TYPE METAL: NECKLACES');\n    I.forceClick('#jewellery_category_5');\n    I.seeCheckboxIsChecked('#jewellery_category_5');\n    waitResponseType('necklace');\n    I.forceClick('#jewellery_category_5');\n    I.forceClick('#jewellery_category_1')\n    // ------------------------ PRICE FILTER -----------------------------------\n    // PRICE $1000 and Under\n    I.say('PRICE $1000 and Under');\n    I.forceClick('#jewellery_price_range_2');\n    I.seeCheckboxIsChecked('#jewellery_price_range_2');\n    waitResponseRingsPrice('under', '$1000 AND UNDER');\n    I.forceClick('#jewellery_price_range_2');\n    // PRICE BETWEEN $1000 to $2000\n    I.say('PRICE BETWEEN $1000 to $2000');\n    I.forceClick('#jewellery_price_range_3');\n    I.seeCheckboxIsChecked('#jewellery_price_range_3');\n    waitResponseRingsPrice('between', '$1000 TO $2000');\n    I.forceClick('#jewellery_price_range_3');\n    // PRICE Over $2000\n    I.say('PRICE OVER $2000');\n    I.forceClick('#jewellery_price_range_4');\n    I.seeCheckboxIsChecked('#jewellery_price_range_4');\n    waitResponseRingsPrice('over', 'OVER $2000');\n    I.forceClick('#jewellery_price_range_4');\n    \n    I.forceClick('#jewellery_price_range_1');\n    // ------------------------ PRICE FILTER -----------------------------------\n    I.say('TEXT SEARCH INPUT');\n    I.fillField('//*[@id=\"jewellery_order_section\"]/div[2]/div/input', 'white')\n    I.pressKey('Enter')\n    searchInputRingDesign('white')\n    I.fillField('//*[@id=\"jewellery_order_section\"]/div[2]/div/input', '')\n    I.pressKey('Enter')\n    I.wait(4)\n    // -------------------------------------------- SELECT FIRST ITEM/ELEMENT --------------------------------------------\n    I.say('FIRST ITEM SELECTED');\n    I.waitForElement('#jewellery_list_section .jewellery_list .jewellery_detail_link', waitTime)\n    I.wait(2)\n    I.click('#jewellery_list_section .jewellery_list .jewellery_detail_link')\n    // More Info\n    I.click('#more_info_link')\n    I.waitForText('PRODUCT DESCRIPTION', waitTime)\n    I.see('PRODUCT DESCRIPTION')\n    I.click('//*[@id=\"jewellery_more_details_box\"]/button')\n    // 20% Deposit Available\n    I.click('//*[@id=\"pay_deposit_box\"]/div/a')\n    I.wait(5)\n    I.switchToNextTab()\n    I.seeInCurrentUrl('/deposit')\n    I.closeCurrentTab()\n    I.seeInCurrentUrl('/lab-grown-diamond-earrings-lab-created-diamond-earrings-lab-grown-diamond-jewellery')\n    // Add to cart\n    I.click('#add_product_to_cart_submit')\n    I.waitForText('SHOPPING CART', waitTime)\n    I.see('SHOPPING CART')\n    I.wait(2)\n    // Pay Deposit\n    I.forceClick('//*[@id=\"cart\"]/div/div[2]/div[2]/table/tbody/tr[2]/td[1]/label')\n    I.click('#accept_deposit_policy')\n    // Checkout\n    I.click('//*[@id=\"cart\"]/div/div[2]/div[2]/table/tbody/tr[4]/td/a')\n    I.waitForText('WHERE DO YOU WANT THESE ITEMS SENT?', waitTime)\n    I.see('CHECKOUT')\n    I.wait(4)\n    // WHERE DO YOU WANT THESE ITEMS SENT? - FORM\n    I.fillField('#shipping_billing_information_form_shippingFirstName', 'Jose Testing');\n    I.fillField('#shipping_billing_information_form_shippingLastName', 'Jose Testing');\n    I.fillField('#shipping_billing_information_form_shippingAddressLineOne', 'Test Address');\n    I.click('#shipping_billing_information_form_shippingCountry');\n    I.selectOption('#shipping_billing_information_form_shippingCountry', 'Australia');\n    I.fillField('#shipping_billing_information_form_shippingState', 'Testing');\n    I.fillField('#shipping_billing_information_form_shippingSuburb', 'Testing');\n    I.fillField('#shipping_billing_information_form_shippingPostcode', '4000');\n    I.fillField('#shipping_billing_information_form_shippingPhone', '1234567');\n    I.fillField('#shipping_billing_information_form_deliveryInstructions', 'Test form, please ignore this request.');\n    I.fillField('#shipping_billing_information_form_customerNotesProposalDate', 'Test form, please ignore this request.');\n    I.fillField('#shipping_billing_information_form_shippingEmail', 'testing@testing.com');\n    // Use the same address for billing and shipping\n    I.say('USE THE SAME ADDRESS FOR BILLING AND SHIPPING');\n    I.click('#cart_shipping_content .same_shipping_billing_fields label .form-check');\n    I.fillField('#shipping_billing_information_form_billingFirstName', 'Jose Testing');\n    I.fillField('#shipping_billing_information_form_billingLastName', 'Jose Testing');\n    I.fillField('#shipping_billing_information_form_billingAddressLineOne', 'Test Address');\n    I.click('#shipping_billing_information_form_billingCountry');\n    I.selectOption('#shipping_billing_information_form_billingCountry', 'Australia');\n    I.fillField('#shipping_billing_information_form_billingState', 'Testing');\n    I.fillField('#shipping_billing_information_form_billingSuburb', 'Testing');\n    I.fillField('#shipping_billing_information_form_billingPostcode', '4000');\n    I.fillField('#shipping_billing_information_form_billingPhone', '123456');\n    I.click('#cart_shipping_content .last_row .right_submit input');\n    I.seeInCurrentUrl('/cart/payment-information');",
              "err": {},
              "uuid": "6276ec9d-a0da-4f61-a4c7-fa00c3b15ad5",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [
            "6276ec9d-a0da-4f61-a4c7-fa00c3b15ad5"
          ],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 0
        },
        {
          "uuid": "d3ba7344-7720-4385-819d-fe147fe9a542",
          "title": "DIAMOND JEWELLERY - DIAMOND STUDS",
          "fullFile": "C:\\Users\\Daniela\\Documents\\CodeceptJS-Novita\\test\\Diamond Jewellery\\DiamondStuds_test.js",
          "file": "\\test\\Diamond Jewellery\\DiamondStuds_test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook: codeceptjs.beforeSuite",
              "fullTitle": "DIAMOND JEWELLERY - DIAMOND STUDS \"before all\" hook: codeceptjs.beforeSuite",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.suiteSetup(suite)",
              "err": {},
              "uuid": "6d1c2e93-33b9-4bd7-8b85-04082eda4f70",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook: codeceptjs.before",
              "fullTitle": "DIAMOND JEWELLERY - DIAMOND STUDS \"before each\" hook: codeceptjs.before",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.setup(suite)",
              "err": {},
              "uuid": "893d7851-e628-4e46-b744-e6d7d5b9af0f",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook: codeceptjs.afterSuite",
              "fullTitle": "DIAMOND JEWELLERY - DIAMOND STUDS \"after all\" hook: codeceptjs.afterSuite",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.suiteTeardown(suite)",
              "err": {},
              "uuid": "782d418f-0ac8-4cbe-a38f-cd855c5b62dd",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook: finalize codeceptjs",
              "fullTitle": "DIAMOND JEWELLERY - DIAMOND STUDS \"after each\" hook: finalize codeceptjs",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.teardown(suite)",
              "err": {},
              "uuid": "9c7c2d37-6714-47ce-a4de-37fd2f95635b",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "DIAMOND STUDS",
              "fullTitle": "DIAMOND JEWELLERY - DIAMOND STUDS: DIAMOND STUDS",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "I }) => {\n    const waitTime = 300; //Seconds\n    const waitResponseMetalType = (metalType) => {\n        let results = [];\n        I.waitForResponse(async res => {\n            if(res.url().includes('/api/product/diamond-jewellery')) {\n                results.push(await res.json());\n                if(results[0].response.total > 0) {\n                    const total = results[0].response.total > 10 ? 10 : results[0].response.total;\n                    for (let i = 0; i < total; i++) {\n                        if(!(results[0].response.items[i].metal_name.includes(metalType))) {\n                            console.log(`>>> Error in values obtained from METAL TYPE filter: ${metalType.toUpperCase()} expected, but ${results[0].response.items[i].metal_name.toUpperCase()} was found.`);\n                        }\n                    }\n                }else {\n                    console.log(`>>> No record was found according to the filter: METAL TYPE, option ${metalType.toUpperCase()}`);\n                    return true\n                }   \n                return true;\n            }\n        }, waitTime);\n    };\n    const waitResponseType = (type) => {\n        let results = [];\n        I.waitForResponse(async res => {\n            if(res.url().includes('/api/product/diamond-jewellery')) {\n                results.push(await res.json());\n                if(results[0].response.total > 0) {\n                    const total = results[0].response.total > 10 ? 10 : results[0].response.total;\n                    for (let i = 0; i < total; i++) {\n                        if(!(results[0].response.items[i].type.toLowerCase().includes(type) || results[0].response.items[i].category_slug.toLowerCase().includes(type))) {\n                            console.log(`>>> Error in values obtained from TYPE filter: ${type.toUpperCase()} expected, but it was found.`);\n                        }\n                    }\n                }else {\n                    console.log(`>>> No record was found according to the filter: TYPE, option ${type.toUpperCase()}`);\n                    return true\n                }\n                return true;\n            }\n        }, waitTime);\n    };\n    const waitResponseRingsPrice = (ringPrice, option) => {\n        let results = [];\n        I.waitForResponse(async res => {\n            if(res.url().includes('/api/product/diamond-jewellery')) {\n                results.push(await res.json());\n                if(results[0].response.total > 0) {\n                    const total = results[0].response.total > 10 ? 10 : results[0].response.total; \n                    for (let i = 0; i < total; i++) {\n                        if(ringPrice == 'under') {\n                            if(!(results[0].response.items[i].price <= 1000)) {\n                                console.log(`>>> Error in values obtained from PRICE filter: option ${option} expected, but ${results[0].response.items[i].price} was found.`);\n                            }\n                        }else if(ringPrice == 'between') {\n                            if(!(results[0].response.items[i].price > 1000 && results[0].response.items[0].width <= 2000)) {\n                                console.log(`>>> Error in values obtained from PRICE filter: option ${option} expected, but ${results[0].response.items[i].price} was found.`);\n                            }\n                        }else if(ringPrice == 'over') {\n                            if(!(results[0].response.items[i].price > 2000)) {\n                                console.log(`>>> Error in values obtained from PRICE filter: option ${option} expected, but ${results[0].response.items[i].price} was found.`);\n                            }\n                        }\n                    }\n                }else {\n                    console.log(`>>> No record was found according to the filter: PRICE, option ${option}.`);\n                    return true\n                }\n                return true;\n            }\n        }, waitTime);\n    };\n    const searchInputRingDesign = (name) => {\n        let results = [];\n        I.waitForResponse(async res => {\n            if(res.url().includes('/api/product/diamond-jewellery')) {\n                results.push(await res.json());\n                if(results[0].response.total > 0) {\n                    if(!(results[0].response.items[0].name.toLowerCase().includes(name))) {\n                        console.log(`>>> Error in values obtained from SEARCH PRODUCT filter: ${name.toUpperCase()} expected.`)\n                    }\n                }else{\n                    console.log(`No record was found according to the filter SEARCH PRODUCT INPUT, option ${name}.`);\n                    return true;\n                }\n                return true;\n            }\n        }, waitTime)\n    };\n    I.amOnPage('/');\n    I.forceClick(\"DIAMOND STUDS\");\n    I.seeInCurrentUrl('/lab-grown-diamond-earrings-lab-created-diamond-earrings-lab-grown-diamond-jewellery')\n    I.waitForElement('.jewellery_detail_link', waitTime);\n    I.forceClick('#jewellery_category_1')\n    I.waitForElement('.jewellery_detail_link', waitTime);\n    \n    // ------------------------ METAL FILTER -----------------------------------\n    // METAL: 18ct White Gold\n    I.say('FILTER METAL: 18ct White Gold');\n    I.forceClick('#metal_type_3');\n    I.seeCheckboxIsChecked('#metal_type_3');\n    waitResponseMetalType('18ct White Gold');\n    I.forceClick('#metal_type_3');\n    // FILTER METAL: 18ct Yellow Gold\n    I.say('FILTER METAL: 18ct Yellow Gold');\n    I.forceClick('#metal_type_5');\n    I.seeCheckboxIsChecked('#metal_type_5');\n    waitResponseMetalType('18ct Yellow Gold');\n    I.forceClick('#metal_type_5');   \n    // FILTER METAL: Rose Gold\n    I.say('FILTER METAL: Rose Gold');\n    I.forceClick('#metal_type_4');\n    I.seeCheckboxIsChecked('#metal_type_4');\n    waitResponseMetalType('Rose Gold');\n    I.forceClick('#metal_type_4');\n    // FILTER METAL: Platinum\n    I.say('FILTER METAL: Platinum');\n    I.forceClick('#metal_type_6');\n    I.seeCheckboxIsChecked('#metal_type_6');\n    waitResponseMetalType('Platinum');\n    I.forceClick('#metal_type_6');\n    I.forceClick('#metal_type_1');\n    // ------------------------ TYPE FILTER -----------------------------------\n    // TYPE: RINGS\n    I.forceClick('#jewellery_category_1')\n    // FILTER TYPE: RINGS\n    I.say('TYPE METAL: RINGS');\n    I.forceClick('#jewellery_category_2');\n    I.seeCheckboxIsChecked('#jewellery_category_2');\n    waitResponseType('ring');\n    I.forceClick('#jewellery_category_2');\n    // FILTER TYPE: STUDS\n    I.say('TYPE METAL: STUDS');\n    I.forceClick('#earring_style_slug_1');\n    I.seeCheckboxIsChecked('#earring_style_slug_1');\n    waitResponseType('stud');\n    I.forceClick('#earring_style_slug_1');\n    // FILTER TYPE: EARRINGS\n    I.say('TYPE METAL: EARRINGS');\n    I.forceClick('#jewellery_category_3');\n    I.seeCheckboxIsChecked('#jewellery_category_3');\n    waitResponseType('earring');\n    I.forceClick('#jewellery_category_3');\n    // FILTER TYPE: BRACELETS\n    I.say('TYPE METAL: BRACELETS');\n    I.forceClick('#jewellery_category_4');\n    I.seeCheckboxIsChecked('#jewellery_category_4');\n    waitResponseType('bracelet');\n    I.forceClick('#jewellery_category_4');\n    // FILTER TYPE: NECKLACES\n    I.say('TYPE METAL: NECKLACES');\n    I.forceClick('#jewellery_category_5');\n    I.seeCheckboxIsChecked('#jewellery_category_5');\n    waitResponseType('necklace');\n    I.forceClick('#jewellery_category_5');\n    I.forceClick('#jewellery_category_1')\n    // ------------------------ PRICE FILTER -----------------------------------\n    // PRICE $1000 and Under\n    I.say('PRICE $1000 and Under');\n    I.forceClick('#jewellery_price_range_2');\n    I.seeCheckboxIsChecked('#jewellery_price_range_2');\n    waitResponseRingsPrice('under', '$1000 AND UNDER');\n    I.forceClick('#jewellery_price_range_2');\n    // PRICE BETWEEN $1000 to $2000\n    I.say('PRICE BETWEEN $1000 to $2000');\n    I.forceClick('#jewellery_price_range_3');\n    I.seeCheckboxIsChecked('#jewellery_price_range_3');\n    waitResponseRingsPrice('between', '$1000 TO $2000');\n    I.forceClick('#jewellery_price_range_3');\n    // PRICE Over $2000\n    I.say('PRICE OVER $2000');\n    I.forceClick('#jewellery_price_range_4');\n    I.seeCheckboxIsChecked('#jewellery_price_range_4');\n    waitResponseRingsPrice('over', 'OVER $2000');\n    I.forceClick('#jewellery_price_range_4');\n    \n    I.forceClick('#jewellery_price_range_1');\n    // ------------------------ PRICE FILTER -----------------------------------\n    I.say('TEXT SEARCH INPUT');\n    I.fillField('//*[@id=\"jewellery_order_section\"]/div[2]/div/input', 'white')\n    I.pressKey('Enter')\n    searchInputRingDesign('white')\n    I.fillField('//*[@id=\"jewellery_order_section\"]/div[2]/div/input', '')\n    I.pressKey('Enter')\n    I.wait(4)\n    // -------------------------------------------- SELECT FIRST ITEM/ELEMENT --------------------------------------------\n    I.say('FIRST ITEM SELECTED');\n    I.waitForElement('#jewellery_list_section .jewellery_list .jewellery_detail_link', waitTime)\n    I.wait(2)\n    I.click('#jewellery_list_section .jewellery_list .jewellery_detail_link')\n    // More Info\n    I.click('#more_info_link')\n    I.waitForText('PRODUCT DESCRIPTION', waitTime)\n    I.see('PRODUCT DESCRIPTION')\n    I.click('//*[@id=\"jewellery_more_details_box\"]/button')\n    // 20% Deposit Available\n    I.click('//*[@id=\"pay_deposit_box\"]/div/a')\n    I.wait(5)\n    I.switchToNextTab()\n    I.seeInCurrentUrl('/deposit')\n    I.closeCurrentTab()\n    I.seeInCurrentUrl('/lab-grown-diamond-earrings-lab-created-diamond-earrings-lab-grown-diamond-jewellery')\n    // Add to cart\n    I.click('#add_product_to_cart_submit')\n    I.waitForText('SHOPPING CART', waitTime)\n    I.see('SHOPPING CART')\n    I.wait(2)\n    // Pay Deposit\n    I.forceClick('//*[@id=\"cart\"]/div/div[2]/div[2]/table/tbody/tr[2]/td[1]/label')\n    I.click('#accept_deposit_policy')\n    // Checkout\n    I.click('//*[@id=\"cart\"]/div/div[2]/div[2]/table/tbody/tr[4]/td/a')\n    I.waitForText('WHERE DO YOU WANT THESE ITEMS SENT?', waitTime)\n    I.see('CHECKOUT')\n    I.wait(4)\n    // WHERE DO YOU WANT THESE ITEMS SENT? - FORM\n    I.fillField('#shipping_billing_information_form_shippingFirstName', 'Jose Testing');\n    I.fillField('#shipping_billing_information_form_shippingLastName', 'Jose Testing');\n    I.fillField('#shipping_billing_information_form_shippingAddressLineOne', 'Test Address');\n    I.click('#shipping_billing_information_form_shippingCountry');\n    I.selectOption('#shipping_billing_information_form_shippingCountry', 'Australia');\n    I.fillField('#shipping_billing_information_form_shippingState', 'Testing');\n    I.fillField('#shipping_billing_information_form_shippingSuburb', 'Testing');\n    I.fillField('#shipping_billing_information_form_shippingPostcode', '4000');\n    I.fillField('#shipping_billing_information_form_shippingPhone', '1234567');\n    I.fillField('#shipping_billing_information_form_deliveryInstructions', 'Test form, please ignore this request.');\n    I.fillField('#shipping_billing_information_form_customerNotesProposalDate', 'Test form, please ignore this request.');\n    I.fillField('#shipping_billing_information_form_shippingEmail', 'testing@testing.com');\n    // Use the same address for billing and shipping\n    I.say('USE THE SAME ADDRESS FOR BILLING AND SHIPPING');\n    I.click('#cart_shipping_content .same_shipping_billing_fields label .form-check');\n    I.fillField('#shipping_billing_information_form_billingFirstName', 'Jose Testing');\n    I.fillField('#shipping_billing_information_form_billingLastName', 'Jose Testing');\n    I.fillField('#shipping_billing_information_form_billingAddressLineOne', 'Test Address');\n    I.click('#shipping_billing_information_form_billingCountry');\n    I.selectOption('#shipping_billing_information_form_billingCountry', 'Australia');\n    I.fillField('#shipping_billing_information_form_billingState', 'Testing');\n    I.fillField('#shipping_billing_information_form_billingSuburb', 'Testing');\n    I.fillField('#shipping_billing_information_form_billingPostcode', '4000');\n    I.fillField('#shipping_billing_information_form_billingPhone', '123456');\n    I.click('#cart_shipping_content .last_row .right_submit input');\n    I.seeInCurrentUrl('/cart/payment-information');",
              "err": {},
              "uuid": "f7121db7-accd-4ee5-95c8-361778553ccc",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [
            "f7121db7-accd-4ee5-95c8-361778553ccc"
          ],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 0
        },
        {
          "uuid": "4bca77da-d5fd-4757-a6cc-4aba03325da1",
          "title": "DIAMOND JEWELLERY - DRESS RINGS",
          "fullFile": "C:\\Users\\Daniela\\Documents\\CodeceptJS-Novita\\test\\Diamond Jewellery\\DressRings_test.js",
          "file": "\\test\\Diamond Jewellery\\DressRings_test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook: codeceptjs.beforeSuite",
              "fullTitle": "DIAMOND JEWELLERY - DRESS RINGS \"before all\" hook: codeceptjs.beforeSuite",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.suiteSetup(suite)",
              "err": {},
              "uuid": "d25b4eeb-c16e-49ad-9ee7-25bf9fad7b9f",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook: codeceptjs.before",
              "fullTitle": "DIAMOND JEWELLERY - DRESS RINGS \"before each\" hook: codeceptjs.before",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.setup(suite)",
              "err": {},
              "uuid": "94e4855b-8bec-46f3-b338-481ef04b74c2",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook: codeceptjs.afterSuite",
              "fullTitle": "DIAMOND JEWELLERY - DRESS RINGS \"after all\" hook: codeceptjs.afterSuite",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.suiteTeardown(suite)",
              "err": {},
              "uuid": "a1f1d551-361f-4eee-88d7-8ab9db9a68ce",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook: finalize codeceptjs",
              "fullTitle": "DIAMOND JEWELLERY - DRESS RINGS \"after each\" hook: finalize codeceptjs",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.teardown(suite)",
              "err": {},
              "uuid": "296236c9-bd53-4d96-84dc-7faa3d8f79c3",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "DRESS RINGS",
              "fullTitle": "DIAMOND JEWELLERY - DRESS RINGS: DRESS RINGS",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "I }) => {\n    const waitTime = 300; //Seconds\n    const waitResponseMetalType = (metalType) => {\n        let results = [];\n        I.waitForResponse(async res => {\n            if(res.url().includes('/api/product/diamond-jewellery')) {\n                results.push(await res.json());\n                if(results[0].response.total > 0) {\n                    const total = results[0].response.total > 10 ? 10 : results[0].response.total;\n                    for (let i = 0; i < total; i++) {\n                        if(!(results[0].response.items[i].metal_name.includes(metalType))) {\n                            console.log(`>>> Error in values obtained from METAL TYPE filter: ${metalType.toUpperCase()} expected, but ${results[0].response.items[i].metal_name.toUpperCase()} was found.`);\n                        }\n                    }\n                }else {\n                    console.log(`>>> No record was found according to the filter: METAL TYPE, option ${metalType.toUpperCase()}`);\n                    return true\n                }   \n                return true;\n            }\n        }, waitTime);\n    };\n    const waitResponseType = (type) => {\n        let results = [];\n        I.waitForResponse(async res => {\n            if(res.url().includes('/api/product/diamond-jewellery')) {\n                results.push(await res.json());\n                if(results[0].response.total > 0) {\n                    const total = results[0].response.total > 10 ? 10 : results[0].response.total;\n                    for (let i = 0; i < total; i++) {\n                        if(!(results[0].response.items[i].type.toLowerCase().includes(type) || results[0].response.items[i].category_slug.toLowerCase().includes(type))) {\n                            console.log(`>>> Error in values obtained from TYPE filter: ${type.toUpperCase()} expected, but it was found.`);\n                        }\n                    }\n                }else {\n                    console.log(`>>> No record was found according to the filter: TYPE, option ${type.toUpperCase()}`);\n                    return true\n                }\n                return true;\n            }\n        }, waitTime);\n    };\n    const waitResponseRingsPrice = (ringPrice, option) => {\n        let results = [];\n        I.waitForResponse(async res => {\n            if(res.url().includes('/api/product/diamond-jewellery')) {\n                results.push(await res.json());\n                if(results[0].response.total > 0) {\n                    const total = results[0].response.total > 10 ? 10 : results[0].response.total; \n                    for (let i = 0; i < total; i++) {\n                        if(ringPrice == 'under') {\n                            if(!(results[0].response.items[i].price <= 1000)) {\n                                console.log(`>>> Error in values obtained from PRICE filter: option ${option} expected, but ${results[0].response.items[i].price} was found.`);\n                            }\n                        }else if(ringPrice == 'between') {\n                            if(!(results[0].response.items[i].price > 1000 && results[0].response.items[0].width <= 2000)) {\n                                console.log(`>>> Error in values obtained from PRICE filter: option ${option} expected, but ${results[0].response.items[i].price} was found.`);\n                            }\n                        }else if(ringPrice == 'over') {\n                            if(!(results[0].response.items[i].price > 2000)) {\n                                console.log(`>>> Error in values obtained from PRICE filter: option ${option} expected, but ${results[0].response.items[i].price} was found.`);\n                            }\n                        }\n                    }\n                }else {\n                    console.log(`>>> No record was found according to the filter: PRICE, option ${option}.`);\n                    return true\n                }\n                return true;\n            }\n        }, waitTime);\n    };\n    const searchInputRingDesign = (name) => {\n        let results = [];\n        I.waitForResponse(async res => {\n            if(res.url().includes('/api/product/diamond-jewellery')) {\n                results.push(await res.json());\n                if(results[0].response.total > 0) {\n                    if(!(results[0].response.items[0].name.toLowerCase().includes(name))) {\n                        console.log(`>>> Error in values obtained from SEARCH PRODUCT filter: ${name.toUpperCase()} expected.`)\n                    }\n                }else{\n                    console.log(`No record was found according to the filter SEARCH PRODUCT INPUT, option ${name}.`);\n                    return true;\n                }\n                return true;\n            }\n        }, waitTime)\n    };\n    I.amOnPage('/');\n    I.forceClick(\"DRESS RINGS\");\n    I.seeInCurrentUrl('/lab-grown-diamond-earrings-lab-created-diamond-earrings-lab-grown-diamond-jewellery')\n    I.waitForElement('.jewellery_detail_link', waitTime);\n    I.forceClick('#jewellery_category_1')\n    I.waitForElement('.jewellery_detail_link', waitTime);\n    \n    // ------------------------ METAL FILTER -----------------------------------\n    // METAL: 18ct White Gold\n    I.say('FILTER METAL: 18ct White Gold');\n    I.forceClick('#metal_type_3');\n    I.seeCheckboxIsChecked('#metal_type_3');\n    waitResponseMetalType('18ct White Gold');\n    I.forceClick('#metal_type_3');\n    // FILTER METAL: 18ct Yellow Gold\n    I.say('FILTER METAL: 18ct Yellow Gold');\n    I.forceClick('#metal_type_5');\n    I.seeCheckboxIsChecked('#metal_type_5');\n    waitResponseMetalType('18ct Yellow Gold');\n    I.forceClick('#metal_type_5');   \n    // FILTER METAL: Rose Gold\n    I.say('FILTER METAL: Rose Gold');\n    I.forceClick('#metal_type_4');\n    I.seeCheckboxIsChecked('#metal_type_4');\n    waitResponseMetalType('Rose Gold');\n    I.forceClick('#metal_type_4');\n    // FILTER METAL: Platinum\n    I.say('FILTER METAL: Platinum');\n    I.forceClick('#metal_type_6');\n    I.seeCheckboxIsChecked('#metal_type_6');\n    waitResponseMetalType('Platinum');\n    I.forceClick('#metal_type_6');\n    I.forceClick('#metal_type_1');\n    // ------------------------ TYPE FILTER -----------------------------------\n    // TYPE: RINGS\n    I.forceClick('#jewellery_category_1')\n    // FILTER TYPE: RINGS\n    I.say('TYPE METAL: RINGS');\n    I.forceClick('#jewellery_category_2');\n    I.seeCheckboxIsChecked('#jewellery_category_2');\n    waitResponseType('ring');\n    I.forceClick('#jewellery_category_2');\n    // FILTER TYPE: STUDS\n    I.say('TYPE METAL: STUDS');\n    I.forceClick('#earring_style_slug_1');\n    I.seeCheckboxIsChecked('#earring_style_slug_1');\n    waitResponseType('stud');\n    I.forceClick('#earring_style_slug_1');\n    // FILTER TYPE: EARRINGS\n    I.say('TYPE METAL: EARRINGS');\n    I.forceClick('#jewellery_category_3');\n    I.seeCheckboxIsChecked('#jewellery_category_3');\n    waitResponseType('earring');\n    I.forceClick('#jewellery_category_3');\n    // FILTER TYPE: BRACELETS\n    I.say('TYPE METAL: BRACELETS');\n    I.forceClick('#jewellery_category_4');\n    I.seeCheckboxIsChecked('#jewellery_category_4');\n    waitResponseType('bracelet');\n    I.forceClick('#jewellery_category_4');\n    // FILTER TYPE: NECKLACES\n    I.say('TYPE METAL: NECKLACES');\n    I.forceClick('#jewellery_category_5');\n    I.seeCheckboxIsChecked('#jewellery_category_5');\n    waitResponseType('necklace');\n    I.forceClick('#jewellery_category_5');\n    I.forceClick('#jewellery_category_1')\n    // ------------------------ PRICE FILTER -----------------------------------\n    // PRICE $1000 and Under\n    I.say('PRICE $1000 and Under');\n    I.forceClick('#jewellery_price_range_2');\n    I.seeCheckboxIsChecked('#jewellery_price_range_2');\n    waitResponseRingsPrice('under', '$1000 AND UNDER');\n    I.forceClick('#jewellery_price_range_2');\n    // PRICE BETWEEN $1000 to $2000\n    I.say('PRICE BETWEEN $1000 to $2000');\n    I.forceClick('#jewellery_price_range_3');\n    I.seeCheckboxIsChecked('#jewellery_price_range_3');\n    waitResponseRingsPrice('between', '$1000 TO $2000');\n    I.forceClick('#jewellery_price_range_3');\n    // PRICE Over $2000\n    I.say('PRICE OVER $2000');\n    I.forceClick('#jewellery_price_range_4');\n    I.seeCheckboxIsChecked('#jewellery_price_range_4');\n    waitResponseRingsPrice('over', 'OVER $2000');\n    I.forceClick('#jewellery_price_range_4');\n    \n    I.forceClick('#jewellery_price_range_1');\n    // ------------------------ PRICE FILTER -----------------------------------\n    I.say('TEXT SEARCH INPUT');\n    I.fillField('//*[@id=\"jewellery_order_section\"]/div[2]/div/input', 'white')\n    I.pressKey('Enter')\n    searchInputRingDesign('white')\n    I.fillField('//*[@id=\"jewellery_order_section\"]/div[2]/div/input', '')\n    I.pressKey('Enter')\n    I.wait(4)\n    // -------------------------------------------- SELECT FIRST ITEM/ELEMENT --------------------------------------------\n    I.say('FIRST ITEM SELECTED');\n    I.waitForElement('#jewellery_list_section .jewellery_list .jewellery_detail_link', waitTime)\n    I.wait(2)\n    I.click('#jewellery_list_section .jewellery_list .jewellery_detail_link')\n    // More Info\n    I.click('#more_info_link')\n    I.waitForText('PRODUCT DESCRIPTION', waitTime)\n    I.see('PRODUCT DESCRIPTION')\n    I.click('//*[@id=\"jewellery_more_details_box\"]/button')\n    // 20% Deposit Available\n    I.click('//*[@id=\"pay_deposit_box\"]/div/a')\n    I.wait(5)\n    I.switchToNextTab()\n    I.seeInCurrentUrl('/deposit')\n    I.closeCurrentTab()\n    I.seeInCurrentUrl('/lab-grown-diamond-earrings-lab-created-diamond-earrings-lab-grown-diamond-jewellery')\n    // Add to cart\n    I.click('#add_product_to_cart_submit')\n    I.waitForText('SHOPPING CART', waitTime)\n    I.see('SHOPPING CART')\n    I.wait(2)\n    // Pay Deposit\n    I.forceClick('//*[@id=\"cart\"]/div/div[2]/div[2]/table/tbody/tr[2]/td[1]/label')\n    I.click('#accept_deposit_policy')\n    // Checkout\n    I.click('//*[@id=\"cart\"]/div/div[2]/div[2]/table/tbody/tr[4]/td/a')\n    I.waitForText('WHERE DO YOU WANT THESE ITEMS SENT?', waitTime)\n    I.see('CHECKOUT')\n    I.wait(4)\n    // WHERE DO YOU WANT THESE ITEMS SENT? - FORM\n    I.fillField('#shipping_billing_information_form_shippingFirstName', 'Jose Testing');\n    I.fillField('#shipping_billing_information_form_shippingLastName', 'Jose Testing');\n    I.fillField('#shipping_billing_information_form_shippingAddressLineOne', 'Test Address');\n    I.click('#shipping_billing_information_form_shippingCountry');\n    I.selectOption('#shipping_billing_information_form_shippingCountry', 'Australia');\n    I.fillField('#shipping_billing_information_form_shippingState', 'Testing');\n    I.fillField('#shipping_billing_information_form_shippingSuburb', 'Testing');\n    I.fillField('#shipping_billing_information_form_shippingPostcode', '4000');\n    I.fillField('#shipping_billing_information_form_shippingPhone', '1234567');\n    I.fillField('#shipping_billing_information_form_deliveryInstructions', 'Test form, please ignore this request.');\n    I.fillField('#shipping_billing_information_form_customerNotesProposalDate', 'Test form, please ignore this request.');\n    I.fillField('#shipping_billing_information_form_shippingEmail', 'testing@testing.com');\n    // Use the same address for billing and shipping\n    I.say('USE THE SAME ADDRESS FOR BILLING AND SHIPPING');\n    I.click('#cart_shipping_content .same_shipping_billing_fields label .form-check');\n    I.fillField('#shipping_billing_information_form_billingFirstName', 'Jose Testing');\n    I.fillField('#shipping_billing_information_form_billingLastName', 'Jose Testing');\n    I.fillField('#shipping_billing_information_form_billingAddressLineOne', 'Test Address');\n    I.click('#shipping_billing_information_form_billingCountry');\n    I.selectOption('#shipping_billing_information_form_billingCountry', 'Australia');\n    I.fillField('#shipping_billing_information_form_billingState', 'Testing');\n    I.fillField('#shipping_billing_information_form_billingSuburb', 'Testing');\n    I.fillField('#shipping_billing_information_form_billingPostcode', '4000');\n    I.fillField('#shipping_billing_information_form_billingPhone', '123456');\n    I.click('#cart_shipping_content .last_row .right_submit input');\n    I.seeInCurrentUrl('/cart/payment-information');",
              "err": {},
              "uuid": "3ea284cb-1e76-4976-9836-3c94fcd5d5c9",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [
            "3ea284cb-1e76-4976-9836-3c94fcd5d5c9"
          ],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 0
        },
        {
          "uuid": "aeac719b-758e-448a-91fc-1ca07834989c",
          "title": "DIAMOND JEWELLERY - SHOP NOW",
          "fullFile": "C:\\Users\\Daniela\\Documents\\CodeceptJS-Novita\\test\\Diamond Jewellery\\ShopNow_test.js",
          "file": "\\test\\Diamond Jewellery\\ShopNow_test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook: codeceptjs.beforeSuite",
              "fullTitle": "DIAMOND JEWELLERY - SHOP NOW \"before all\" hook: codeceptjs.beforeSuite",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.suiteSetup(suite)",
              "err": {},
              "uuid": "9253e7e2-9c15-432e-ad11-2d19ed2d8cda",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook: codeceptjs.before",
              "fullTitle": "DIAMOND JEWELLERY - SHOP NOW \"before each\" hook: codeceptjs.before",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.setup(suite)",
              "err": {},
              "uuid": "034b8adc-35ab-4379-a405-33b52a7ad289",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook: codeceptjs.afterSuite",
              "fullTitle": "DIAMOND JEWELLERY - SHOP NOW \"after all\" hook: codeceptjs.afterSuite",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.suiteTeardown(suite)",
              "err": {},
              "uuid": "5c4dfab0-d51d-48b3-b29b-ee3f580dfcd5",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook: finalize codeceptjs",
              "fullTitle": "DIAMOND JEWELLERY - SHOP NOW \"after each\" hook: finalize codeceptjs",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.teardown(suite)",
              "err": {},
              "uuid": "ab3d8dcc-5401-415c-9d76-2e2fa89ed02a",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "SHOP NOW",
              "fullTitle": "DIAMOND JEWELLERY - SHOP NOW: SHOP NOW",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "I }) => {\n    const waitTime = 300; //Seconds\n    const waitResponseMetalType = (metalType) => {\n        let results = [];\n        I.waitForResponse(async res => {\n            if(res.url().includes('/api/product/diamond-jewellery')) {\n                results.push(await res.json());\n                if(results[0].response.total > 0) {\n                    const total = results[0].response.total > 10 ? 10 : results[0].response.total;\n                    for (let i = 0; i < total; i++) {\n                        if(!(results[0].response.items[i].metal_name.includes(metalType))) {\n                            console.log(`>>> Error in values obtained from METAL TYPE filter: ${metalType.toUpperCase()} expected, but ${results[0].response.items[i].metal_name.toUpperCase()} was found.`);\n                        }\n                    }\n                }else {\n                    console.log(`>>> No record was found according to the filter: METAL TYPE, option ${metalType.toUpperCase()}`);\n                    return true\n                }   \n                return true;\n            }\n        }, waitTime);\n    };\n    const waitResponseType = (type) => {\n        let results = [];\n        I.waitForResponse(async res => {\n            if(res.url().includes('/api/product/diamond-jewellery')) {\n                results.push(await res.json());\n                if(results[0].response.total > 0) {\n                    const total = results[0].response.total > 10 ? 10 : results[0].response.total;\n                    for (let i = 0; i < total; i++) {\n                        if(!(results[0].response.items[i].type.toLowerCase().includes(type) || results[0].response.items[i].category_slug.toLowerCase().includes(type))) {\n                            console.log(`>>> Error in values obtained from TYPE filter: ${type.toUpperCase()} expected, but it was found.`);\n                        }\n                    }\n                }else {\n                    console.log(`>>> No record was found according to the filter: TYPE, option ${type.toUpperCase()}`);\n                    return true\n                }\n                return true;\n            }\n        }, waitTime);\n    };\n    const waitResponseRingsPrice = (ringPrice, option) => {\n        let results = [];\n        I.waitForResponse(async res => {\n            if(res.url().includes('/api/product/diamond-jewellery')) {\n                results.push(await res.json());\n                if(results[0].response.total > 0) {\n                    const total = results[0].response.total > 10 ? 10 : results[0].response.total; \n                    for (let i = 0; i < total; i++) {\n                        if(ringPrice == 'under') {\n                            if(!(results[0].response.items[i].price <= 1000)) {\n                                console.log(`>>> Error in values obtained from PRICE filter: option ${option} expected, but ${results[0].response.items[i].price} was found.`);\n                            }\n                        }else if(ringPrice == 'between') {\n                            if(!(results[0].response.items[i].price > 1000 && results[0].response.items[0].width <= 2000)) {\n                                console.log(`>>> Error in values obtained from PRICE filter: option ${option} expected, but ${results[0].response.items[i].price} was found.`);\n                            }\n                        }else if(ringPrice == 'over') {\n                            if(!(results[0].response.items[i].price > 2000)) {\n                                console.log(`>>> Error in values obtained from PRICE filter: option ${option} expected, but ${results[0].response.items[i].price} was found.`);\n                            }\n                        }\n                    }\n                }else {\n                    console.log(`>>> No record was found according to the filter: PRICE, option ${option}.`);\n                    return true\n                }\n                return true;\n            }\n        }, waitTime);\n    };\n    const searchInputRingDesign = (name) => {\n        let results = [];\n        I.waitForResponse(async res => {\n            if(res.url().includes('/api/product/diamond-jewellery')) {\n                results.push(await res.json());\n                if(results[0].response.total > 0) {\n                    if(!(results[0].response.items[0].name.toLowerCase().includes(name))) {\n                        console.log(`>>> Error in values obtained from SEARCH PRODUCT filter: ${name.toUpperCase()} expected.`)\n                    }\n                }else{\n                    console.log(`No record was found according to the filter SEARCH PRODUCT INPUT, option ${name}.`);\n                    return true;\n                }\n                return true;\n            }\n        }, waitTime)\n    };\n    I.amOnPage('/');\n    I.forceClick('//*[@id=\"main_menu_container\"]/div[2]/div/div[3]/div/div[2]/div/div/div/a');\n    I.seeInCurrentUrl('/lab-grown-diamond-earrings-lab-created-diamond-earrings-lab-grown-diamond-jewellery')\n    I.waitForElement('.jewellery_detail_link', waitTime);\n    I.forceClick('#jewellery_category_1')\n    I.waitForElement('.jewellery_detail_link', waitTime);\n    \n    // ------------------------ METAL FILTER -----------------------------------\n    // METAL: 18ct White Gold\n    I.say('FILTER METAL: 18ct White Gold');\n    I.forceClick('#metal_type_3');\n    I.seeCheckboxIsChecked('#metal_type_3');\n    waitResponseMetalType('18ct White Gold');\n    I.forceClick('#metal_type_3');\n    // FILTER METAL: 18ct Yellow Gold\n    I.say('FILTER METAL: 18ct Yellow Gold');\n    I.forceClick('#metal_type_5');\n    I.seeCheckboxIsChecked('#metal_type_5');\n    waitResponseMetalType('18ct Yellow Gold');\n    I.forceClick('#metal_type_5');   \n    // FILTER METAL: Rose Gold\n    I.say('FILTER METAL: Rose Gold');\n    I.forceClick('#metal_type_4');\n    I.seeCheckboxIsChecked('#metal_type_4');\n    waitResponseMetalType('Rose Gold');\n    I.forceClick('#metal_type_4');\n    // FILTER METAL: Platinum\n    I.say('FILTER METAL: Platinum');\n    I.forceClick('#metal_type_6');\n    I.seeCheckboxIsChecked('#metal_type_6');\n    waitResponseMetalType('Platinum');\n    I.forceClick('#metal_type_6');\n    I.forceClick('#metal_type_1');\n    // ------------------------ TYPE FILTER -----------------------------------\n    // TYPE: RINGS\n    I.forceClick('#jewellery_category_1')\n    // FILTER TYPE: RINGS\n    I.say('TYPE METAL: RINGS');\n    I.forceClick('#jewellery_category_2');\n    I.seeCheckboxIsChecked('#jewellery_category_2');\n    waitResponseType('ring');\n    I.forceClick('#jewellery_category_2');\n    // FILTER TYPE: STUDS\n    I.say('TYPE METAL: STUDS');\n    I.forceClick('#earring_style_slug_1');\n    I.seeCheckboxIsChecked('#earring_style_slug_1');\n    waitResponseType('stud');\n    I.forceClick('#earring_style_slug_1');\n    // FILTER TYPE: EARRINGS\n    I.say('TYPE METAL: EARRINGS');\n    I.forceClick('#jewellery_category_3');\n    I.seeCheckboxIsChecked('#jewellery_category_3');\n    waitResponseType('earring');\n    I.forceClick('#jewellery_category_3');\n    // FILTER TYPE: BRACELETS\n    I.say('TYPE METAL: BRACELETS');\n    I.forceClick('#jewellery_category_4');\n    I.seeCheckboxIsChecked('#jewellery_category_4');\n    waitResponseType('bracelet');\n    I.forceClick('#jewellery_category_4');\n    // FILTER TYPE: NECKLACES\n    I.say('TYPE METAL: NECKLACES');\n    I.forceClick('#jewellery_category_5');\n    I.seeCheckboxIsChecked('#jewellery_category_5');\n    waitResponseType('necklace');\n    I.forceClick('#jewellery_category_5');\n    I.forceClick('#jewellery_category_1')\n    // ------------------------ PRICE FILTER -----------------------------------\n    // PRICE $1000 and Under\n    I.say('PRICE $1000 and Under');\n    I.forceClick('#jewellery_price_range_2');\n    I.seeCheckboxIsChecked('#jewellery_price_range_2');\n    waitResponseRingsPrice('under', '$1000 AND UNDER');\n    I.forceClick('#jewellery_price_range_2');\n    // PRICE BETWEEN $1000 to $2000\n    I.say('PRICE BETWEEN $1000 to $2000');\n    I.forceClick('#jewellery_price_range_3');\n    I.seeCheckboxIsChecked('#jewellery_price_range_3');\n    waitResponseRingsPrice('between', '$1000 TO $2000');\n    I.forceClick('#jewellery_price_range_3');\n    // PRICE Over $2000\n    I.say('PRICE OVER $2000');\n    I.forceClick('#jewellery_price_range_4');\n    I.seeCheckboxIsChecked('#jewellery_price_range_4');\n    waitResponseRingsPrice('over', 'OVER $2000');\n    I.forceClick('#jewellery_price_range_4');\n    \n    I.forceClick('#jewellery_price_range_1');\n    I.say('SHOP now')\n    // ------------------------ PRICE FILTER -----------------------------------\n    I.say('TEXT SEARCH INPUT');\n    I.fillField('//*[@id=\"jewellery_order_section\"]/div[2]/div/input', 'white')\n    I.pressKey('Enter')\n    searchInputRingDesign('white')\n    I.fillField('//*[@id=\"jewellery_order_section\"]/div[2]/div/input', '')\n    I.pressKey('Enter')\n    I.wait(4);\n    // -------------------------------------------- SELECT FIRST ITEM/ELEMENT --------------------------------------------\n    I.say('FIRST ITEM SELECTED');\n    I.waitForElement('#jewellery_list_section .jewellery_list .jewellery_detail_link', waitTime)\n    I.wait(2)\n    I.click('#jewellery_list_section .jewellery_list .jewellery_detail_link')\n    // More Info\n    I.click('#more_info_link')\n    I.waitForText('PRODUCT DESCRIPTION', waitTime)\n    I.see('PRODUCT DESCRIPTION')\n    I.click('//*[@id=\"jewellery_more_details_box\"]/button')\n    // 20% Deposit Available\n    I.click('//*[@id=\"pay_deposit_box\"]/div/a')\n    I.wait(5)\n    I.switchToNextTab()\n    I.seeInCurrentUrl('/deposit')\n    I.closeCurrentTab()\n    I.seeInCurrentUrl('/lab-grown-diamond-earrings-lab-created-diamond-earrings-lab-grown-diamond-jewellery')\n    // Add to cart\n    I.click('#add_product_to_cart_submit')\n    I.waitForText('SHOPPING CART', waitTime)\n    I.see('SHOPPING CART')\n    I.wait(2)\n    // Pay Deposit\n    I.forceClick('#pay_deposit_value')\n    I.click('#accept_deposit_policy')\n    // Checkout\n    I.click('//*[@id=\"cart\"]/div/div[2]/div[2]/table/tbody/tr[4]/td/a')\n    I.waitForText('WHERE DO YOU WANT THESE ITEMS SENT?', waitTime)\n    I.see('CHECKOUT')\n    I.wait(4)\n     // WHERE DO YOU WANT THESE ITEMS SENT? - FORM\n    I.fillField('#shipping_billing_information_form_shippingFirstName', 'Jose Testing');\n    I.fillField('#shipping_billing_information_form_shippingLastName', 'Jose Testing');\n    I.fillField('#shipping_billing_information_form_shippingAddressLineOne', 'Test Address');\n    I.click('#shipping_billing_information_form_shippingCountry');\n    I.selectOption('#shipping_billing_information_form_shippingCountry', 'Australia');\n    I.fillField('#shipping_billing_information_form_shippingState', 'Testing');\n    I.fillField('#shipping_billing_information_form_shippingSuburb', 'Testing');\n    I.fillField('#shipping_billing_information_form_shippingPostcode', '4000');\n    I.fillField('#shipping_billing_information_form_shippingPhone', '1234567');\n    I.fillField('#shipping_billing_information_form_deliveryInstructions', 'Test form, please ignore this request.');\n    I.fillField('#shipping_billing_information_form_customerNotesProposalDate', 'Test form, please ignore this request.');\n    I.fillField('#shipping_billing_information_form_shippingEmail', 'testing@testing.com');\n    // Use the same address for billing and shipping\n    I.say('USE THE SAME ADDRESS FOR BILLING AND SHIPPING');\n    I.click('#cart_shipping_content .same_shipping_billing_fields label .form-check');\n    I.fillField('#shipping_billing_information_form_billingFirstName', 'Jose Testing');\n    I.fillField('#shipping_billing_information_form_billingLastName', 'Jose Testing');\n    I.fillField('#shipping_billing_information_form_billingAddressLineOne', 'Test Address');\n    I.click('#shipping_billing_information_form_billingCountry');\n    I.selectOption('#shipping_billing_information_form_billingCountry', 'Australia');\n    I.fillField('#shipping_billing_information_form_billingState', 'Testing');\n    I.fillField('#shipping_billing_information_form_billingSuburb', 'Testing');\n    I.fillField('#shipping_billing_information_form_billingPostcode', '4000');\n    I.fillField('#shipping_billing_information_form_billingPhone', '123456');\n    I.click('#cart_shipping_content .last_row .right_submit input');\n    I.seeInCurrentUrl('/cart/payment-information');",
              "err": {},
              "uuid": "52ed0d54-4137-4bf7-b603-78dd03c48881",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [
            "52ed0d54-4137-4bf7-b603-78dd03c48881"
          ],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 0
        },
        {
          "uuid": "b3f3b925-7c63-4820-9e28-0665cfbc7619",
          "title": "DIAMOND JEWELLERY - TENNIS BRACELETS",
          "fullFile": "C:\\Users\\Daniela\\Documents\\CodeceptJS-Novita\\test\\Diamond Jewellery\\TennisBracelets_test.js",
          "file": "\\test\\Diamond Jewellery\\TennisBracelets_test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook: codeceptjs.beforeSuite",
              "fullTitle": "DIAMOND JEWELLERY - TENNIS BRACELETS \"before all\" hook: codeceptjs.beforeSuite",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.suiteSetup(suite)",
              "err": {},
              "uuid": "09a7e105-c594-4199-a373-2b90c29924fa",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook: codeceptjs.before",
              "fullTitle": "DIAMOND JEWELLERY - TENNIS BRACELETS \"before each\" hook: codeceptjs.before",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.setup(suite)",
              "err": {},
              "uuid": "00684708-77ec-474a-942b-bd0e92496bba",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook: codeceptjs.afterSuite",
              "fullTitle": "DIAMOND JEWELLERY - TENNIS BRACELETS \"after all\" hook: codeceptjs.afterSuite",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.suiteTeardown(suite)",
              "err": {},
              "uuid": "99ea862a-d85a-48eb-8fd4-bd52354ab0ba",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook: finalize codeceptjs",
              "fullTitle": "DIAMOND JEWELLERY - TENNIS BRACELETS \"after each\" hook: finalize codeceptjs",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.teardown(suite)",
              "err": {},
              "uuid": "2f392523-87dd-4e50-b6c6-0ea2bbf9193f",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "TENNIS BRACELETS",
              "fullTitle": "DIAMOND JEWELLERY - TENNIS BRACELETS: TENNIS BRACELETS",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "I }) => {\n    const waitTime = 300; //Seconds\n    const waitResponseMetalType = (metalType) => {\n        let results = [];\n        I.waitForResponse(async res => {\n            if(res.url().includes('/api/product/diamond-jewellery')) {\n                results.push(await res.json());\n                if(results[0].response.total > 0) {\n                    const total = results[0].response.total > 10 ? 10 : results[0].response.total;\n                    for (let i = 0; i < total; i++) {\n                        if(!(results[0].response.items[i].metal_name.includes(metalType))) {\n                            console.log(`>>> Error in values obtained from METAL TYPE filter: ${metalType.toUpperCase()} expected, but ${results[0].response.items[i].metal_name.toUpperCase()} was found.`);\n                        }\n                    }\n                }else {\n                    console.log(`>>> No record was found according to the filter: METAL TYPE, option ${metalType.toUpperCase()}`);\n                    return true\n                }   \n                return true;\n            }\n        }, waitTime);\n    };\n    const waitResponseType = (type) => {\n        let results = [];\n        I.waitForResponse(async res => {\n            if(res.url().includes('/api/product/diamond-jewellery')) {\n                results.push(await res.json());\n                if(results[0].response.total > 0) {\n                    const total = results[0].response.total > 10 ? 10 : results[0].response.total;\n                    for (let i = 0; i < total; i++) {\n                        if(!(results[0].response.items[i].type.toLowerCase().includes(type) || results[0].response.items[i].category_slug.toLowerCase().includes(type))) {\n                            console.log(`>>> Error in values obtained from TYPE filter: ${type.toUpperCase()} expected, but it was found.`);\n                        }\n                    }\n                }else {\n                    console.log(`>>> No record was found according to the filter: TYPE, option ${type.toUpperCase()}`);\n                    return true\n                }\n                return true;\n            }\n        }, waitTime);\n    };\n    const waitResponseRingsPrice = (ringPrice, option) => {\n        let results = [];\n        I.waitForResponse(async res => {\n            if(res.url().includes('/api/product/diamond-jewellery')) {\n                results.push(await res.json());\n                if(results[0].response.total > 0) {\n                    const total = results[0].response.total > 10 ? 10 : results[0].response.total; \n                    for (let i = 0; i < total; i++) {\n                        if(ringPrice == 'under') {\n                            if(!(results[0].response.items[i].price <= 1000)) {\n                                console.log(`>>> Error in values obtained from PRICE filter: option ${option} expected, but ${results[0].response.items[i].price} was found.`);\n                            }\n                        }else if(ringPrice == 'between') {\n                            if(!(results[0].response.items[i].price > 1000 && results[0].response.items[0].width <= 2000)) {\n                                console.log(`>>> Error in values obtained from PRICE filter: option ${option} expected, but ${results[0].response.items[i].price} was found.`);\n                            }\n                        }else if(ringPrice == 'over') {\n                            if(!(results[0].response.items[i].price > 2000)) {\n                                console.log(`>>> Error in values obtained from PRICE filter: option ${option} expected, but ${results[0].response.items[i].price} was found.`);\n                            }\n                        }\n                    }\n                }else {\n                    console.log(`>>> No record was found according to the filter: PRICE, option ${option}.`);\n                    return true\n                }\n                return true;\n            }\n        }, waitTime);\n    };\n    const searchInputRingDesign = (name) => {\n        let results = [];\n        I.waitForResponse(async res => {\n            if(res.url().includes('/api/product/diamond-jewellery')) {\n                results.push(await res.json());\n                if(results[0].response.total > 0) {\n                    if(!(results[0].response.items[0].name.toLowerCase().includes(name))) {\n                        console.log(`>>> Error in values obtained from SEARCH PRODUCT filter: ${name.toUpperCase()} expected.`)\n                    }\n                }else{\n                    console.log(`No record was found according to the filter SEARCH PRODUCT INPUT, option ${name}.`);\n                    return true;\n                }\n                return true;\n            }\n        }, waitTime)\n    };\n    I.amOnPage('/');\n    I.forceClick(\"TENNIS BRACELETS\");\n    I.seeInCurrentUrl('/lab-grown-diamond-earrings-lab-created-diamond-earrings-lab-grown-diamond-jewellery')\n    I.waitForElement('.jewellery_detail_link', waitTime);\n    I.forceClick('#jewellery_category_1')\n    I.waitForElement('.jewellery_detail_link', waitTime);\n    // ------------------------ METAL FILTER -----------------------------------\n    // METAL: 18ct White Gold\n    I.say('FILTER METAL: 18ct White Gold');\n    I.forceClick('#metal_type_3');\n    I.seeCheckboxIsChecked('#metal_type_3');\n    waitResponseMetalType('18ct White Gold');\n    I.forceClick('#metal_type_3');\n    // FILTER METAL: 18ct Yellow Gold\n    I.say('FILTER METAL: 18ct Yellow Gold');\n    I.forceClick('#metal_type_5');\n    I.seeCheckboxIsChecked('#metal_type_5');\n    waitResponseMetalType('18ct Yellow Gold');\n    I.forceClick('#metal_type_5');   \n    // FILTER METAL: Rose Gold\n    I.say('FILTER METAL: Rose Gold');\n    I.forceClick('#metal_type_4');\n    I.seeCheckboxIsChecked('#metal_type_4');\n    waitResponseMetalType('Rose Gold');\n    I.forceClick('#metal_type_4');\n    // FILTER METAL: Platinum\n    I.say('FILTER METAL: Platinum');\n    I.forceClick('#metal_type_6');\n    I.seeCheckboxIsChecked('#metal_type_6');\n    waitResponseMetalType('Platinum');\n    I.forceClick('#metal_type_6');\n    I.forceClick('#metal_type_1');\n    // ------------------------ TYPE FILTER -----------------------------------\n    // TYPE: RINGS\n    I.forceClick('#jewellery_category_1')\n    // FILTER TYPE: RINGS\n    I.say('TYPE METAL: RINGS');\n    I.forceClick('#jewellery_category_2');\n    I.seeCheckboxIsChecked('#jewellery_category_2');\n    waitResponseType('ring');\n    I.forceClick('#jewellery_category_2');\n    // FILTER TYPE: STUDS\n    I.say('TYPE METAL: STUDS');\n    I.forceClick('#earring_style_slug_1');\n    I.seeCheckboxIsChecked('#earring_style_slug_1');\n    waitResponseType('stud');\n    I.forceClick('#earring_style_slug_1');\n    // FILTER TYPE: EARRINGS\n    I.say('TYPE METAL: EARRINGS');\n    I.forceClick('#jewellery_category_3');\n    I.seeCheckboxIsChecked('#jewellery_category_3');\n    waitResponseType('earring');\n    I.forceClick('#jewellery_category_3');\n    // FILTER TYPE: BRACELETS\n    I.say('TYPE METAL: BRACELETS');\n    I.forceClick('#jewellery_category_4');\n    I.seeCheckboxIsChecked('#jewellery_category_4');\n    waitResponseType('bracelet');\n    I.forceClick('#jewellery_category_4');\n    // FILTER TYPE: NECKLACES\n    I.say('TYPE METAL: NECKLACES');\n    I.forceClick('#jewellery_category_5');\n    I.seeCheckboxIsChecked('#jewellery_category_5');\n    waitResponseType('necklace');\n    I.forceClick('#jewellery_category_5');\n    I.forceClick('#jewellery_category_1')\n    // ------------------------ PRICE FILTER -----------------------------------\n    // PRICE $1000 and Under\n    I.say('PRICE $1000 and Under');\n    I.forceClick('#jewellery_price_range_2');\n    I.seeCheckboxIsChecked('#jewellery_price_range_2');\n    waitResponseRingsPrice('under', '$1000 AND UNDER');\n    I.forceClick('#jewellery_price_range_2');\n    // PRICE BETWEEN $1000 to $2000\n    I.say('PRICE BETWEEN $1000 to $2000');\n    I.forceClick('#jewellery_price_range_3');\n    I.seeCheckboxIsChecked('#jewellery_price_range_3');\n    waitResponseRingsPrice('between', '$1000 TO $2000');\n    I.forceClick('#jewellery_price_range_3');\n    // PRICE Over $2000\n    I.say('PRICE OVER $2000');\n    I.forceClick('#jewellery_price_range_4');\n    I.seeCheckboxIsChecked('#jewellery_price_range_4');\n    waitResponseRingsPrice('over', 'OVER $2000');\n    I.forceClick('#jewellery_price_range_4');\n    \n    I.forceClick('#jewellery_price_range_1');\n    // ------------------------ PRICE FILTER -----------------------------------\n    I.say('TEXT SEARCH INPUT');\n    I.fillField('//*[@id=\"jewellery_order_section\"]/div[2]/div/input', 'white')\n    I.pressKey('Enter')\n    searchInputRingDesign('white')\n    I.fillField('//*[@id=\"jewellery_order_section\"]/div[2]/div/input', '')\n    I.pressKey('Enter')\n    I.wait(4)\n    // -------------------------------------------- SELECT FIRST ITEM/ELEMENT --------------------------------------------\n    I.say('FIRST ITEM SELECTED');\n    I.waitForElement('#jewellery_list_section .jewellery_list .jewellery_detail_link', waitTime)\n    I.click('#jewellery_list_section .jewellery_list .jewellery_detail_link')\n    // More Info\n    I.click('#more_info_link')\n    I.waitForText('PRODUCT DESCRIPTION', waitTime)\n    I.see('PRODUCT DESCRIPTION')\n    I.click('//*[@id=\"jewellery_more_details_box\"]/button')\n    // 20% Deposit Available\n    I.click('//*[@id=\"pay_deposit_box\"]/div/a')\n    I.wait(5)\n    I.switchToNextTab()\n    I.seeInCurrentUrl('/deposit')\n    I.closeCurrentTab()\n    I.seeInCurrentUrl('/lab-grown-diamond-earrings-lab-created-diamond-earrings-lab-grown-diamond-jewellery')\n    // Add to cart\n    I.click('#add_product_to_cart_submit')\n    I.waitForText('SHOPPING CART', waitTime)\n    I.see('SHOPPING CART')\n    I.wait(2)\n    // Pay Deposit\n    I.forceClick('//*[@id=\"cart\"]/div/div[2]/div[2]/table/tbody/tr[2]/td[1]/label')\n    I.click('#accept_deposit_policy')\n    // Checkout\n    I.click('//*[@id=\"cart\"]/div/div[2]/div[2]/table/tbody/tr[4]/td/a')\n    I.waitForText('WHERE DO YOU WANT THESE ITEMS SENT?', waitTime)\n    I.see('CHECKOUT')\n    I.wait(4)\n    // WHERE DO YOU WANT THESE ITEMS SENT? - FORM\n    I.fillField('#shipping_billing_information_form_shippingFirstName', 'Jose Testing');\n    I.fillField('#shipping_billing_information_form_shippingLastName', 'Jose Testing');\n    I.fillField('#shipping_billing_information_form_shippingAddressLineOne', 'Test Address');\n    I.click('#shipping_billing_information_form_shippingCountry');\n    I.selectOption('#shipping_billing_information_form_shippingCountry', 'Australia');\n    I.fillField('#shipping_billing_information_form_shippingState', 'Testing');\n    I.fillField('#shipping_billing_information_form_shippingSuburb', 'Testing');\n    I.fillField('#shipping_billing_information_form_shippingPostcode', '4000');\n    I.fillField('#shipping_billing_information_form_shippingPhone', '1234567');\n    I.fillField('#shipping_billing_information_form_deliveryInstructions', 'Test form, please ignore this request.');\n    I.fillField('#shipping_billing_information_form_customerNotesProposalDate', 'Test form, please ignore this request.');\n    I.fillField('#shipping_billing_information_form_shippingEmail', 'testing@testing.com');\n    // Use the same address for billing and shipping\n    I.say('USE THE SAME ADDRESS FOR BILLING AND SHIPPING');\n    I.click('#cart_shipping_content .same_shipping_billing_fields label .form-check');\n    I.fillField('#shipping_billing_information_form_billingFirstName', 'Jose Testing');\n    I.fillField('#shipping_billing_information_form_billingLastName', 'Jose Testing');\n    I.fillField('#shipping_billing_information_form_billingAddressLineOne', 'Test Address');\n    I.click('#shipping_billing_information_form_billingCountry');\n    I.selectOption('#shipping_billing_information_form_billingCountry', 'Australia');\n    I.fillField('#shipping_billing_information_form_billingState', 'Testing');\n    I.fillField('#shipping_billing_information_form_billingSuburb', 'Testing');\n    I.fillField('#shipping_billing_information_form_billingPostcode', '4000');\n    I.fillField('#shipping_billing_information_form_billingPhone', '123456');\n    I.click('#cart_shipping_content .last_row .right_submit input');\n    I.seeInCurrentUrl('/cart/payment-information');",
              "err": {},
              "uuid": "d8d07305-0c0d-49f3-92e1-8c788eb750bf",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [
            "d8d07305-0c0d-49f3-92e1-8c788eb750bf"
          ],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 0
        },
        {
          "uuid": "bc373044-f1eb-471c-9bf9-649f2fdc108e",
          "title": "ENGAGEMENT RINGS - BUY LOOSE DIAMONDS",
          "fullFile": "C:\\Users\\Daniela\\Documents\\CodeceptJS-Novita\\test\\Engagement Rings\\BuyLooseDiamond_test.js",
          "file": "\\test\\Engagement Rings\\BuyLooseDiamond_test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook: codeceptjs.beforeSuite",
              "fullTitle": "ENGAGEMENT RINGS - BUY LOOSE DIAMONDS \"before all\" hook: codeceptjs.beforeSuite",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.suiteSetup(suite)",
              "err": {},
              "uuid": "68579002-9cd4-4e76-9735-73c473dfbe11",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook: codeceptjs.before",
              "fullTitle": "ENGAGEMENT RINGS - BUY LOOSE DIAMONDS \"before each\" hook: codeceptjs.before",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.setup(suite)",
              "err": {},
              "uuid": "dea80f26-db6a-4951-933c-78a3bcf1bd42",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook: codeceptjs.afterSuite",
              "fullTitle": "ENGAGEMENT RINGS - BUY LOOSE DIAMONDS \"after all\" hook: codeceptjs.afterSuite",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.suiteTeardown(suite)",
              "err": {},
              "uuid": "c2e2c61a-55b7-42c8-9514-5838adb7e998",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook: finalize codeceptjs",
              "fullTitle": "ENGAGEMENT RINGS - BUY LOOSE DIAMONDS \"after each\" hook: finalize codeceptjs",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.teardown(suite)",
              "err": {},
              "uuid": "5ad7cdb7-2da0-41f8-88f6-ef67367e7b8b",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "BUY LOOSE DIAMONDS",
              "fullTitle": "ENGAGEMENT RINGS - BUY LOOSE DIAMONDS: BUY LOOSE DIAMONDS",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "I }) => {\n    const waitTime = 300; //Seconds\n    const params = {\n        \"shapes\" : [\"Round\", \"Oval\", \"Cushion\", \"Princess\", \"Emerald\", \"Pear\", \"Radiant\", \"Asscher\", \"Marquise\"],\n        \"caratFrom\" : 2,\n        \"caratTo\" : 4,\n        \"colour\" : {\n            \"D\" : [0, -500],\n            \"E\" : [50, -500],\n            \"F\" : [100, -500],\n            \"G\" : [150, -500],\n            \"H\" : [200, -500],\n            \"I\" : [210, -500],\n            \"J\" : [270, -500],\n            \"K\" : [300, -500],\n            \"L\" : [350, -500],\n            \"M\" : [400, 0],\n        },\n        \"priceFrom\" : 15000,\n        \"priceTo\" : 30000,\n        \"cut\" : {\n            \"Ideal\":[0, -500],\n            \"Excellent\":[100, -500],\n            \"Very Good\":[180, -500],\n            \"Good\":[500, 0],\n        },\n        \"clarity\" : {\n            \"IF\" : [0, -500],\n            \"VVS1\" : [50, -500],\n            \"VVS2\" : [100, -500],\n            \"VS1\" : [150, -500],\n            \"VS2\" : [230, -500],\n            \"SI1\" : [270, -500],\n            \"SI2\" : [320, -500],\n            \"I1\" : [380, 0]\n        },\n        \"polish\" : {\n            \"Excellent\" : [0, -500],\n            \"Very Good\" : [150, -500],\n            \"Good\" : [250, -500]\n        },\n        \"symmetry\" : {\n            \"Excellent\" : [0, -500],\n            \"Very Good\" : [150, -500],\n            \"Good\" : [250, -500]\n        },\n        \"reports\" : [\"IGI\", \"GIA\", \"GCAL\"],\n        \"ratioFrom\" : 1.26,\n        \"ratioTo\" : 2.00\n    }\n    const waitResponseAndtext = () => {\n        I.waitForText('Detail', waitTime, '//*[@id=\"body_table_results\"]/tr[1]/td[10]/a/div');\n    }\n    const checkDiamondShape = () => {\n        for(const shape of params.shapes) {\n            I.click(`.${shape.toLocaleLowerCase()}-shape`);            \n            let results = [];\n            I.waitForResponse(async res => {\n                if(res.url().includes('/api/product/diamonds')) {\n                    results.push(await res.json());\n                    if(results.length >= 2) {\n                        results[0].response.total > 0 ? results[0] = results[0] : results[0] = results[1];\n                        if(results[0].response.total > 0) {\n                            const total = results[0].response.total > 10 ? 10 : results[0].response.total\n                            for (let i = 0; i < total; i++) {\n                                if(!results[0].response.items[i].shape == shape) {\n                                    console.log(`>>> Error in values obtained from DIAMOND SHAPE filter: option ${shape.toUpperCase()} expected, but ${results[0].response.items[i].shape.toUpperCase()} was found.`);\n                                }\n                            }\n                        }else{\n                            console.log(`>>> No record was found according to the filter: DIAMOND SHAPE, option ${shape.toUpperCase()}`);\n                            return true;\n                        }\n                        return true;\n                    }\n                }\n            }, waitTime)\n            I.click(`.${shape.toLocaleLowerCase()}-shape`);\n        };\n    };\n    const checkDiamondCarat = () => {\n        I.fillField(\"#from_carat_value_input\", params.caratFrom);\n        I.pressKey(\"Enter\");\n        I.fillField(\"#to_carat_value_input\", params.caratTo);\n        I.pressKey(\"Enter\");\n        let results = [];\n        I.waitForResponse(async res => {\n            if(res.url().includes('/api/product/diamonds')) {\n                results.push(await res.json());\n                if(results.length >= 2) {\n                    results[0].response.total > 0 ? results[0] = results[0] : results[0] = results[1];\n                    if(results[0].response.total > 0) {\n                        const total = results[0].response.total > 10 ? 10 : results[0].response.total\n                        for (let i = 0; i < total; i++) {\n                            if(results[0].response.items[i].carat < parseFloat(params.caratFrom) || results[0].response.items[i].carat > parseFloat(params.caratTo)) {\n                                console.log(`>>> Error in values obtained from DIAMOND CARAT filter: option ${params.caratFrom} to ${params.caratTo} expected, but ${results[0].response.items[i].carat} was found.`);\n                            }\n                        }\n                    }else{\n                        console.log(`>>> No record was found according to the filter: DIAMOND CARAT, option ${params.caratFrom} to ${params.caratTo}.`);\n                        return true;\n                    }\n                    return true;\n                }\n            }\n        }, waitTime)\n        I.fillField(\"#from_carat_value_input\", 0.30);\n        I.pressKey(\"Enter\");\n        I.fillField(\"#to_carat_value_input\", 6);\n        I.pressKey(\"Enter\");\n    };\n    const checkDiamondColour = () => {\n        for (const elem of Object.keys(params.colour)) {\n            I.dragSlider(\"#search_form .diamond_filter_color_content .from\", params.colour[elem][0]);\n            I.dragSlider(\"#search_form .diamond_filter_color_content .to\", params.colour[elem][1]);\n            let results = [];\n            I.waitForResponse(async res => {\n                if(res.url().includes('/api/product/diamonds')) {\n                    results.push(await res.json());\n                    if(results.length >= 2) {\n                        results[0].response.total > 0 ? results[0] = results[0] : results[0] = results[1];\n                        if(results[0].response.total > 0) {\n                            const total = results[0].response.total > 10 ? 10 : results[0].response.total\n                            for (let i = 0; i < total; i++) {\n                                if(results[0].response.items[i].color != elem) {\n                                    console.log(`>>> Error in values obtained from DIAMOND COLOUR filter: option ${elem.toUpperCase()} expected, but ${results[0].response.items[i].color} was found.`);\n                                }\n                            }\n                        }else{\n                            console.log(`>>> No record was found according to the filter: DIAMOND COLOUR, option ${elem.toUpperCase()}.`);\n                            return true;\n                        }\n                        return true;\n                    }\n                }\n            }, waitTime)\n            I.dragSlider(\"#search_form .diamond_filter_color_content .from\", -500);\n            I.dragSlider(\"#search_form .diamond_filter_color_content .to\", 500);\n        };\n    };\n    const checkDiamondPrice = () => {\n        I.fillField(\"#from_price_value_input\", params.priceFrom);\n        I.pressKey('Enter');\n        I.fillField(\"#to_price_value_input\", params.priceTo);\n        I.pressKey('Enter');\n        let results = [];\n        I.waitForResponse(async res => {\n            if(res.url().includes('/api/product/diamonds')) {\n                results.push(await res.json());\n                if(results.length >= 2) {\n                    results[0].response.total > 0 ? results[0] = results[0] : results[0] = results[1];\n                    if(results[0].response.total > 0) {\n                        const total = results[0].response.total > 10 ? 10 : results[0].response.total\n                        for (let i = 0; i < total; i++) {\n                            if(results[0].response.items[i].price < params.priceFrom || results[0].response.items[i].price > params.priceTo) {\n                                console.log(`>>> Error in values obtained from DIAMOND PRICE filter: option option ${params.priceFrom} to ${params.priceTo} expected, but ${results[0].response.items[i].price} was found.`)\n                            }\n                        }\n                    }else{\n                        console.log(`>>> No record was found according to the filter: DIAMOND PRICE, option ${params.priceFrom} to ${params.priceTo}.`);\n                        return true;\n                    }\n                    return true;\n                }\n            }\n        }, waitTime)\n        I.fillField(\"#from_price_value_input\", 250);\n        I.pressKey('Enter');\n        I.fillField(\"#to_price_value_input\", 70000);\n        I.pressKey('Enter');        \n    };\n    const checkDiamondCut = () => {\n        for (const elem of Object.keys(params.cut)) {\n            I.dragSlider(\"#search_form .diamond_filter_cut_content .from\", params.cut[elem][0]);\n            I.dragSlider(\"#search_form .diamond_filter_cut_content .to\", params.cut[elem][1]);\n            let results = [];\n            I.waitForResponse(async res => {\n                if(res.url().includes('/api/product/diamonds')) {\n                    results.push(await res.json());\n                    if(results.length >= 2) {\n                        results[0].response.total > 0 ? results[0] = results[0] : results[0] = results[1];\n                        if(results[0].response.total > 0) {\n                            const total = results[0].response.total > 10 ? 10 : results[0].response.total\n                            for (let i = 0; i < total; i++) {\n                                if(results[0].response.items[i].cut != elem && results[0].response.items[i].cut != \"-\") {\n                                    console.log(`>>> Error in values obtained from DIAMOND CUT filter: option ${elem.toUpperCase()} expected, but ${results[0].response.items[i].cut} was found.`);\n                                }\n                            }\n                        }else{\n                            console.log(`>>> No record was found according to the filter: DIAMOND CUT, option ${elem.toUpperCase()}.`);\n                            return true;\n                        }\n                        return true;\n                    }\n                }\n            }, waitTime)             \n            I.dragSlider(\"#search_form .diamond_filter_cut_content .from\", -500);\n            I.dragSlider(\"#search_form .diamond_filter_cut_content .to\", 500);\n        };\n    };\n    const checkDiamondClarity = () => {\n        for (const elem of Object.keys(params.clarity)) {\n            I.dragSlider(\"#search_form .diamond_filter_clarity_content .from\", params.clarity[elem][0]);\n            I.dragSlider(\"#search_form .diamond_filter_clarity_content .to\", params.clarity[elem][1]);            \n            let results = [];\n            I.waitForResponse(async res => {\n                if(res.url().includes('/api/product/diamonds')) {\n                    results.push(await res.json());\n                    if(results.length >= 2) {\n                        results[0].response.total > 0 ? results[0] = results[0] : results[0] = results[1];\n                        if(results[0].response.total > 0) {\n                            const total = results[0].response.total > 10 ? 10 : results[0].response.total\n                            for (let i = 0; i < total; i++) {\n                                if(results[0].response.items[i].clarity != elem) {\n                                    console.log(`>>> Error in values obtained from DIAMOND CLARITY filter: option ${elem.toUpperCase()} expected, but ${results[0].response.items[i].clarity} was found.`);\n                                }\n                            }\n                        }else{\n                            console.log(`>>> No record was found according to the filter: DIAMOND CLARITY, option ${elem.toUpperCase()}.`);\n                            return true;\n                        }\n                        return true;\n                    }\n                }\n            }, waitTime)\n            I.dragSlider(\"#search_form .diamond_filter_clarity_content .from\", -500);\n            I.dragSlider(\"#search_form .diamond_filter_clarity_content .to\", 500);\n        };\n    };\n    const checkDiamondPolish = () => {\n        for (const elem of Object.keys(params.polish)) {\n            I.dragSlider(\"#advanced_filters_content .diamond_filter_polish_content .from\", params.polish[elem][0]);\n            I.dragSlider(\"#advanced_filters_content .diamond_filter_polish_content .to\", params.polish[elem][1]);\n            let results = [];\n            I.waitForResponse(async res => {\n                if(res.url().includes('/api/product/diamonds')) {\n                    results.push(await res.json());\n                    if(results.length >= 2) {\n                        results[0].response.total > 0 ? results[0] = results[0] : results[0] = results[1];\n                        if(results[0].response.total > 0) {\n                            const total = results[0].response.total > 10 ? 10 : results[0].response.total\n                            for (let i = 0; i < total; i++) {\n                                if(results[0].response.items[i].polish != elem) {\n                                    console.log(`>>> Error in values obtained from POLISH filter: option ${elem.toUpperCase()} expected, but ${results[0].response.items[i].polish} was found.`);\n                                }\n                            }\n                        }else{\n                            console.log(`>>> No record was found according to the filter: POLISH, option ${elem.toUpperCase()}.`);\n                            return true;\n                        }\n                        return true;\n                    }\n                }\n            }, waitTime)\n            I.dragSlider(\"#advanced_filters_content .diamond_filter_polish_content .from\", -500);\n            I.dragSlider(\"#advanced_filters_content .diamond_filter_polish_content .to\", 500);\n        }\n    };\n    const checkDiamondSymmetry = () => {\n        for (const elem of Object.keys(params.symmetry)) {\n            I.dragSlider(\"#advanced_filters_content .diamond_filter_symmetry_content .from\", params.symmetry[elem][0]);\n            I.dragSlider(\"#advanced_filters_content .diamond_filter_symmetry_content .to\", params.symmetry[elem][1]);\n            let results = [];\n            I.waitForResponse(async res => {\n                if(res.url().includes('/api/product/diamonds')) {\n                    results.push(await res.json());\n                    if(results.length >= 2) {\n                        results[0].response.total > 0 ? results[0] = results[0] : results[0] = results[1];\n                        if(results[0].response.total > 0) {\n                            const total = results[0].response.total > 10 ? 10 : results[0].response.total\n                            for (let i = 0; i < total; i++) {\n                                if(results[0].response.items[i].symmetry != elem) {\n                                    console.log(`>>> Error in values obtained from SYMMETRY filter: option ${elem.toUpperCase()} expected, but ${results[0].response.items[i].symmetry} was found.`);\n                                }\n                            }\n                        }else{\n                            console.log(`>>> No record was found according to the filter: SYMMETRY, option ${elem.toUpperCase()}.`);\n                            return true;\n                        }\n                        return true;\n                    }\n                }\n            }, waitTime)\n            I.dragSlider(\"#advanced_filters_content .diamond_filter_symmetry_content .from\", -500);\n            I.dragSlider(\"#advanced_filters_content .diamond_filter_symmetry_content .to\", 500);\n        }\n    };\n    const checkDiamondReport = () => {\n        for (let i = 0; i < params.reports.length; i++) {\n            I.forceClick(params.reports[i], `#advanced_filters_content .diamond_filter_certificate_content ul li:nth-child(${i+1}) label`);\n            let results = [];\n            I.waitForResponse(async res => {\n                if(res.url().includes('/api/product/diamonds')) {\n                    results.push(await res.json());\n                    if(results.length >= 2) {\n                        results[0].response.total > 0 ? results[0] = results[0] : results[0] = results[1];\n                        if(results[0].response.total > 0) {\n                            const total = results[0].response.total > 10 ? 10 : results[0].response.total\n                            for (let j = 0; j < total; j++) {\n                                if(results[0].response.items[j].certificate_laboratory != params.reports[i]) {\n                                    console.log(`>>> Error in values obtained from REPORT filter: option ${params.reports[i].toUpperCase()} expected, but ${results[0].response.items[i].certificate_laboratory} was found.`);\n                                }\n                            }\n                        }else{\n                            console.log(`>>> No record was found according to the filter: REPORT, option ${params.reports[i].toUpperCase()}.`);\n                            return true;\n                        }\n                        return true;\n                    }\n                }\n            }, waitTime)\n            I.forceClick(params.reports[i], `#advanced_filters_content .diamond_filter_certificate_content ul li:nth-child(${i+1}) label`);\n        }\n    };\n    const checkDiamondRatio = () => {\n        I.fillField('#from_ratio_value_input', params.ratioFrom);\n        I.pressKey('Enter');\n        I.fillField('#to_ratio_value_input', params.ratioTo);\n        I.pressKey('Enter');\n        let results = [];\n        I.waitForResponse(async res => {\n            if(res.url().includes('/api/product/diamonds')) {\n                results.push(await res.json());\n                if(results.length >= 2) {\n                    results[0].response.total > 0 ? results[0] = results[0] : results[0] = results[1];\n                    if(results[0].response.total > 0) {\n                        const total = results[0].response.total > 10 ? 10 : results[0].response.total\n                        for (let i = 0; i < total; i++) {\n                            // The ratio response is null\n                            // results[0].response.items[i].ratio < parseFloat(params.ratioFrom) || results[0].response.items[i].ratio > parseFloat(params.ratioTo)\n                            if(results[0].response.items[i].ratio != null && (results[0].response.items[i].ratio < parseFloat(params.ratioFrom) || results[0].response.items[i].ratio > parseFloat(params.ratioTo))) {\n                                console.log(`>>> Error in values obtained from RATIO filter.`);\n                                console.log(`>>> Error in values obtained from RATIO filter: option ${params.ratioFrom} to ${params.ratioTo} expected, but ${results[0].response.items[i].ratio} was found.`);\n                            }\n                        }\n                    }else{\n                        console.log(`>>> No record was found according to the filter: RATIO, option ${params.ratioFrom} to ${params.ratioTo}.`);\n                        return true;\n                    }\n                    return true;\n                }\n            }\n        }, waitTime)\n        I.fillField('#from_ratio_value_input', 1);\n        I.pressKey('Enter');\n        I.fillField('#to_ratio_value_input', 3);\n        I.pressKey('Enter');\n    };\n    const compareDiamonds = () => {\n        I.click('//*[@id=\"body_table_results\"]/tr[1]/td[9]/div/span[1]/img');\n        I.click('//*[@id=\"body_table_results\"]/tr[2]/td[9]/div/span[1]/img');\n        I.click(\"#to_compare_diamonds_from_diamond_list\");\n    };\n    const checkVideo = async () => {\n        // return await I.grabCssPropertyFrom('#diamond_detail_section .diamond_detail_tabs .video_tab', 'display');\n        I.click('#diamond_detail_section .diamond_detail_tabs .video_tab');\n        I.waitForText('Actual video of the diamond');\n        I.see('Actual video of the diamond');\n    };\n    const sortByPrice = async (order) => {\n        const prices = await I.grabTextFromAll('tbody tr td:nth-child(1)');\n        let previousNumber = 0;\n        if (order == \"higher\") {\n            previousNumber = Number.MAX_SAFE_INTEGER;\n        }\n        for (const elem of prices) {\n            let actualNumber = Number(elem.slice((elem.indexOf('$')+1)).replace(',', ''));\n            if(!isNaN(actualNumber)) {\n                if(order == \"higher\") {\n                    if(actualNumber > previousNumber) {\n                        console.log(\"Error in the values obtained when organizing the list by major price.\");\n                    }\n                }else if(order == \"smaller\") {\n                    if(actualNumber < previousNumber) {\n                        console.log(\"Error in the values obtained when organizing the list by minor price.\");\n                    }\n                }\n            }\n            previousNumber = actualNumber;\n        };\n    };\n    const sortByCarat = async (order) => {\n        const carat = await I.grabTextFromAll('tbody tr td:nth-child(3)');\n        let previousNumber = 0;\n        if (order == \"higher\") {\n            previousNumber = Number.MAX_SAFE_INTEGER;\n        }\n        for (const elem of carat) {\n            let actualNumber = Number(elem);\n            if(!isNaN(actualNumber)) {\n                if(order == \"higher\") {\n                    if(actualNumber > previousNumber) {\n                        console.log(\"Error in the values obtained when organizing the list by major carats.\");\n                    }\n                }else if(order == \"smaller\") {\n                    if(actualNumber < previousNumber) {\n                        console.log(\"Error in the values obtained when organizing the list by minor carats.\");\n                    }\n                }\n            }\n            previousNumber = actualNumber;\n        };\n    };\n    const sortByReport = async (order) => {\n        const report = await I.grabTextFromAll('tbody tr td:nth-child(7)');\n        for (const elem of report) {\n            if(order == \"higher\") {\n                if(elem != \"IGI\" && elem != \"GIA\") {\n                    console.log(\"Error in the values obtained when organizing the list by Report.\");\n                }\n            }else if(order == \"smaller\") {\n                if(elem != \"GCAL\" && elem != \"GIA\") {\n                    console.log(\"Error in the values obtained when organizing the list by Report.\");\n                }\n            }\n        };\n    };\n    const checkURLcertificate = async () => {\n        let url =  await I.grabCurrentUrl();\n        if(!(url.includes('https://www.gcalusa.com/certificate-search.html')) && !(url.includes('https://www.igi.org/reports/'))) {\n            console.log('Error in current URL of certificate.');\n        }\n    };\n    const selectDiamond = async () => {\n        const diamonds = await I.grabHTMLFromAll('#body_table_results tr td:last-child a');\n        let i = 1;\n        for (const elem of diamonds) {\n            if(elem.includes(\"img\")) {\n                return i;\n            };\n            i++;\n        };\n    };\n    // ----------------------------------------------------\n    // ----------------------------------------------------\n    I.say('TEST - BUY LOOSE DIAMOND');\n    I.amOnPage(\"/\");\n    I.forceClick(\"BUY LOOSE DIAMONDS\");\n    I.seeInCurrentUrl(\"/buy-loose-diamond-start-buying\");\n    waitResponseAndtext();\n    //----------------------------------------------- SHAPE FILTER -----------------------------------------------\n    I.say('CHECKING SHAPE FILTER');\n    checkDiamondShape();\n    //----------------------------------------------- CARAT FILTER -----------------------------------------------\n    I.say('CHECKING CARAT FILTER');\n    checkDiamondCarat();\n    //----------------------------------------------- COLOUR FILTER -----------------------------------------------\n    I.say('CHECKING COLOUR FILTER');\n    checkDiamondColour();\n    //----------------------------------------------- PRICE FILTER -----------------------------------------------\n    I.say('CHECKING PRICE FILTER');\n    checkDiamondPrice();\n    //----------------------------------------------- CUT FILTER --------------------------------------------------\n    I.say('CHECKING CUT FILTER');\n    checkDiamondCut();\n    //----------------------------------------------- CLARITY FILTER -----------------------------------------------\n    I.say('CHECKING CLARITY FILTER');\n    checkDiamondClarity();\n    //------------------------------------------- BUTTON ADVANCED FILTERS ------------------------------------------\n    I.say('BUTTON ADVANCED FILTERS');\n    I.click(\"#advanced_filters_button\");\n    // CHECKING ADVANCED FILTERS\n    //----------------------------------------------- POLISH FILTER ------------------------------------------------\n    I.say('CHECKING POLISH FILTER');\n    checkDiamondPolish();\n    //----------------------------------------------- SYMMETRY FILTER ------------------------------------------------\n    I.say('CHECKING SYMMETRY FILTERS');\n    checkDiamondSymmetry();\n    //----------------------------------------------- REPORT FILTER ------------------------------------------------    \n    I.say('CHECKING REPORT FILTER');\n    checkDiamondReport();\n    //----------------------------------------------- RATIO FILTER ------------------------------------------------\n    I.say('CHECKING RATIO FILTER');\n    checkDiamondRatio();\n    // SORT RESULTS\n    //------------------------------------------------------------------------------\n    I.say('SORT RESULTS');\n    waitResponseAndtext();\n    I.click('#price_table_header_img');\n    waitResponseAndtext();\n    sortByPrice('higher');\n    I.click('#price_table_header_img');\n    waitResponseAndtext();\n    sortByPrice('smaller');\n    I.click('#carat_table_header');\n    waitResponseAndtext();\n    sortByCarat('higher');\n    I.click('#carat_table_header');\n    waitResponseAndtext();\n    sortByCarat('smaller');\n    I.click('#report_table_header');\n    waitResponseAndtext();\n    sortByReport('higher');\n    I.click('#report_table_header');\n    waitResponseAndtext();\n    sortByReport('smaller');\n    waitResponseAndtext();\n    // OPTION COMPARE DIAMONDS\n    I.say('OPTION COMPARE DIAMONDS');\n    compareDiamonds();\n    // Select Results options form the table\n    I.click('#to_diamond_list_from_compare_diamonds');\n    // Select one diamond (Click on detail)\n    I.say('SELECT ONE DIAMOND');\n    const video = await selectDiamond();\n    I.wait(4);\n    I.click(`//*[@id=\"body_table_results\"]/tr[${video}]/td[10]/a/div`);\n    I.seeInCurrentUrl('/buy-loose-diamond-start-buying');\n    I.say('CHECKING BACK BUTTON');\n    I.click('#diamond_detail_section .to_diamond_list_from_diamond_detail');\n    I.click(`//*[@id=\"body_table_results\"]/tr[${video}]/td[10]/a/div`);\n    I.seeInCurrentUrl('/buy-loose-diamond-start-buying');\n    // Check if diamond has Video option\n    checkVideo();\n    // Check the Certificate option\n    I.click('#diamond_detail_section .diamond_detail_tabs .certificate_tab');\n    I.wait(10);\n    I.switchToNextTab();\n    checkURLcertificate();\n    I.closeCurrentTab();\n    I.seeInCurrentUrl('/buy-loose-diamond-start-buying');\n    // Image\n    I.click('#tab_diamond_image');\n    // IGI Certified\n    I.click('#diamond_detail_section .diamond_detail_content_features .er_details_column_one a');\n    I.wait(10);\n    I.switchToNextTab();\n    checkURLcertificate();\n    I.closeCurrentTab();\n    I.seeInCurrentUrl('/buy-loose-diamond-start-buying');\n    // 20% Deposit Available\n    I.click('20% Deposit Available');\n    I.wait(10);\n    I.switchToNextTab();\n    I.seeInCurrentUrl('/deposit');\n    I.closeCurrentTab();\n    I.seeInCurrentUrl('/buy-loose-diamond-start-buying');\n    \n    // TO CHOOSE 'ADD LOOSE DIAMOND TO CART' OPTION\n    I.say('TO CHOOSE \"ADD LOOSE DIAMOND TO CART\" OPTION');\n    I.click('#add_loose_diamond_to_cart_submit');\n    I.waitForText('SHOPPING CART', waitTime);\n    I.wait(2)\n    I.checkOption('#loose_diamond_option_false');\n    I.checkOption('#loose_diamond_option_true');\n    I.wait(5);\n    I.fillField('#cart .custom-control p .name-input', 'Name member');\n    I.selectOption('#select_ring_size', '3/4');\n    I.say('PAY DEPOSIT OPTION');\n    I.click('table tbody .deposit_row .checkbox_label');\n    I.click('#accept_deposit_policy');\n    I.click('table tbody .total_row .checkbox_label');\n    \n    I.say('CLICK IN CHECKOUT');\n    I.click('#cart table tbody .order_summary_checkout_button a');\n    I.wait(2);\n    I.waitForText('WHERE DO YOU WANT THESE ITEMS SENT?', waitTime, 'h2');\n    I.wait(4)\n    \n    I.say('SHIP TO MY ADDRESS FORM');\n    I.fillField('#shipping_billing_information_form_shippingFirstName', 'Jose Testing');\n    I.fillField('#shipping_billing_information_form_shippingLastName', 'Jose Testing');\n    I.fillField('#shipping_billing_information_form_shippingAddressLineOne', 'Test Address');\n    I.click('#shipping_billing_information_form_shippingCountry');\n    I.selectOption('#shipping_billing_information_form_shippingCountry', 'Australia');\n    I.fillField('#shipping_billing_information_form_shippingState', 'Testing');\n    I.fillField('#shipping_billing_information_form_shippingSuburb', 'Testing');\n    I.fillField('#shipping_billing_information_form_shippingPostcode', '4000');\n    I.fillField('#shipping_billing_information_form_shippingPhone', '1234567');\n    I.fillField('#shipping_billing_information_form_deliveryInstructions', 'Test form, please ignore this request.');\n    I.fillField('#shipping_billing_information_form_customerNotesProposalDate', 'Test form, please ignore this request.');\n    I.fillField('#shipping_billing_information_form_shippingEmail', 'testing@testing.com');\n    // Use the same address for billing and shipping\n    I.say('USE THE SAME ADDRESS FOR BILLING AND SHIPPING');\n    I.click('#cart_shipping_content .same_shipping_billing_fields label .form-check');\n    I.fillField('#shipping_billing_information_form_billingFirstName', 'Jose Testing');\n    I.fillField('#shipping_billing_information_form_billingLastName', 'Jose Testing');\n    I.fillField('#shipping_billing_information_form_billingAddressLineOne', 'Test Address');\n    I.click('#shipping_billing_information_form_billingCountry');\n    I.selectOption('#shipping_billing_information_form_billingCountry', 'Australia');\n    I.fillField('#shipping_billing_information_form_billingState', 'Testing');\n    I.fillField('#shipping_billing_information_form_billingSuburb', 'Testing');\n    I.fillField('#shipping_billing_information_form_billingPostcode', '4000');\n    I.fillField('#shipping_billing_information_form_billingPhone', '123456');\n    I.click('#cart_shipping_content .last_row .right_submit input');\n    I.seeInCurrentUrl('/cart/payment-information');",
              "err": {},
              "uuid": "9f26f691-c273-4d69-a393-1e7cc9f19630",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [
            "9f26f691-c273-4d69-a393-1e7cc9f19630"
          ],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 0
        },
        {
          "uuid": "c25f18c3-49b3-499c-97bb-a9cfb039342c",
          "title": "ENGAGEMENT RINGS - ENGAGEMENT READY TO SHIP",
          "fullFile": "C:\\Users\\Daniela\\Documents\\CodeceptJS-Novita\\test\\Engagement Rings\\EngagementRingsReadyToShip_test.js",
          "file": "\\test\\Engagement Rings\\EngagementRingsReadyToShip_test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook: codeceptjs.beforeSuite",
              "fullTitle": "ENGAGEMENT RINGS - ENGAGEMENT READY TO SHIP \"before all\" hook: codeceptjs.beforeSuite",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.suiteSetup(suite)",
              "err": {},
              "uuid": "fb6f7a0a-a46c-4a6f-8207-e1f30f488488",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook: codeceptjs.before",
              "fullTitle": "ENGAGEMENT RINGS - ENGAGEMENT READY TO SHIP \"before each\" hook: codeceptjs.before",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.setup(suite)",
              "err": {},
              "uuid": "6473f044-6714-4513-a120-7014cb2d5c23",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook: codeceptjs.afterSuite",
              "fullTitle": "ENGAGEMENT RINGS - ENGAGEMENT READY TO SHIP \"after all\" hook: codeceptjs.afterSuite",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.suiteTeardown(suite)",
              "err": {},
              "uuid": "8b6a964d-4580-4622-b4a8-e802d0c4c4c2",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook: finalize codeceptjs",
              "fullTitle": "ENGAGEMENT RINGS - ENGAGEMENT READY TO SHIP \"after each\" hook: finalize codeceptjs",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.teardown(suite)",
              "err": {},
              "uuid": "fb5f8f95-ca81-4bf1-9968-2cc9ab10bdd4",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "ENGAGEMENT READY TO SHIP",
              "fullTitle": "ENGAGEMENT RINGS - ENGAGEMENT READY TO SHIP: ENGAGEMENT READY TO SHIP",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "I }) => {\n    const waitTime = 300; //Seconds\n    const checkTypeMetal = (typeMetal) => {\n        let results = [];\n        I.waitForResponse(async res => {\n            if(res.url().includes('/api/product/engagement-rings-ready-to-ship')) {\n                results.push(await res.json());\n                if(results[0].response.total > 0) {\n                    const total = results[0].response.total > 10 ? 10 : results[0].response.total\n                    for (let i = 0; i < total; i++) {\n                        if(!results[0].response.items[i].engring_metal_name.toLowerCase().includes(typeMetal)) {\n                            console.log(`>>> Error in values obtained from METAL TYPE filter: option ${typeMetal.toUpperCase()} expected, but ${results[0].response.items[i].engring_metal_name.toUpperCase()} was found.`);\n                        }                        \n                    }\n                }else{\n                    console.log(`>>> No record was found according to the filter: METAL TYPE, option ${typeMetal.toUpperCase()}`);\n                    return true;\n                }\n                return true;\n            }\n        }, waitTime)\n    };\n    const checkDiamondCarat = () => {\n        I.fillField('#from_carat_value_input', 2)\n        I.pressKey('Enter')\n        I.fillField('#to_carat_value_input', 3)\n        I.pressKey('Enter')\n        let results = [];\n        I.waitForResponse(async res => {\n            if(res.url().includes('/api/product/engagement-rings-ready-to-ship')) {\n                results.push(await res.json());\n                if(results[0].response.total > 0) {\n                    const total = results[0].response.total > 10 ? 10 : results[0].response.total\n                    for (let i = 0; i < total; i++) {\n                        if(results[0].response.items[i].diamond_carat < 2 || results[0].response.items[i].diamond_carat > 3) {\n                            console.log(`>>> Error in values obtained from DIAMOND CARAT filter: option 2 to 3 expected, but ${results[0].response.items[i].diamond_carat} was found.`);\n                        }\n                    }\n                }else{\n                    console.log(`>>> No record was found according to the filter: DIAMOND CARAT, option 2 to 3.`);\n                    return true;\n                }\n                return true;\n                \n            }\n        }, waitTime)\n        I.fillField(\"#from_carat_value_input\", 0.30);\n        I.pressKey(\"Enter\");\n        I.fillField(\"#to_carat_value_input\", 6);\n        I.pressKey(\"Enter\");\n    };\n    const checkDiamondShape = () => {\n        const shapes = [\"2\", \"7\", \"5\", \"6\", \"4\", \"3\", \"8\", \"9\"]\n        const names = [\"round\", \"pear\", \"oval\", \"emerald\", \"cushion\", \"princess\", \"radiant\", \"asscher\"]\n        for (let i = 0; i < shapes.length; i++) {\n            I.forceClick(`#diamond_shape_${shapes[i]}`);\n            \n            let results = [];\n            I.waitForResponse(async res => {\n                if(res.url().includes('/api/product/engagement-rings-ready-to-ship')) {\n                    results.push(await res.json());\n                    if(results[0].response.total > 0) {\n                        const total = results[0].response.total > 10 ? 10 : results[0].response.total\n                        for (let j = 0; j < total; j++) {\n                            if(results[0].response.items[j].diamond_shape_slug != names[i]) {\n                                console.log(`>>> Error in values obtained from DIAMOND SHAPE filter: option ${names[i].toUpperCase()} expected, but ${results[0].response.items[i].diamond_shape_slug.toUpperCase()} was found.`);\n                            }\n                        }\n                    }else{\n                        console.log(`>>> No record was found according to the filter: DIAMOND SHAPE, option ${names[i].toUpperCase()}`);\n                        return true;\n                    }\n                    return true;                    \n                }\n            }, waitTime)\n            I.forceClick(`#diamond_shape_${shapes[i]}`);\n        }\n    };\n    const checkDiamondColour = () => {\n        const colour = {\n            \"D\" : [0, -700],\n            \"E\" : [80, -700],\n            \"F\" : [100, -700],\n            \"G\" : [180, -700],\n            \"H\" : [230, -700],\n            \"I\" : [280, -700],\n            \"J\" : [330, -700],\n            \"K\" : [400, -700],\n            \"L\" : [450, -700],\n            \"M\" : [600, 0],\n        }\n        for (const elem of Object.keys(colour)) {\n            I.moveCursorTo('//*[@id=\"header_desktop\"]/section[1]/div/div[2]/a/img')\n            I.moveCursorTo('//*[@id=\"settings_search_form\"]/div/div[4]/div[1]/div/div')\n            I.click('//*[@id=\"settings_search_form\"]/div/div[4]/div[2]/div[1]/span/span[6]')\n            I.dragSlider('//*[@id=\"settings_search_form\"]/div/div[4]/div[2]/div[1]/span/span[6]', colour[elem][0]);\n            I.click('//*[@id=\"settings_search_form\"]/div/div[4]/div[2]/div[1]/span/span[7]')\n            I.dragSlider('//*[@id=\"settings_search_form\"]/div/div[4]/div[2]/div[1]/span/span[7]', colour[elem][1]);\n            if(elem == 'M') {\n                I.moveCursorTo('//*[@id=\"settings_search_form\"]/div/div[4]/div[1]/div/div')\n                I.click('//*[@id=\"settings_search_form\"]/div/div[4]/div[2]/div[1]/span/span[6]')\n                I.dragSlider('//*[@id=\"settings_search_form\"]/div/div[4]/div[2]/div[1]/span/span[6]', -700);\n                I.moveCursorTo('//*[@id=\"settings_search_form\"]/div/div[4]/div[1]/div/div')\n                I.click('//*[@id=\"settings_search_form\"]/div/div[4]/div[2]/div[1]/span/span[6]')\n                I.dragSlider('//*[@id=\"settings_search_form\"]/div/div[4]/div[2]/div[1]/span/span[6]', 700);\n            }\n            let results = [];\n            I.waitForResponse(async res => {\n                if(res.url().includes('/api/product/engagement-rings-ready-to-ship')) {\n                    results.push(await res.json());\n                    if(results[0].response.total > 0) {\n                        const total = results[0].response.total > 10 ? 10 : results[0].response.total\n                        for (let i = 0; i < total; i++) {\n                            if(results[0].response.items[i].diamond_colour_name != elem) {\n                                console.log(`>>> Error in values obtained from DIAMOND COLOUR filter: option ${elem.toUpperCase()} expected, but ${results[0].response.items[i].diamond_colour_name} was found.`);\n                            }\n                        }\n                    }else{\n                        console.log(`>>> No record was found according to the filter: DIAMOND COLOUR, option ${elem.toUpperCase()}.`);\n                        return true;\n                    }\n                    return true;\n                }                \n            }, waitTime)\n            I.moveCursorTo('//*[@id=\"settings_search_form\"]/div/div[4]/div[1]/div/div')\n            I.click('//*[@id=\"settings_search_form\"]/div/div[4]/div[2]/div[1]/span/span[7]')\n            I.dragSlider('//*[@id=\"settings_search_form\"]/div/div[4]/div[2]/div[1]/span/span[7]', 700);\n            I.moveCursorTo('//*[@id=\"settings_search_form\"]/div/div[4]/div[1]/div/div')\n            I.click('//*[@id=\"settings_search_form\"]/div/div[4]/div[2]/div[1]/span/span[6]')\n            I.dragSlider('//*[@id=\"settings_search_form\"]/div/div[4]/div[2]/div[1]/span/span[6]', 700);\n            I.moveCursorTo('//*[@id=\"settings_search_form\"]/div/div[4]/div[1]/div/div')\n            I.click('//*[@id=\"settings_search_form\"]/div/div[4]/div[2]/div[1]/span/span[6]')\n            I.dragSlider('//*[@id=\"settings_search_form\"]/div/div[4]/div[2]/div[1]/span/span[6]', -700);\n        };\n    };\n    const checkDiamondClarity = () => {\n        const clarity = {\n            \"FL\" : [0, -700],\n            \"IF\" : [80, -700],\n            \"VVS1\" : [150, -700],\n            \"VVS2\" : [200, -700],\n            \"VS1\" : [250, -700],\n            \"VS2\" : [350, -700],\n            \"SI1\" : [400, -700],\n            \"SI2\" : [450, -700],\n            \"I1\" : [500, 0],\n        }\n        for (const elem of Object.keys(clarity)) {\n            I.moveCursorTo('//*[@id=\"header_desktop\"]/section[1]/div/div[2]/a/img')\n            I.moveCursorTo('//*[@id=\"settings_search_form\"]/div/div[5]/div[1]/div/div')\n            I.click('//*[@id=\"settings_search_form\"]/div/div[5]/div[2]/div[1]/span/span[6]')\n            I.dragSlider('//*[@id=\"settings_search_form\"]/div/div[5]/div[2]/div[1]/span/span[6]', clarity[elem][0]);\n            I.click('//*[@id=\"settings_search_form\"]/div/div[5]/div[2]/div[1]/span/span[7]')\n            I.dragSlider('//*[@id=\"settings_search_form\"]/div/div[5]/div[2]/div[1]/span/span[7]', clarity[elem][1]);\n            if(elem == 'I1') {\n                I.moveCursorTo('//*[@id=\"settings_search_form\"]/div/div[5]/div[1]/div/div')\n                I.click('//*[@id=\"settings_search_form\"]/div/div[5]/div[2]/div[1]/span/span[6]')\n                I.dragSlider('//*[@id=\"settings_search_form\"]/div/div[5]/div[2]/div[1]/span/span[6]', -700);\n                I.moveCursorTo('//*[@id=\"settings_search_form\"]/div/div[5]/div[1]/div/div')\n                I.click('//*[@id=\"settings_search_form\"]/div/div[5]/div[2]/div[1]/span/span[6]')\n                I.dragSlider('//*[@id=\"settings_search_form\"]/div/div[5]/div[2]/div[1]/span/span[6]', 700);\n            }\n            \n            let results = [];\n            I.waitForResponse(async res => {\n                if(res.url().includes('/api/product/engagement-rings-ready-to-ship')) {\n                results.push(await res.json());\n                    if(results[0].response.total > 0) {\n                        const total = results[0].response.total > 10 ? 10 : results[0].response.total\n                        for (let i = 0; i < total; i++) {\n                            if(results[0].response.items[i].diamond_clarity_name != elem) {\n                                console.log(`>>> Error in values obtained from DIAMOND CLARITY filter: option ${elem.toUpperCase()} expected, but ${results[0].response.items[i].diamond_clarity_name} was found.`);\n                            }\n                        }\n                    }else{\n                        console.log(`>>> No record was found according to the filter: DIAMOND CLARITY, option ${elem.toUpperCase()}.`);\n                        return true;\n                    }\n                    return true;\n                }                \n            }, waitTime)\n            I.moveCursorTo('//*[@id=\"settings_search_form\"]/div/div[5]/div[1]/div/div')\n            I.click('//*[@id=\"settings_search_form\"]/div/div[5]/div[2]/div[1]/span/span[7]')\n            I.dragSlider('//*[@id=\"settings_search_form\"]/div/div[5]/div[2]/div[1]/span/span[7]', 700);\n            I.moveCursorTo('//*[@id=\"settings_search_form\"]/div/div[5]/div[1]/div/div')\n            I.click('//*[@id=\"settings_search_form\"]/div/div[5]/div[2]/div[1]/span/span[6]')\n            I.dragSlider('//*[@id=\"settings_search_form\"]/div/div[5]/div[2]/div[1]/span/span[6]', 700);\n            I.moveCursorTo('//*[@id=\"settings_search_form\"]/div/div[5]/div[1]/div/div')\n            I.click('//*[@id=\"settings_search_form\"]/div/div[5]/div[2]/div[1]/span/span[6]')\n            I.dragSlider('//*[@id=\"settings_search_form\"]/div/div[5]/div[2]/div[1]/span/span[6]', -700);\n        };\n    };\n    const checkDiamondStyle = (style) => {\n        let results = [];\n        I.waitForResponse(async res => {\n            if(res.url().includes('/api/product/engagement-rings-ready-to-ship')) {\n                results.push(await res.json());\n                if(results[0].response.total > 0) {\n                    const total = results[0].response.total > 10 ? 10 : results[0].response.total\n                    for (let i = 0; i < total; i++) {\n                        if(results[0].response.items[i].engring_style_name != style) {\n                            console.log(`>>> Error in values obtained from STYLE filter: option ${style.toUpperCase()} expected, but ${results[0].response.items[i].engring_style_name} was found.`);\n                        }\n                    }\n                }else{\n                    console.log(`>>> No record was found according to the filter: STYLE, option ${style.toUpperCase()}.`);\n                    return true;\n                }\n                return true;\n            }\n        }, waitTime)\n    };\n    const checkDiamondPrice = () => {\n        I.fillField('#from_price_value_input', 10000)\n        I.pressKey('Enter')\n        I.fillField('#to_price_value_input', 40000)\n        I.pressKey('Enter')\n        let results = [];\n        I.waitForResponse(async res => {\n            if(res.url().includes('/api/product/engagement-rings-ready-to-ship')) {\n                results.push(await res.json());\n                if(results[0].response.total > 0) {\n                    const total = results[0].response.total > 10 ? 10 : results[0].response.total\n                    for (let i = 0; i < total; i++) {\n                        if(results[0].response.items[i].price < 10000 || results[0].response.items[i].price > 40000) {\n                            console.log(`>>> Error in values obtained from PRICE filter: option 10000 to 40000 expected, but ${results[0].response.items[i].price} was found.`);\n                        }\n                    }\n                }else{\n                    console.log(`>>> No record was found according to the filter: PRICE, option option 10000 to 40000.`);\n                    return true;\n                }\n                return true;                \n            }\n        }, waitTime)\n        I.fillField(\"#from_price_value_input\", 1000);\n        I.pressKey(\"Enter\");\n        I.fillField(\"#to_price_value_input\", 60000);\n        I.pressKey(\"Enter\"); \n    };\n    // ==========================================================================================================\n    I.say('TEST - CUSTOM ENGAGEMENT RINGS');\n    I.amOnPage(\"/\");\n    I.forceClick(\"ENGAGEMENT RINGS READY TO SHIP\");\n    I.waitForText('ENGAGEMENT RINGS READY TO SHIP', waitTime);\n    I.seeInCurrentUrl(\"/engagement-ring/ready-to-ship\");\n    // -------------------------------------------- METAL TYPE FILTER --------------------------------------------\n    I.say('FILTER CHECK - METAL TYPE')\n    I.forceClick('#metal_type_1')\n    I.say('METAL TYPE - WHITE GOLD')\n    I.forceClick('#metal_type_3')\n    I.seeCheckboxIsChecked('#metal_type_3')\n    checkTypeMetal('white gold')\n    I.forceClick('#metal_type_3')\n    I.say('METAL TYPE - YELLOW GOLD')\n    I.forceClick('#metal_type_5')\n    I.seeCheckboxIsChecked('#metal_type_5')\n    checkTypeMetal('yellow gold')\n    I.forceClick('#metal_type_5')\n    I.say('METAL TYPE - ROSE GOLD')\n    I.forceClick('#metal_type_4')\n    I.seeCheckboxIsChecked('#metal_type_4')\n    checkTypeMetal('rose gold')\n    I.forceClick('#metal_type_4')\n    I.say('METAL TYPE - PLATINUM')\n    I.forceClick('#metal_type_2');\n    I.seeCheckboxIsChecked('#metal_type_2')\n    checkTypeMetal('platinum')\n    I.forceClick('#metal_type_2')\n    I.forceClick('#metal_type_1')\n    // ----------------------------------------------- CARAT FILTER -----------------------------------------------\n    I.say('FILTER CHECK - DIAMOND CARAT')\n    I.moveCursorTo('//*[@id=\"settings_search_form\"]/div/div[2]/div[1]/div/div')\n    checkDiamondCarat();\n    I.moveCursorTo('//*[@id=\"header_desktop\"]/section[1]/div/div[2]/a/img')\n    // ----------------------------------------------- SHAPE FILTER ------------------------------------------------\n    I.say('CHECKING SHAPE FILTER');\n    checkDiamondShape();\n    // ----------------------------------------------- COLOUR FILTER -----------------------------------------------\n    I.say('CHECKING COLOUR FILTER');\n    checkDiamondColour();\n    //------------------------------------------------ CLARITY FILTER -----------------------------------------------\n    I.say('CHECKING CLARITY FILTER');\n    checkDiamondClarity();\n    //------------------------------------------------ RING SIZE ----------------------------------------------------\n    I.moveCursorTo('//*[@id=\"settings_search_form\"]/div/div[6]/div[1]/div/div')\n    I.fillField('#react-select-2-input', 'J')\n    I.pressKey('Enter')\n    //------------------------------------------------ DIAMOND STYLE ------------------------------------------------\n    I.say('CHECKING STYLE FILTER');\n    I.say('DIAMOND STYLE - SOLITAIRE')\n    I.moveCursorTo('//*[@id=\"settings_search_form\"]/div/div[7]/div[1]/div/div')\n    I.forceClick('#engagement_ring_style_2')\n    I.seeCheckboxIsChecked('#engagement_ring_style_2')\n    checkDiamondStyle('Solitaire')\n    I.forceClick('#engagement_ring_style_2')\n    I.say('METAL STYLE - SIDE STONE')\n    I.forceClick('#engagement_ring_style_4')\n    I.seeCheckboxIsChecked('#engagement_ring_style_4')\n    checkDiamondStyle('Side Stone')\n    I.forceClick('#engagement_ring_style_4')\n    I.say('METAL STYLE - HALO')\n    I.forceClick('#engagement_ring_style_3')\n    I.seeCheckboxIsChecked('#engagement_ring_style_3')\n    checkDiamondStyle('Halo')\n    I.forceClick('#engagement_ring_style_3')\n    I.say('METAL STYLE - THREE STONE')\n    I.forceClick('#engagement_ring_style_5')\n    I.seeCheckboxIsChecked('#engagement_ring_style_5')\n    checkDiamondStyle('Three Stone')\n    I.forceClick('#engagement_ring_style_5')\n    I.forceClick('#engagement_ring_style_1')\n    //----------------------------------------------- DIAMOND PRICE -----------------------------------------------\n    I.say('FILTER CHECK - DIAMOND PRICE')\n    I.moveCursorTo('//*[@id=\"settings_search_form\"]/div/div[8]/div[1]/div/div')\n    I.wait(4)\n    checkDiamondPrice();\n    I.moveCursorTo('//*[@id=\"header_desktop\"]/section[1]/div/div[2]/a/img')\n    \n    //----------------------------------------------- SELECT OPTION -----------------------------------------------\n    I.wait(4)\n    I.say('SELECT FIRST OPTION')\n    I.click('//*[@id=\"ring_list_section\"]/div/div/div/div[1]/a')\n    // Select Ring Size\n    I.wait(4)\n    I.selectOption('#select_ring_size', 'J')\n    I.wait(4)\n    I.forceClick('#add_product_to_cart_submit')\n    I.waitForText('SHOPPING CART', waitTime)\n    I.wait(2)\n    I.seeInCurrentUrl('/cart')\n    I.click('//*[@id=\"cart\"]/div/div[2]/div[2]/table/tbody/tr[4]/td/a')\n    // // ----------------------------------- WHERE DO YOU WANT THESE ITEMS SENT?-----------------------------------------\n    I.waitForText('WHERE DO YOU WANT THESE ITEMS SENT?', waitTime, 'h2')\n    I.see('WHERE DO YOU WANT THESE ITEMS SENT?', 'h2');\n    I.wait(4)\n    I.fillField('#shipping_billing_information_form_shippingFirstName', 'Jose Testing');\n    I.fillField('#shipping_billing_information_form_shippingLastName', 'Jose Testing');\n    I.fillField('#shipping_billing_information_form_shippingAddressLineOne', 'Test Address');\n    I.click('#shipping_billing_information_form_shippingCountry');\n    I.selectOption('#shipping_billing_information_form_shippingCountry', 'Australia');\n    I.fillField('#shipping_billing_information_form_shippingState', 'Testing');\n    I.fillField('#shipping_billing_information_form_shippingSuburb', 'Testing');\n    I.fillField('#shipping_billing_information_form_shippingPostcode', '4000');\n    I.fillField('#shipping_billing_information_form_shippingPhone', '1234567');\n    I.fillField('#shipping_billing_information_form_deliveryInstructions', 'Test form, please ignore this request.');\n    I.fillField('#shipping_billing_information_form_customerNotesProposalDate', 'Test form, please ignore this request.');\n    I.fillField('#shipping_billing_information_form_shippingEmail', 'testing@testing.com');\n    // Use the same address for billing and shipping\n    I.say('USE THE SAME ADDRESS FOR BILLING AND SHIPPING');\n    I.click('#cart_shipping_content .same_shipping_billing_fields label .form-check');\n    I.fillField('#shipping_billing_information_form_billingFirstName', 'Jose Testing');\n    I.fillField('#shipping_billing_information_form_billingLastName', 'Jose Testing');\n    I.fillField('#shipping_billing_information_form_billingAddressLineOne', 'Test Address');\n    I.click('#shipping_billing_information_form_billingCountry');\n    I.selectOption('#shipping_billing_information_form_billingCountry', 'Australia');\n    I.fillField('#shipping_billing_information_form_billingState', 'Testing');\n    I.fillField('#shipping_billing_information_form_billingSuburb', 'Testing');\n    I.fillField('#shipping_billing_information_form_billingPostcode', '4000');\n    I.fillField('#shipping_billing_information_form_billingPhone', '123456');\n    I.click('#cart_shipping_content .last_row .right_submit input');\n    I.seeInCurrentUrl('/cart/payment-information');\n    // I.waitForText('PAYMENT METHOD', waitTime)\n    // I.forceClick('#checkbox_bank_wire')\n    // I.say('PLEASE, ACTIVATE THE CAPTCHA AND WRITE \"exit\" IN THE CONSOLE AND PRESS ENTER');\n    // pause()\n    // I.click('#bank_wire_submit')\n    // I.waitForText('Your order is confirmed!', waitTime);\n    // I.see('Your order is confirmed!');",
              "err": {},
              "uuid": "6380af8c-7ac5-49a5-a432-3a12ded8280b",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [
            "6380af8c-7ac5-49a5-a432-3a12ded8280b"
          ],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 0
        },
        {
          "uuid": "69083f42-4187-4a77-b94b-1fa2e5f11c57",
          "title": "ENGAGEMENT RINGS - SHOP NOW",
          "fullFile": "C:\\Users\\Daniela\\Documents\\CodeceptJS-Novita\\test\\Engagement Rings\\ShopNow_test.js",
          "file": "\\test\\Engagement Rings\\ShopNow_test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook: codeceptjs.beforeSuite",
              "fullTitle": "ENGAGEMENT RINGS - SHOP NOW \"before all\" hook: codeceptjs.beforeSuite",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.suiteSetup(suite)",
              "err": {},
              "uuid": "d6aa451b-8ae5-4e97-b33e-94ee01e9cb2b",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook: codeceptjs.before",
              "fullTitle": "ENGAGEMENT RINGS - SHOP NOW \"before each\" hook: codeceptjs.before",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.setup(suite)",
              "err": {},
              "uuid": "69898612-3434-4ac8-aa34-53b33a9318cf",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook: codeceptjs.afterSuite",
              "fullTitle": "ENGAGEMENT RINGS - SHOP NOW \"after all\" hook: codeceptjs.afterSuite",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.suiteTeardown(suite)",
              "err": {},
              "uuid": "d2b0800b-d699-43d4-a09a-37683d8b79f2",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook: finalize codeceptjs",
              "fullTitle": "ENGAGEMENT RINGS - SHOP NOW \"after each\" hook: finalize codeceptjs",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.teardown(suite)",
              "err": {},
              "uuid": "cd42c50f-b990-4a30-8f7e-1b3f6ce2e818",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "SHOP NOW",
              "fullTitle": "ENGAGEMENT RINGS - SHOP NOW: SHOP NOW",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "I }) => {\n    const waitTime = 300; //Seconds\n    const waitResponseInTable = () => {\n        I.waitForText('Detail', waitTime, '//*[@id=\"body_table_results\"]/tr[1]/td[10]/a/div');\n    };\n    const checkTypeMetal = (typeMetal) => {\n        let results = [];\n        I.waitForResponse(async res => {\n            if(res.url().includes('/api/product/engagement-rings')) {\n                results.push(await res.json());\n                if(results[0].response.total > 0) {\n                    const total = results[0].response.total > 10 ? 10 : results[0].response.total\n                    for (let i = 0; i < total; i++) {\n                        if(!results[0].response.items[i].metal_name.toLowerCase().includes(typeMetal)) {\n                            console.log(`>>> Error in values obtained from METAL TYPE filter: option ${typeMetal.toUpperCase()} expected, but ${results[0].response.items[i].metal_name.toUpperCase()} was found.`);\n                        }                        \n                    }\n                }else{\n                    console.log(`>>> No record was found according to the filter: METAL TYPE, option ${typeMetal.toUpperCase()}.`);\n                    return true;\n                }\n                return true;\n            }\n        }, waitTime)\n    };\n    const checkDiamondShape = () => {\n        const shapes = [\"2\", \"7\", \"5\", \"6\", \"4\", \"3\", \"8\", \"9\"]\n        const names = [\"round\", \"pear\", \"oval\", \"emerald\", \"cushion\", \"princess\", \"radiant\", \"asscher\"]\n        for (let i = 0; i < shapes.length; i++) {\n            I.forceClick(`#diamond_shape_${shapes[i]}`);\n            \n            let results = [];\n            I.waitForResponse(async res => {\n                if(res.url().includes('/api/product/engagement-rings')) {\n                    results.push(await res.json());\n                    if(results[0].response.total > 0) {\n                        const total = results[0].response.total > 10 ? 10 : results[0].response.total\n                        for (let j = 0; j < total; j++) {\n                            if(results[0].response.items[j].shape_slug != names[i]) {\n                                console.log(`>>> Error in values obtained from SHAPE filter: option ${names[i].toUpperCase()} expected, but ${results[0].response.items[i].shape_slug.toUpperCase()} was found.`);                                \n                            }\n                        }\n                    }else{\n                        console.log(`>>> No record was found according to the filter: SHAPE, option ${names[i].toUpperCase()}.`);\n                        return true;\n                    }\n                    return true;                    \n                }\n            }, waitTime)\n            I.forceClick(`#diamond_shape_${shapes[i]}`);\n        }\n    };\n    const checkDiamondStyle = (style) => {\n        let results = [];\n        I.waitForResponse(async res => {\n            if(res.url().includes('/api/product/engagement-rings')) {\n                results.push(await res.json());\n                if(results[0].response.total > 0) {\n                    const total = results[0].response.total > 10 ? 10 : results[0].response.total\n                    for (let i = 0; i < total; i++) {\n                        const condition = results[0].response.items[i].engagement_ring_styles.find(elem => elem.style_name == style)\n                        if(condition === undefined) {\n                            console.log(`>>> Error in values obtained from DIAMOND STYLE filter: option ${style.toUpperCase()} expected, but ${results[0].response.items[i].engagement_ring_styles[0].style_name} was found.`);\n                        }\n                    }\n                }else{\n                    console.log(`>>> No record was found according to the filter: STYLE, option ${style.toUpperCase()}.`);\n                    return true;\n                }\n                return true;\n            }\n        }, waitTime)\n    };\n    const checkDiamondPrice = (typePrice, option) => {\n        let results = [];\n        I.waitForResponse(async res => {\n            if(res.url().includes('/api/product/engagement-rings')) {\n                results.push(await res.json());\n                if(results[0].response.total > 0) {\n                    const total = results[0].response.total > 10 ? 10 : results[0].response.total; \n                    for (let i = 0; i < total; i++) {\n                        if(typePrice == 'under') {\n                            if(!(results[0].response.items[i].price <= 1000)) {\n                                console.log(`>>> Error in values obtained from DIAMOND PRICE filter: option $1000 and Under, ${results[0].response.items[i].price} was found.`);\n                            }\n                        }else if(typePrice == 'between') {\n                            if(!(results[0].response.items[i].price >= 1000 && results[0].response.items[0].price <= 2000)) {\n                                console.log(`>>> Error in values obtained from DIAMOND PRICE filter: option $1000 to $2000, ${results[0].response.items[i].price} was found.`);\n                            }\n                        }else if(typePrice == 'over') {\n                            if(!(results[0].response.items[i].price > 2000)) {\n                                console.log(`>>> Error in values obtained from DIAMOND PRICE filter: option over $2000, ${results[0].response.items[i].price} was found.`);\n                            }\n                        }\n                    }\n                }else {\n                    console.log(`No record was found according to the filter: DIAMOND PRICE, option ${option.toUpperCase()}.`);\n                    return true;\n                }\n                return true;\n            }\n        }, waitTime);\n    };\n    const checkPersonaliseYourRing = () => {\n        I.waitForText('PERSONALISE YOUR RING', waitTime, 'h2')\n        I.see('PERSONALISE YOUR RING');\n        I.say('CLAW STYLE');\n        I.click('#personalised_select_claw_style');\n        I.click('#eagle_claw_link');\n        I.see('Claw Style: Eagle');\n        I.click('#personalised_select_claw_style');\n        I.click('#square_claw_link');\n        I.see('Claw Style: Square');\n        I.click('#personalised_select_claw_style');\n        I.click('#round_claw_link');\n        I.see('Claw Style: Round');\n        // Diamond setting\n        I.say('DIAMOND SETTING');\n        I.click('#personalised_select_stone_setting');\n        I.click('#low_height_link');\n        I.see('Diamond Setting: Very Low');\n        I.click('#personalised_select_stone_setting');\n        I.click('#high_height_link');\n        I.see('Diamond Setting: Medium-High');\n        I.click('#personalised_select_stone_setting');\n        I.click('#medium_height_link');\n        I.see('Diamond Setting: Medium-Low');\n        I.click('#save_store_personalisation');\n    };\n    // -------------------------------------------------------------------------------------------\n    // -------------------------------------------------------------------------------------------\n    I.say('TEST - CUSTOM ENGAGEMENT RINGS');\n    I.amOnPage(\"/\");\n    I.forceClick('//*[@id=\"main_menu_container\"]/div[2]/div/div[1]/div/div[2]/div/div/div/a');\n    I.waitForText('CREATE YOUR RING', waitTime);\n    I.seeInCurrentUrl(\"/engagement-ring/create/ring\");\n    // -------------------------------------------- METAL TYPE FILTER --------------------------------------------\n    I.say('FILTER CHECK - METAL TYPE')\n    I.forceClick('#metal_type_1')\n    I.say('METAL TYPE - WHITE GOLD')\n    I.forceClick('#metal_type_3')\n    I.seeCheckboxIsChecked('#metal_type_3')\n    checkTypeMetal('white gold')\n    I.forceClick('#metal_type_3')\n    I.say('METAL TYPE - YELLOW GOLD')\n    I.forceClick('#metal_type_5')\n    I.seeCheckboxIsChecked('#metal_type_5')\n    checkTypeMetal('yellow gold')\n    I.forceClick('#metal_type_5')\n    I.say('METAL TYPE - ROSE GOLD')\n    I.forceClick('#metal_type_4')\n    I.seeCheckboxIsChecked('#metal_type_4')\n    checkTypeMetal('rose gold')\n    I.forceClick('#metal_type_4')\n    I.say('METAL TYPE - PLATINUM')\n    I.forceClick('#metal_type_2');\n    I.seeCheckboxIsChecked('#metal_type_2')\n    checkTypeMetal('platinum')\n    I.forceClick('#metal_type_2')\n    I.forceClick('#metal_type_1')\n    // ----------------------------------------------- SHAPE FILTER ------------------------------------------------\n    I.say('CHECKING SHAPE FILTER');\n    checkDiamondShape();\n    //------------------------------------------------ DIAMOND STYLE ------------------------------------------------\n    I.say('CHECKING STYLE FILTER');\n    I.say('DIAMOND STYLE - SOLITAIRE')\n    // I.moveCursorTo('//*[@id=\"settings_search_form\"]/div/div[3]/div[1]/div')\n    I.forceClick('#engagement_ring_style_2')\n    I.seeCheckboxIsChecked('#engagement_ring_style_2')\n    checkDiamondStyle('Solitaire')\n    I.forceClick('#engagement_ring_style_2')\n    I.say('METAL STYLE - SIDE STONE')\n    I.forceClick('#engagement_ring_style_4')\n    I.seeCheckboxIsChecked('#engagement_ring_style_4')\n    checkDiamondStyle('Side Stone')\n    I.forceClick('#engagement_ring_style_4')\n    I.say('METAL STYLE - HALO')\n    I.forceClick('#engagement_ring_style_3')\n    I.seeCheckboxIsChecked('#engagement_ring_style_3')\n    checkDiamondStyle('Halo')\n    I.forceClick('#engagement_ring_style_3')\n    I.say('METAL STYLE - THREE STONE')\n    I.forceClick('#engagement_ring_style_5')\n    I.seeCheckboxIsChecked('#engagement_ring_style_5')\n    checkDiamondStyle('Three Stone')\n    I.forceClick('#engagement_ring_style_5')\n    I.forceClick('#engagement_ring_style_1')\n    // -------------------------------------------- DIAMOND PRICE FILTER --------------------------------------------\n    I.say('DIAMOND PRICE FILTER')\n    I.say('PRICE - $1000 and Under');\n    I.forceClick('#setting_price_range_2');\n    I.seeCheckboxIsChecked('#setting_price_range_2');\n    checkDiamondPrice('under', '$1000 and Under');\n    I.forceClick('#setting_price_range_2');\n    I.say('PRICE - BETWEEN $1000 to $2000');\n    I.forceClick('#setting_price_range_3');\n    I.seeCheckboxIsChecked('#setting_price_range_3');\n    checkDiamondPrice('between', '$1000 to $2000');\n    I.forceClick('#setting_price_range_3');\n    I.say('PRICE - OVER $2000');\n    I.forceClick('#setting_price_range_4');\n    I.seeCheckboxIsChecked('#setting_price_range_4');\n    checkDiamondPrice('over', 'OVER $2000');\n    I.forceClick('#setting_price_range_4');\n    \n    I.forceClick('#setting_price_range_1');\n    // // -------------------------------------------- I SELECT FIRST ITEM/ELEMENT --------------------------------------------\n    I.say('FIRST ITEM SELECTED');\n    I.waitForElement('#ring_list_section .ring_item .ring_detail_link', waitTime)\n    I.click('//*[@id=\"ring_list_section\"]/div/div[1]/a')\n    // I.click('#ring_list_section .ring_item .ring_detail_link');\n    // 20 days express (+$150)\n    I.forceClick('#include_express_job_id .pink_checkbox_icon');\n    // 20% Deposit Available\n    I.click('#pay_deposit_box .pink_checkbox_box_legend a');\n    \n    // Personalise your ring\n    I.say('PERSONALISE YOUR RING');\n    I.click('#personalise_ring_link .pink_checkbox_box_legend a');\n    checkPersonaliseYourRing();\n    // Button cancel\n    I.say('PERSONALISE YOUR RING, BUTTON CANCEL');\n    I.click('Personalise your ring');\n    I.click('#cancel_store_personalisation');\n    // 20% Deposit Available\n    I.say('20% DEPOSIT AVAILABLE');\n    I.wait(5)\n    I.switchToNextTab();\n    I.seeInCurrentUrl('/deposit');\n    I.closeCurrentTab();\n    I.seeInCurrentUrl('/engagement-ring/create/');\n    // More information\n    I.say('MORE INFORMATION');\n    I.click('#more_info_link');\n    I.waitForText('PRODUCT DETAILS', waitTime, 'h2')\n    I.see('PRODUCT DETAILS', 'h2');\n    I.click('//*[@id=\"ring_more_details_box\"]/button');\n    // Choose this diamond\n    I.say('CHOOSE THIS DIAMOND');\n    I.click('//*[@id=\"ring_list_section\"]/div/div[2]/a');\n    I.click('Choose this design');\n    I.seeInCurrentUrl('/engagement-ring/create/ring')\n    // -------------------------------------------- I SELECT FIRST ITEM/ELEMENT ------------------------------------------------\n    waitResponseInTable()\n    I.click('//*[@id=\"body_table_results\"]/tr[1]/td[10]/a')\n    I.waitForText('CREATE YOUR RING', waitTime, '.title')\n    I.click('Choose this diamond', '//*[@id=\"diamond_detail_section\"]/div[2]/div[2]/div[6]/a[2]')\n    I.waitForText('Review Your Ring', waitTime, 'h2')\n    I.see('Review Your Ring', 'h2');\n    // // -------------------------------------------- ADD TO CART --------------------------------------------\n    I.say('ADD TO CART');\n    I.click('#add_to_cart_submit');\n    I.waitForText('SHOPPING CART', waitTime)\n    I.wait(2)\n    I.see('SHOPPING CART');\n    I.selectOption('.summary_setting_size .select_ring_size', '3/4');\n    I.say('CHECKOUT');\n    I.click('CHECKOUT');\n    I.waitForText('WHERE DO YOU WANT THESE ITEMS SENT?', waitTime, 'h2')\n    I.wait(4)\n    I.see('WHERE DO YOU WANT THESE ITEMS SENT?', 'h2');\n    I.fillField('#shipping_billing_information_form_shippingFirstName', 'Jose Testing');\n    I.fillField('#shipping_billing_information_form_shippingLastName', 'Jose Testing');\n    I.fillField('#shipping_billing_information_form_shippingAddressLineOne', 'Test Address');\n    I.click('#shipping_billing_information_form_shippingCountry');\n    I.selectOption('#shipping_billing_information_form_shippingCountry', 'Australia');\n    I.fillField('#shipping_billing_information_form_shippingState', 'Testing');\n    I.fillField('#shipping_billing_information_form_shippingSuburb', 'Testing');\n    I.fillField('#shipping_billing_information_form_shippingPostcode', '4000');\n    I.fillField('#shipping_billing_information_form_shippingPhone', '1234567');\n    I.fillField('#shipping_billing_information_form_deliveryInstructions', 'Test form, please ignore this request.');\n    I.fillField('#shipping_billing_information_form_customerNotesProposalDate', 'Test form, please ignore this request.');\n    I.fillField('#shipping_billing_information_form_shippingEmail', 'testing@testing.com');\n    // Use the same address for billing and shipping\n    I.say('USE THE SAME ADDRESS FOR BILLING AND SHIPPING');\n    I.click('#cart_shipping_content .same_shipping_billing_fields label .form-check');\n    I.fillField('#shipping_billing_information_form_billingFirstName', 'Jose Testing');\n    I.fillField('#shipping_billing_information_form_billingLastName', 'Jose Testing');\n    I.fillField('#shipping_billing_information_form_billingAddressLineOne', 'Test Address');\n    I.click('#shipping_billing_information_form_billingCountry');\n    I.selectOption('#shipping_billing_information_form_billingCountry', 'Australia');\n    I.fillField('#shipping_billing_information_form_billingState', 'Testing');\n    I.fillField('#shipping_billing_information_form_billingSuburb', 'Testing');\n    I.fillField('#shipping_billing_information_form_billingPostcode', '4000');\n    I.fillField('#shipping_billing_information_form_billingPhone', '123456');\n    I.click('#cart_shipping_content .last_row .right_submit input');\n    I.seeInCurrentUrl('/cart/payment-information');",
              "err": {},
              "uuid": "b3f4a99a-a429-4c2e-850a-93bb68e31e13",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [
            "b3f4a99a-a429-4c2e-850a-93bb68e31e13"
          ],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 0
        },
        {
          "uuid": "aeb2268d-b8fb-4485-995d-7e3b509b49eb",
          "title": "ENGAGEMENT RINGS - START WITH A DIAMOND",
          "fullFile": "C:\\Users\\Daniela\\Documents\\CodeceptJS-Novita\\test\\Engagement Rings\\StartWithADiamond_test.js",
          "file": "\\test\\Engagement Rings\\StartWithADiamond_test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook: codeceptjs.beforeSuite",
              "fullTitle": "ENGAGEMENT RINGS - START WITH A DIAMOND \"before all\" hook: codeceptjs.beforeSuite",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.suiteSetup(suite)",
              "err": {},
              "uuid": "b454c5fe-341d-4277-95c2-523b0158ef54",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook: codeceptjs.before",
              "fullTitle": "ENGAGEMENT RINGS - START WITH A DIAMOND \"before each\" hook: codeceptjs.before",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.setup(suite)",
              "err": {},
              "uuid": "03b2e062-a617-4820-802c-4c20722edef2",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook: codeceptjs.afterSuite",
              "fullTitle": "ENGAGEMENT RINGS - START WITH A DIAMOND \"after all\" hook: codeceptjs.afterSuite",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.suiteTeardown(suite)",
              "err": {},
              "uuid": "d8e410b3-2dc0-43de-870f-e435f97f0f0a",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook: finalize codeceptjs",
              "fullTitle": "ENGAGEMENT RINGS - START WITH A DIAMOND \"after each\" hook: finalize codeceptjs",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.teardown(suite)",
              "err": {},
              "uuid": "2082aa1e-8a01-454b-8523-c1bc9b0a439f",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "START WITH A DIAMOND",
              "fullTitle": "ENGAGEMENT RINGS - START WITH A DIAMOND: START WITH A DIAMOND",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "I }) => {\n    const waitTime = 300; //Seconds\n    const waitResponseInTable = () => {\n        I.waitForText('Detail', waitTime, '//*[@id=\"body_table_results\"]/tr[1]/td[10]/a/div');\n    };\n    const checkTypeMetal = (typeMetal) => {\n        let results = [];\n        I.waitForResponse(async res => {\n            if(res.url().includes('/api/product/engagement-rings')) {\n                results.push(await res.json());\n                if(results[0].response.total > 0) {\n                    const total = results[0].response.total > 10 ? 10 : results[0].response.total\n                    for (let i = 0; i < total; i++) {\n                        if(!results[0].response.items[i].metal_name.toLowerCase().includes(typeMetal)) {\n                            console.log(`>>> Error in values obtained from METAL TYPE filter: ${typeMetal.toUpperCase()} expected, but ${results[0].response.items[i].metal_name.toUpperCase()} was found.`);\n                        }                        \n                    }\n                }else{\n                    console.log(`>>> No record was found according to the filter: METAL TYPE, option ${typeMetal.toUpperCase()}`);\n                    return true;\n                }\n                return true;\n            }\n        }, waitTime)\n    };\n    const checkDiamondShape = (shape) => {\n        let results = []\n        I.waitForResponse(async res => {\n            if(res.url().includes('/api/product/engagement-rings')) {\n                results.push(await res.json());\n                if(results[0].response.total > 0) {\n                    const total = results[0].response.total > 10 ? 10 : results[0].response.total;\n                    for (let i = 0; i < total; i++) {\n                        if(!(results[0].response.items[i].shape_slug == shape)) {\n                            console.log(`>>> Error in values obtained from DIAMOND SHAPE filter: ${shape.toUpperCase()} expected, but ${results[0].response.items[i].shape_slug.toUpperCase()} was found.`);\n                        }\n                    }\n                }else {\n                    console.log(`No record was found according to the filter: DIAMOND SHAPE, option ${shape.toUpperCase()}.`);\n                    return true;\n                }\n                return true;             \n            }\n        }, waitTime);\n    };\n    const checkDiamondStyle = (typeStyle) => {\n        let results = [];\n        I.waitForResponse(async res => {\n            if(res.url().includes('/api/product/engagement-rings')) {\n                results.push(await res.json());\n                if(results[0].response.total > 0) {\n                    const total = results[0].response.total > 10 ? 10 : results[0].response.total;\n                    for (let i = 0; i < total; i++) {\n                        let style = results[0].response.items[i].engagement_ring_styles.some(elem => elem.style_slug === typeStyle)\n                        if(!style) {\n                            console.log(`>>> Error in values obtained from DIAMOND STYLE filter: ${typeStyle.toUpperCase()} expected.`);\n                        }\n                    }\n                }else {\n                    console.log(`No record was found according to the filter: DIAMOND STYLE, option ${typeStyle.toUpperCase()}.`);\n                    return true;\n                }\n                return true;             \n            }\n        }, waitTime);\n    };\n    const checkDiamondPrice = (typePrice, option) => {\n        let results = [];\n        I.waitForResponse(async res => {\n            if(res.url().includes('/api/product/engagement-rings')) {\n                results.push(await res.json());\n                if(results[0].response.total > 0) {\n                    const total = results[0].response.total > 10 ? 10 : results[0].response.total; \n                    for (let i = 0; i < total; i++) {\n                        if(typePrice == 'under') {\n                            if(!(results[0].response.items[i].price <= 1000)) {\n                                console.log(`>>> Error in values obtained from DIAMOND PRICE filter: ${option.toUpperCase()} expected.`);\n                            }\n                        }else if(typePrice == 'between') {\n                            if(!(results[0].response.items[i].price >= 1000 && results[0].response.items[0].price <= 2000)) {\n                                console.log(`>>> Error in values obtained from DIAMOND PRICE filter: ${option.toUpperCase()} expected.`);\n                            }\n                        }else if(typePrice == 'over') {\n                            if(!(results[0].response.items[i].price > 2000)) {\n                                console.log(`>>> Error in values obtained from DIAMOND PRICE filter: ${option.toUpperCase()} expected.`);\n                            }\n                        }\n                    }\n                }else {\n                    console.log(`No record was found according to the filter: DIAMOND PRICE, option ${option.toUpperCase()}.`);\n                    return true;\n                }\n                return true;\n            }\n        }, waitTime);\n    };\n    const checkPriceLowToHigh = () => {\n        let results = [];\n        I.waitForResponse(async res => {\n            if(res.url().includes('/api/product/engagement-rings')) {\n                results.push(await res.json());\n                if(results[0].response.total > 0) {\n                    const total = results[0].response.total > 10 ? 10 : results[0].response.total\n                    let previousValue = 0;\n                    for (let i = 0; i < total; i++) {\n                        if(!(previousValue <= results[0].response.items[i].price)) {\n                            console.log(`>>> Error in values obtained from SORT BY filter: option LOW TO HIGH`)\n                        }\n                        previousValue = results[0].response.items[i].price                      \n                    }\n                }else{\n                    console.log('No record was found according to the filter SORT BY: option LOW TO HIGH.');\n                    return true;\n                }\n                return true;\n            }\n        }, waitTime)\n    };\n    const checkPriceHighToLow = () => {\n        let results = [];\n        I.waitForResponse(async res => {\n            if(res.url().includes('/api/product/engagement-rings')) {\n                results.push(await res.json());\n                if(results[0].response.total > 0) {\n                    const total = results[0].response.total > 10 ? 10 : results[0].response.total\n                    let previousValue = Number.MAX_SAFE_INTEGER;\n                    for (let i = 0; i < total; i++) {           \n                        if(!(previousValue >= results[0].response.items[i].price)) {\n                            console.log(`>>> Error in values obtained from SORT BY filter: option HIGH TO LOW`)\n                        }\n                        previousValue = results[0].response.items[i].price\n                    }\n                }else{\n                    console.log('No record was found according to the filter SORT BY: option HIGH TO LOW.');\n                    return true;\n                }\n                return true;\n            }\n        }, waitTime)\n    };\n    const checkSortByNewest = () => {\n        let results = [];\n        I.waitForResponse(async res => {\n            if(res.url().includes('/api/product/engagement-rings')) {\n                results.push(await res.json());\n                if(results[0].response.total > 0) {\n                    if(!(results[0].response.items[0].is_new)) {\n                        console.log(`>>> Error in values obtained from SORT BY filter: option NEWEST`)\n                    }\n                }else{\n                    console.log('No record was found according to the filter SORT BY: option NEWEST.');\n                    return true;\n                }\n                return true;\n            }\n        }, waitTime)\n    };\n    const searchInputRingDesign = (name) => {\n        let results = [];\n        I.waitForResponse(async res => {\n            if(res.url().includes('/api/product/engagement-rings')) {\n                results.push(await res.json());\n                if(results[0].response.total > 0) {\n                    if(!(results[0].response.items[0].name.toLowerCase().includes(name))) {\n                        console.log(`>>> Error in values obtained from SEARCH PRODUCT filter: ${name.toUpperCase()} expected.`)\n                    }\n                }else{\n                    console.log(`No record was found according to the filter SEARCH PRODUCT INPUT, option ${name}.`);\n                    return true;\n                }\n                return true;\n            }\n        }, waitTime)\n    };\n    const checkPersonaliseYourRing = () => {\n        I.waitForText('PERSONALISE YOUR RING', waitTime, 'h2')\n        I.see('PERSONALISE YOUR RING');\n        I.say('CLAW STYLE');\n        I.click('#personalised_select_claw_style');\n        I.click('#eagle_claw_link');\n        I.see('Claw Style: Eagle');\n        I.click('#personalised_select_claw_style');\n        I.click('#square_claw_link');\n        I.see('Claw Style: Square');\n        I.click('#personalised_select_claw_style');\n        I.click('#round_claw_link');\n        I.see('Claw Style: Round');\n        // Diamond setting\n        I.say('DIAMOND SETTING');\n        I.click('#personalised_select_stone_setting');\n        I.click('#low_height_link');\n        I.see('Diamond Setting: Very Low');\n        I.click('#personalised_select_stone_setting');\n        I.click('#high_height_link');\n        I.see('Diamond Setting: Medium-High');\n        I.click('#personalised_select_stone_setting');\n        I.click('#medium_height_link');\n        I.see('Diamond Setting: Medium-Low');\n        I.click('#save_store_personalisation');\n    };\n    const formDropAHint = () => {\n        I.fillField('#drop_hint_recipientName', 'Jose Testing');\n        I.fillField('#drop_hint_recipientEmail', 'testing@testing.com');\n        I.fillField('#drop_hint_message', 'Test form, please ignore this request.');\n        I.fillField('#drop_hint_yourName', 'Jose Testing');\n        I.fillField('#drop_hint_yourEmail', 'testing@testing.com');\n        I.checkOption('#drop_hint_newStyleOfferUpdate');\n        I.click('//*[@id=\"drop_a_hint\"]/div/div/div/button')\n        // I.say('PLEASE, ACTIVATE THE CAPTCHA AND WRITE \"exit\" IN THE CONSOLE AND PRESS ENTER');\n        // pause();\n        // I.click('#drop_hint_send');\n        // I.waitForText('MESSAGE SENT', waitTime)\n        // I.see('MESSAGE SENT');\n        // I.click('.modal-content .modal-body button');\n    };\n    // ----------------------------------------------------\n    // ----------------------------------------------------\n    I.amOnPage(\"/\")\n    I.forceClick(\"Start With a Diamond\")\n    I.seeInCurrentUrl(\"/engagement-ring/create/diamond\")\n    waitResponseInTable()\n    // CHECKING RING GUIDE BAR\n    //------------------------------------------------------------------------------\n    I.say('CHECKING RING GUIDE BAR')\n    I.say('STEP - RING DESIGN')\n    I.waitForElement('//*[@id=\"diamond_list_section\"]/div[1]/div[2]/div[3]/div[2]/a', waitTime)\n    I.forceClick('Browse settings', '//*[@id=\"diamond_list_section\"]/div[1]/div[2]/div[3]/div[2]/a')\n    I.wait(2)\n    I.seeInCurrentUrl('/engagement-ring/create/ring')\n    I.waitForElement('//*[@id=\"create_engage_ring_container\"]/section[3]/div[1]/div[1]/div[3]/div[2]/a', waitTime)\n    I.say('STEP - SELECT DIAMOND')\n    I.forceClick('Browse diamonds', '//*[@id=\"create_engage_ring_container\"]/section[3]/div[1]/div[1]/div[3]/div[2]/a')\n    I.wait(2)\n    I.seeInCurrentUrl('/engagement-ring/create/diamond')\n    waitResponseInTable()\n    //  SELECT A DIAMOND\n    //----------------------------------------------------------------------------------------------------------\n    I.say('SELECT ONE DIAMOND')\n    waitResponseInTable()\n    I.see('Detail', '//*[@id=\"body_table_results\"]/tr[1]/td[10]/a/div')\n    I.forceClick('Detail', '//*[@id=\"body_table_results\"]/tr[1]/td[10]/a/div')\n    I.waitForElement('//*[@id=\"diamond_detail_section\"]/div[2]/div[2]/div[6]/a[1]', waitTime)\n    I.click('Choose this diamond', '//*[@id=\"diamond_detail_section\"]/div[2]/div[2]/div[6]/a[1]')\n    I.waitForText('CREATE YOUR RING', waitTime, '//*[@id=\"select_ring_instructions\"]/section/div/div/div[1]')    \n    // -------------------------------------------- METAL TYPE FILTER --------------------------------------------\n    I.say('FILTER CHECK - METAL TYPE')\n    I.forceClick('#metal_type_1')\n    I.say('METAL TYPE - WHITE GOLD')\n    I.forceClick('#metal_type_3')\n    I.seeCheckboxIsChecked('#metal_type_3')\n    checkTypeMetal('white gold')\n    I.forceClick('#metal_type_3')\n    I.say('METAL TYPE - YELLOW GOLD')\n    I.forceClick('#metal_type_5')\n    I.seeCheckboxIsChecked('#metal_type_5')\n    checkTypeMetal('yellow gold')\n    I.forceClick('#metal_type_5')\n    I.say('METAL TYPE - ROSE GOLD')\n    I.forceClick('#metal_type_4')\n    I.seeCheckboxIsChecked('#metal_type_4')\n    checkTypeMetal('rose gold')\n    I.forceClick('#metal_type_4')\n    I.say('METAL TYPE - ROSE GOLD')\n    I.forceClick('#metal_type_2');\n    I.seeCheckboxIsChecked('#metal_type_2')\n    checkTypeMetal('platinum')\n    I.forceClick('#metal_type_2')\n    // -------------------------------------------- DIAMOND SHAPE FILTER --------------------------------------------\n    I.say('DIAMOND SHAPE FILTER')\n    I.forceClick('#diamond_shape_1')\n    I.say('DIAMOND SHAPE - ROUND')\n    I.forceClick('#diamond_shape_2')\n    checkDiamondShape('round')\n    I.forceClick('#diamond_shape_2')\n    I.say('DIAMOND SHAPE - PEAR')\n    I.forceClick('#diamond_shape_7')\n    checkDiamondShape('pear')\n    I.forceClick('#diamond_shape_7')\n    I.say('DIAMOND SHAPE - OVAL')\n    I.forceClick('#diamond_shape_5')\n    checkDiamondShape('oval')\n    I.forceClick('#diamond_shape_5')\n    I.say('DIAMOND SHAPE - EMERALD')\n    I.forceClick('#diamond_shape_6')\n    checkDiamondShape('emerald')\n    I.forceClick('#diamond_shape_6')\n    I.say('DIAMOND SHAPE - CUSHION')\n    I.forceClick('#diamond_shape_4')\n    checkDiamondShape('cushion')\n    I.forceClick('#diamond_shape_4')\n    I.say('DIAMOND SHAPE - PRINCESS')\n    I.forceClick('#diamond_shape_3')\n    checkDiamondShape('princess')\n    I.forceClick('#diamond_shape_3')\n    I.say('DIAMOND SHAPE - RADIANT')\n    I.forceClick('#diamond_shape_8')\n    checkDiamondShape('radiant')\n    I.forceClick('#diamond_shape_8')\n    I.say('DIAMOND SHAPE - ASSCHER')\n    I.forceClick('#diamond_shape_9')\n    checkDiamondShape('asscher')\n    I.forceClick('#diamond_shape_9')\n    I.forceClick('#diamond_shape_1')\n    // -------------------------------------------- DIAMOND STYLE FILTER --------------------------------------------\n    I.say('DIAMOND STYLE FILTER')\n    I.forceClick('#engagement_ring_style_1')\n    I.say('DIAMOND STYLE - SOLITAIRE')\n    I.forceClick('#engagement_ring_style_2')\n    checkDiamondStyle('solitaire')\n    I.forceClick('#engagement_ring_style_2')\n    I.say('DIAMOND STYLE - SIDE STONE')\n    I.forceClick('#engagement_ring_style_4')\n    checkDiamondStyle('side-stone')\n    I.forceClick('#engagement_ring_style_4')\n    I.say('DIAMOND STYLE - HALO')\n    I.forceClick('#engagement_ring_style_3')\n    checkDiamondStyle('halo')\n    I.forceClick('#engagement_ring_style_3')\n    I.say('DIAMOND STYLE - THREE STONE')\n    I.forceClick('#engagement_ring_style_5')\n    checkDiamondStyle('three-stone')\n    I.forceClick('#engagement_ring_style_5')\n    I.forceClick('#engagement_ring_style_1')\n    // -------------------------------------------- DIAMOND PRICE FILTER --------------------------------------------\n    I.say('DIAMOND PRICE FILTER')\n    I.say('PRICE - $1000 and Under');\n    I.forceClick('#setting_price_range_2');\n    I.seeCheckboxIsChecked('#setting_price_range_2');\n    checkDiamondPrice('under', '$1000 and Under');\n    I.forceClick('#setting_price_range_2');\n    I.say('PRICE - BETWEEN $1000 to $2000');\n    I.forceClick('#setting_price_range_3');\n    I.seeCheckboxIsChecked('#setting_price_range_3');\n    checkDiamondPrice('between', '$1000 to $2000');\n    I.forceClick('#setting_price_range_3');\n    I.say('PRICE - OVER $2000');\n    I.forceClick('#setting_price_range_4');\n    I.seeCheckboxIsChecked('#setting_price_range_4');\n    checkDiamondPrice('over', 'OVER $2000');\n    I.forceClick('#setting_price_range_4');\n    \n    I.forceClick('#setting_price_range_1');\n    // -------------------------------------------- SORT BY --------------------------------------------\n    I.say('CHECK - SORT BY')\n    I.see('Sort by: Best Sellers', '#dropdownMenuButton');\n    I.say('SORT BY - LOW TO HIGH');\n    I.click('#jewellery_order_section #dropdownMenuButton');\n    I.click('Price (Low to High)');\n    I.see('Sort by: Price (Low to High)', '#dropdownMenuButton');\n    checkPriceLowToHigh();\n    I.say('SORT BY - HIGH TO LOW');\n    I.click('#jewellery_order_section #dropdownMenuButton');\n    I.click('Price (High to Low)');\n    I.see('Sort by: Price (High to Low)', '#dropdownMenuButton');\n    checkPriceHighToLow();\n    I.say('SORT BY: NEWEST');\n    I.click('#jewellery_order_section #dropdownMenuButton');\n    I.click('Newest');\n    I.see('Sort by: Newest', '#dropdownMenuButton');\n    checkSortByNewest()\n    I.say('SORT BY: BEST SELLERS');\n    I.click('#jewellery_order_section #dropdownMenuButton');\n    I.click('Best Sellers');\n    I.see('Sort by: Best Sellers', '#dropdownMenuButton');\n    // -------------------------------------------- SEARCH INPUT FILTER --------------------------------------------\n    I.say('TEXT SEARCH INPUT');\n    I.fillField('#create_engage_ring_container .select_ring_container .search-section .input-group input', 'Allegro accent');\n    I.pressKey('Enter');\n    searchInputRingDesign('allegro accent');\n    I.fillField('#create_engage_ring_container .select_ring_container .search-section .input-group input', '');\n    I.pressKey('Enter');\n    I.wait(4)\n    // // -------------------------------------------- I SELECT FIRST ITEM/ELEMENT --------------------------------------------\n    I.say('FIRST ITEM SELECTED');\n    I.waitForElement('#ring_list_section .ring_item .ring_detail_link', waitTime)\n    I.click('#ring_list_section .ring_item .ring_detail_link');\n    I.wait(4)\n    // 20 days express (+$150)\n    I.checkOption('#include_express_job_id .pink_checkbox_icon');\n    // 20% Deposit Available\n    I.click('#express_job_option .pink_checkbox_box_legend a');\n    \n    // Personalise your ring\n    I.say('PERSONALISE YOUR RING');\n    I.click('#personalise_ring_link .pink_checkbox_icon');\n    checkPersonaliseYourRing();\n    // Button cancel\n    I.say('PERSONALISE YOUR RING, BUTTON CANCEL');\n    I.click('Personalise your ring');\n    I.click('#cancel_store_personalisation');\n    // 20% Deposit Available\n    I.say('20% DEPOSIT AVAILABLE');\n    I.wait(5)\n    I.switchToNextTab();\n    I.seeInCurrentUrl('/deposit');\n    I.closeCurrentTab();\n    I.seeInCurrentUrl('/engagement-ring/create/');\n    // More information\n    I.say('MORE INFORMATION');\n    I.click('#more_info_link');\n    I.waitForText('PRODUCT DETAILS', waitTime, 'h2')\n    I.see('PRODUCT DETAILS', 'h2');\n    I.click('#ring_more_details_box button');\n    // Choose this diamond\n    I.say('CHOOSE THIS DIAMOND');\n    I.click('//*[@id=\"ring_list_section\"]/div/div[2]/a');\n    I.click('Choose this design');\n    I.waitForText('Review Your Ring', waitTime, 'h2')\n    I.see('Review Your Ring', 'h2');\n    // // -------------------------------------------- CHANGE DIAMOND --------------------------------------------\n    I.say('CHANGE - DIAMOND')\n    I.forceClick('Change', '.to_diamond_list_from_summary')\n    waitResponseInTable()\n    I.see('Detail', '//*[@id=\"body_table_results\"]/tr[1]/td[10]/a/div')\n    I.forceClick('Detail', '//*[@id=\"body_table_results\"]/tr[1]/td[10]/a/div')\n    I.seeElement('//*[@id=\"diamond_detail_section\"]/div[2]/div[2]/div[6]')\n    I.click('Choose this diamond');\n    I.waitForText('Review Your Ring', waitTime, 'h2')\n    I.see('Review Your Ring', 'h2');\n    // // -------------------------------------------- CHANGE RING --------------------------------------------\n    I.say('CHANGE - RING')\n    I.forceClick('Change', '.to_setting_list_from_summary')\n    I.waitForElement('//*[@id=\"ring_list_section\"]/div/div[1]/a', waitTime)\n    I.wait(5)\n    I.seeElement('//*[@id=\"ring_list_section\"]/div/div[1]/a')\n    I.forceClick('//*[@id=\"ring_list_section\"]/div/div[1]/a')\n    I.click('Choose this design');\n    I.waitForText('Review Your Ring', waitTime, 'h2')\n    I.see('Review Your Ring', 'h2');\n    I.say('CHANGE - RING PERSONALISATION')\n    I.click('#selection_summary_section .summary_personalise_link');\n    checkPersonaliseYourRing();\n    // // -------------------------------------------- RING SIZE --------------------------------------------\n    I.say('RING SIZE')\n    I.seeElement('//*[@id=\"engagement_ring_summary\"]/div[2]/div[2]/div[9]/div[4]/a')\n    I.selectOption('#select_ring_size', '1')\n    // // -------------------------------------------- DROP A HINT --------------------------------------------\n    I.say('OPTION DROP A HINT');\n    I.click('.social_network_icons .drop_a_hint a');\n    I.waitForText('Drop a hint', waitTime, 'h3')\n    I.see('DROP A HINT', 'h3')\n    formDropAHint();\n    I.say('OPTION FREE SHIPPING');\n    I.forceClick('.free_shipping a');\n    I.waitForText('FREE SHIPPING', waitTime, 'h2')\n    I.see('FREE SHIPPING');\n    I.click('> LEARN MORE');\n    I.wait(5);\n    I.switchToNextTab();\n    I.seeInCurrentUrl('/free-shipping');\n    I.closeCurrentTab();\n    I.seeInCurrentUrl('/engagement-ring/create/');\n    I.click('.modal-content .modal-body button');\n    I.say('OPTION FREE RETURNS');\n    I.click('.free_returns a');\n    I.waitForText('FREE 30 DAYS RETURN POLICY', waitTime, 'h3')\n    I.see('FREE 30 DAYS RETURN POLICY', 'h3');\n    I.click('> LEARN MORE');\n    I.wait(10);\n    I.switchToNextTab();\n    I.seeInCurrentUrl('/free-return');\n    I.closeCurrentTab();\n    I.seeInCurrentUrl('/engagement-ring/create/');\n    I.click('.modal-content .modal-body button');\n    // // -------------------------------------------- SOCIALMEDIA --------------------------------------------\n    I.say('OPTION SHARE AND SOCIALMEDIA');\n    I.click('.share a');\n    I.waitForText('SHARE THIS', waitTime, 'h3')\n    I.see('SHARE THIS');\n    I.click('Facebook');\n    I.wait(5);\n    I.switchToNextTab();\n    I.seeInCurrentUrl('facebook.com');\n    I.closeCurrentTab();\n    I.click('Twitter');\n    I.wait(5);\n    I.switchToNextTab();\n    I.seeInCurrentUrl('twitter.com');\n    I.closeCurrentTab();\n    I.click('Pinterest');\n    I.wait(5);\n    I.switchToNextTab();\n    I.see('Pinterest', 'h2');\n    I.closeCurrentTab();\n    I.say('COPY LINK')\n    I.click('Copy Link');\n    I.see('LINK COPIED TO THE CLIPBOARD');\n    I.click('.modal-content .modal-body button');\n    // // -------------------------------------------- ADD TO CART --------------------------------------------\n    I.say('ADD TO CART');\n    I.click('#add_to_cart_submit');\n    I.waitForText('SHOPPING CART', waitTime)\n    I.wait(2)\n    I.see('SHOPPING CART');\n    I.waitForElement('.link_to_ring_size a', waitTime)\n    I.click('Help', '.link_to_ring_size a');\n    I.wait(20);\n    I.switchToNextTab();\n    I.see('HOW TO FIND YOUR RING SIZE');\n    I.closeCurrentTab();\n    I.see('SHOPPING CART');\n    I.selectOption('.summary_setting_size .select_ring_size', '3/4');\n    I.say('CHECKOUT');\n    I.click('CHECKOUT');\n    I.waitForText('WHERE DO YOU WANT THESE ITEMS SENT?', waitTime, 'h2')\n    I.see('WHERE DO YOU WANT THESE ITEMS SENT?', 'h2');\n    I.wait(4)\n    I.fillField('#shipping_billing_information_form_shippingFirstName', 'Jose Testing');\n    I.fillField('#shipping_billing_information_form_shippingLastName', 'Jose Testing');\n    I.fillField('#shipping_billing_information_form_shippingAddressLineOne', 'Test Address');\n    I.click('#shipping_billing_information_form_shippingCountry');\n    I.selectOption('#shipping_billing_information_form_shippingCountry', 'Australia');\n    I.fillField('#shipping_billing_information_form_shippingState', 'Testing');\n    I.fillField('#shipping_billing_information_form_shippingSuburb', 'Testing');\n    I.fillField('#shipping_billing_information_form_shippingPostcode', '4000');\n    I.fillField('#shipping_billing_information_form_shippingPhone', '1234567');\n    I.fillField('#shipping_billing_information_form_deliveryInstructions', 'Test form, please ignore this request.');\n    I.fillField('#shipping_billing_information_form_customerNotesProposalDate', 'Test form, please ignore this request.');\n    I.fillField('#shipping_billing_information_form_shippingEmail', 'testing@testing.com');\n    // Use the same address for billing and shipping\n    I.say('USE THE SAME ADDRESS FOR BILLING AND SHIPPING');\n    I.click('#cart_shipping_content .same_shipping_billing_fields label .form-check');\n    I.fillField('#shipping_billing_information_form_billingFirstName', 'Jose Testing');\n    I.fillField('#shipping_billing_information_form_billingLastName', 'Jose Testing');\n    I.fillField('#shipping_billing_information_form_billingAddressLineOne', 'Test Address');\n    I.click('#shipping_billing_information_form_billingCountry');\n    I.selectOption('#shipping_billing_information_form_billingCountry', 'Australia');\n    I.fillField('#shipping_billing_information_form_billingState', 'Testing');\n    I.fillField('#shipping_billing_information_form_billingSuburb', 'Testing');\n    I.fillField('#shipping_billing_information_form_billingPostcode', '4000');\n    I.fillField('#shipping_billing_information_form_billingPhone', '123456');\n    I.click('#cart_shipping_content .last_row .right_submit input');\n    I.seeInCurrentUrl('/cart/payment-information');\n    // // -------------------------------------------- PAYMENT METHOD --------------------------------------------\n    // I.say('PAYMENT METHOD');\n    // I.waitForText('PAYMENT METHOD', waitTime)\n    // I.see('PAYMENT METHOD', 'h2')\n    // I.say('PAYMENT FOR BANK TRANSFER');\n    // I.click('#checkbox_bank_wire_description');\n    // I.waitForText('Paying By Bank Transfer', waitTime)\n    // I.see('Paying By Bank Transfer');\n    // I.say('PLEASE, ACTIVATE THE CAPTCHA THEN TYPE \"exit\" IN THE CONSOLE AND PRESS ENTER TO CONTINUE');\n    // pause()\n    // I.click('PLACE YOUR ORDER', '#bank_wire_submit')\n    // I.waitForText('Your order is confirmed!', waitTime)\n    // I.see('Your order is confirmed')",
              "err": {},
              "uuid": "964418e3-f38c-4637-96bd-8d00225fd57c",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [
            "964418e3-f38c-4637-96bd-8d00225fd57c"
          ],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 0
        },
        {
          "uuid": "17bb3da0-e427-4475-b1b5-6907ee417fa3",
          "title": "ENGAGEMENT RINGS - START WITH A RING DESIGN",
          "fullFile": "C:\\Users\\Daniela\\Documents\\CodeceptJS-Novita\\test\\Engagement Rings\\StartWithARingDesign_test.js",
          "file": "\\test\\Engagement Rings\\StartWithARingDesign_test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook: codeceptjs.beforeSuite",
              "fullTitle": "ENGAGEMENT RINGS - START WITH A RING DESIGN \"before all\" hook: codeceptjs.beforeSuite",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.suiteSetup(suite)",
              "err": {},
              "uuid": "15cae87f-847b-47f8-82ad-0629f1acdd6a",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook: codeceptjs.before",
              "fullTitle": "ENGAGEMENT RINGS - START WITH A RING DESIGN \"before each\" hook: codeceptjs.before",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.setup(suite)",
              "err": {},
              "uuid": "7fe1d555-5bdd-4a5e-a905-f94d23a26670",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook: codeceptjs.afterSuite",
              "fullTitle": "ENGAGEMENT RINGS - START WITH A RING DESIGN \"after all\" hook: codeceptjs.afterSuite",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.suiteTeardown(suite)",
              "err": {},
              "uuid": "cd6aefcf-de5d-4894-8c4a-0f3663b870b2",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook: finalize codeceptjs",
              "fullTitle": "ENGAGEMENT RINGS - START WITH A RING DESIGN \"after each\" hook: finalize codeceptjs",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.teardown(suite)",
              "err": {},
              "uuid": "0651d679-5230-44e8-b7ff-fdee55b43efb",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "START WITH A RING DESIGN",
              "fullTitle": "ENGAGEMENT RINGS - START WITH A RING DESIGN: START WITH A RING DESIGN",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "I }) => {\n    const waitTime = 300; //Seconds\n    const params = {\n        \"shapes\" : [\"Round\", \"Oval\", \"Cushion\", \"Princess\", \"Emerald\", \"Pear\", \"Radiant\", \"Asscher\", \"Marquise\"],\n        \"caratFrom\" : 2,\n        \"caratTo\" : 4,\n        \"colour\" : {\n            \"D\" : [0, -500],\n            \"E\" : [50, -500],\n            \"F\" : [100, -500],\n            \"G\" : [150, -500],\n            \"H\" : [200, -500],\n            \"I\" : [210, -500],\n            \"J\" : [270, -500],\n            \"K\" : [300, -500],\n            \"L\" : [350, -500],\n            \"M\" : [400, 0],\n        },\n        \"priceFrom\" : 15000,\n        \"priceTo\" : 30000,\n        \"cut\" : {\n            \"Ideal\":[0, -500],\n            \"Excellent\":[100, -500],\n            \"Very Good\":[180, -500],\n            \"Good\":[500, 0],\n        },\n        \"clarity\" : {\n            \"IF\" : [0, -500],\n            \"VVS1\" : [50, -500],\n            \"VVS2\" : [100, -500],\n            \"VS1\" : [150, -500],\n            \"VS2\" : [230, -500],\n            \"SI1\" : [270, -500],\n            \"SI2\" : [320, -500],\n            \"I1\" : [380, 0]\n        },\n        \"polish\" : {\n            \"Excellent\" : [0, -500],\n            \"Very Good\" : [150, -500],\n            \"Good\" : [250, -500]\n        },\n        \"symmetry\" : {\n            \"Excellent\" : [0, -500],\n            \"Very Good\" : [150, -500],\n            \"Good\" : [250, -500]\n        },\n        \"reports\" : [\"IGI\", \"GIA\", \"GCAL\"],\n        \"ratioFrom\" : 1.26,\n        \"ratioTo\" : 2.00\n    }\n    const waitResponseInTable = () => {\n        I.waitForText('Detail', waitTime, '//*[@id=\"body_table_results\"]/tr[1]/td[10]/a/div');\n    };\n    const checkDiamondShape = () => {\n        for(const shape of params.shapes) {\n            I.click(`.${shape.toLocaleLowerCase()}-shape`);            \n            let results = [];\n            I.waitForResponse(async res => {\n                if(res.url().includes('/api/product/diamonds')) {\n                    results.push(await res.json());\n                    if(results.length >= 2) {\n                        results[0].response.total > 0 ? results[0] = results[0] : results[0] = results[1];\n                        if(results[0].response.total > 0) {\n                            const total = results[0].response.total > 10 ? 10 : results[0].response.total\n                            for (let i = 0; i < total; i++) {\n                                if(!results[0].response.items[i].shape == shape) {\n                                    console.log(`>>> Error in values obtained from DIAMOND SHAPE filter: option ${shape.toUpperCase()} expected, but ${results[0].response.items[i].shape.toUpperCase()} was found.`);\n                                }\n                            }\n                        }else{\n                            console.log(`>>> No record was found according to the filter: DIAMOND SHAPE, option ${shape.toUpperCase()}`);\n                            return true;\n                        }\n                        return true;\n                    }\n                }\n            }, waitTime)\n            I.click(`.${shape.toLocaleLowerCase()}-shape`);\n        };\n    };\n    const checkDiamondCarat = () => {\n        I.fillField(\"#from_carat_value_input\", params.caratFrom);\n        I.pressKey(\"Enter\");\n        I.fillField(\"#to_carat_value_input\", params.caratTo);\n        I.pressKey(\"Enter\");\n        let results = [];\n        I.waitForResponse(async res => {\n            if(res.url().includes('/api/product/diamonds')) {\n                results.push(await res.json());\n                if(results.length >= 2) {\n                    results[0].response.total > 0 ? results[0] = results[0] : results[0] = results[1];\n                    if(results[0].response.total > 0) {\n                        const total = results[0].response.total > 10 ? 10 : results[0].response.total\n                        for (let i = 0; i < total; i++) {\n                            if(results[0].response.items[i].carat < parseFloat(params.caratFrom) || results[0].response.items[i].carat > parseFloat(params.caratTo)) {\n                                console.log(`>>> Error in values obtained from DIAMOND CARAT filter: option ${params.caratFrom} to ${params.caratTo} expected, but ${results[0].response.items[i].carat} was found.`);\n                            }\n                        }\n                    }else{\n                        console.log(`>>> No record was found according to the filter: DIAMOND CARAT, option ${params.caratFrom} to ${params.caratTo}.`);\n                        return true;\n                    }\n                    return true;\n                }\n            }\n        }, waitTime)\n        I.fillField(\"#from_carat_value_input\", 0.30);\n        I.pressKey(\"Enter\");\n        I.fillField(\"#to_carat_value_input\", 6);\n        I.pressKey(\"Enter\");\n    };\n    const checkDiamondColour = () => {\n        for (const elem of Object.keys(params.colour)) {\n            I.dragSlider(\"#search_form .diamond_filter_color_content .from\", params.colour[elem][0]);\n            I.dragSlider(\"#search_form .diamond_filter_color_content .to\", params.colour[elem][1]);\n            let results = [];\n            I.waitForResponse(async res => {\n                if(res.url().includes('/api/product/diamonds')) {\n                    results.push(await res.json());\n                    if(results.length >= 2) {\n                        results[0].response.total > 0 ? results[0] = results[0] : results[0] = results[1];\n                        if(results[0].response.total > 0) {\n                            const total = results[0].response.total > 10 ? 10 : results[0].response.total\n                            for (let i = 0; i < total; i++) {\n                                if(results[0].response.items[i].color != elem) {\n                                    console.log(`>>> Error in values obtained from DIAMOND COLOUR filter: option ${elem.toUpperCase()} expected, but ${results[0].response.items[i].color} was found.`);\n                                }\n                            }\n                        }else{\n                            console.log(`>>> No record was found according to the filter: DIAMOND COLOUR, option ${elem.toUpperCase()}.`);\n                            return true;\n                        }\n                        return true;\n                    }\n                }\n            }, waitTime)\n            I.dragSlider(\"#search_form .diamond_filter_color_content .from\", -500);\n            I.dragSlider(\"#search_form .diamond_filter_color_content .to\", 500);\n        };\n    };\n    const checkDiamondPrice = () => {\n        I.fillField(\"#from_price_value_input\", params.priceFrom);\n        I.pressKey('Enter');\n        I.fillField(\"#to_price_value_input\", params.priceTo);\n        I.pressKey('Enter');\n        let results = [];\n        I.waitForResponse(async res => {\n            if(res.url().includes('/api/product/diamonds')) {\n                results.push(await res.json());\n                if(results.length >= 2) {\n                    results[0].response.total > 0 ? results[0] = results[0] : results[0] = results[1];\n                    if(results[0].response.total > 0) {\n                        const total = results[0].response.total > 10 ? 10 : results[0].response.total\n                        for (let i = 0; i < total; i++) {\n                            if(results[0].response.items[i].price < params.priceFrom || results[0].response.items[i].price > params.priceTo) {\n                                console.log(`>>> Error in values obtained from DIAMOND PRICE filter: option option ${params.priceFrom} to ${params.priceTo} expected, but ${results[0].response.items[i].price} was found.`)\n                            }\n                        }\n                    }else{\n                        console.log(`>>> No record was found according to the filter: DIAMOND PRICE, option ${params.priceFrom} to ${params.priceTo}.`);\n                        return true;\n                    }\n                    return true;\n                }\n            }\n        }, waitTime)\n        I.fillField(\"#from_price_value_input\", 250);\n        I.pressKey('Enter');\n        I.fillField(\"#to_price_value_input\", 70000);\n        I.pressKey('Enter');        \n    };\n    const checkDiamondCut = () => {\n        for (const elem of Object.keys(params.cut)) {\n            I.dragSlider(\"#search_form .diamond_filter_cut_content .from\", params.cut[elem][0]);\n            I.dragSlider(\"#search_form .diamond_filter_cut_content .to\", params.cut[elem][1]);\n            let results = [];\n            I.waitForResponse(async res => {\n                if(res.url().includes('/api/product/diamonds')) {\n                    results.push(await res.json());\n                    if(results.length >= 2) {\n                        results[0].response.total > 0 ? results[0] = results[0] : results[0] = results[1];\n                        if(results[0].response.total > 0) {\n                            const total = results[0].response.total > 10 ? 10 : results[0].response.total\n                            for (let i = 0; i < total; i++) {\n                                if(results[0].response.items[i].cut != elem && results[0].response.items[i].cut != \"-\") {\n                                    console.log(`>>> Error in values obtained from DIAMOND CUT filter: option ${elem.toUpperCase()} expected, but ${results[0].response.items[i].cut} was found.`);\n                                }\n                            }\n                        }else{\n                            console.log(`>>> No record was found according to the filter: DIAMOND CUT, option ${elem.toUpperCase()}.`);\n                            return true;\n                        }\n                        return true;\n                    }\n                }\n            }, waitTime)             \n            I.dragSlider(\"#search_form .diamond_filter_cut_content .from\", -500);\n            I.dragSlider(\"#search_form .diamond_filter_cut_content .to\", 500);\n        };\n    };\n    const checkDiamondClarity = () => {\n        for (const elem of Object.keys(params.clarity)) {\n            I.dragSlider(\"#search_form .diamond_filter_clarity_content .from\", params.clarity[elem][0]);\n            I.dragSlider(\"#search_form .diamond_filter_clarity_content .to\", params.clarity[elem][1]);            \n            let results = [];\n            I.waitForResponse(async res => {\n                if(res.url().includes('/api/product/diamonds')) {\n                    results.push(await res.json());\n                    if(results.length >= 2) {\n                        results[0].response.total > 0 ? results[0] = results[0] : results[0] = results[1];\n                        if(results[0].response.total > 0) {\n                            const total = results[0].response.total > 10 ? 10 : results[0].response.total\n                            for (let i = 0; i < total; i++) {\n                                if(results[0].response.items[i].clarity != elem) {\n                                    console.log(`>>> Error in values obtained from DIAMOND CLARITY filter: option ${elem.toUpperCase()} expected, but ${results[0].response.items[i].clarity} was found.`);\n                                }\n                            }\n                        }else{\n                            console.log(`>>> No record was found according to the filter: DIAMOND CLARITY, option ${elem.toUpperCase()}.`);\n                            return true;\n                        }\n                        return true;\n                    }\n                }\n            }, waitTime)\n            I.dragSlider(\"#search_form .diamond_filter_clarity_content .from\", -500);\n            I.dragSlider(\"#search_form .diamond_filter_clarity_content .to\", 500);\n        };\n    };\n    const checkDiamondPolish = () => {\n        for (const elem of Object.keys(params.polish)) {\n            I.dragSlider(\"#advanced_filters_content .diamond_filter_polish_content .from\", params.polish[elem][0]);\n            I.dragSlider(\"#advanced_filters_content .diamond_filter_polish_content .to\", params.polish[elem][1]);\n            let results = [];\n            I.waitForResponse(async res => {\n                if(res.url().includes('/api/product/diamonds')) {\n                    results.push(await res.json());\n                    if(results.length >= 2) {\n                        results[0].response.total > 0 ? results[0] = results[0] : results[0] = results[1];\n                        if(results[0].response.total > 0) {\n                            const total = results[0].response.total > 10 ? 10 : results[0].response.total\n                            for (let i = 0; i < total; i++) {\n                                if(results[0].response.items[i].polish != elem) {\n                                    console.log(`>>> Error in values obtained from POLISH filter: option ${elem.toUpperCase()} expected, but ${results[0].response.items[i].polish} was found.`);\n                                }\n                            }\n                        }else{\n                            console.log(`>>> No record was found according to the filter: POLISH, option ${elem.toUpperCase()}.`);\n                            return true;\n                        }\n                        return true;\n                    }\n                }\n            }, waitTime)\n            I.dragSlider(\"#advanced_filters_content .diamond_filter_polish_content .from\", -500);\n            I.dragSlider(\"#advanced_filters_content .diamond_filter_polish_content .to\", 500);\n        }\n    };\n    const checkDiamondSymmetry = () => {\n        for (const elem of Object.keys(params.symmetry)) {\n            I.dragSlider(\"#advanced_filters_content .diamond_filter_symmetry_content .from\", params.symmetry[elem][0]);\n            I.dragSlider(\"#advanced_filters_content .diamond_filter_symmetry_content .to\", params.symmetry[elem][1]);\n            let results = [];\n            I.waitForResponse(async res => {\n                if(res.url().includes('/api/product/diamonds')) {\n                    results.push(await res.json());\n                    if(results.length >= 2) {\n                        results[0].response.total > 0 ? results[0] = results[0] : results[0] = results[1];\n                        if(results[0].response.total > 0) {\n                            const total = results[0].response.total > 10 ? 10 : results[0].response.total\n                            for (let i = 0; i < total; i++) {\n                                if(results[0].response.items[i].symmetry != elem) {\n                                    console.log(`>>> Error in values obtained from SYMMETRY filter: option ${elem.toUpperCase()} expected, but ${results[0].response.items[i].symmetry} was found.`);\n                                }\n                            }\n                        }else{\n                            console.log(`>>> No record was found according to the filter: SYMMETRY, option ${elem.toUpperCase()}.`);\n                            return true;\n                        }\n                        return true;\n                    }\n                }\n            }, waitTime)\n            I.dragSlider(\"#advanced_filters_content .diamond_filter_symmetry_content .from\", -500);\n            I.dragSlider(\"#advanced_filters_content .diamond_filter_symmetry_content .to\", 500);\n        }\n    };\n    const checkDiamondReport = () => {\n        for (let i = 0; i < params.reports.length; i++) {\n            I.forceClick(params.reports[i], `#advanced_filters_content .diamond_filter_certificate_content ul li:nth-child(${i+1}) label`);\n            let results = [];\n            I.waitForResponse(async res => {\n                if(res.url().includes('/api/product/diamonds')) {\n                    results.push(await res.json());\n                    if(results.length >= 2) {\n                        results[0].response.total > 0 ? results[0] = results[0] : results[0] = results[1];\n                        if(results[0].response.total > 0) {\n                            const total = results[0].response.total > 10 ? 10 : results[0].response.total\n                            for (let j = 0; j < total; j++) {\n                                if(results[0].response.items[j].certificate_laboratory != params.reports[i]) {\n                                    console.log(`>>> Error in values obtained from REPORT filter: option ${params.reports[i].toUpperCase()} expected, but ${results[0].response.items[i].certificate_laboratory} was found.`);\n                                }\n                            }\n                        }else{\n                            console.log(`>>> No record was found according to the filter: REPORT, option ${params.reports[i].toUpperCase()}.`);\n                            return true;\n                        }\n                        return true;\n                    }\n                }\n            }, waitTime)\n            I.forceClick(params.reports[i], `#advanced_filters_content .diamond_filter_certificate_content ul li:nth-child(${i+1}) label`);\n        }\n    };\n    const checkDiamondRatio = () => {\n        I.fillField('#from_ratio_value_input', params.ratioFrom);\n        I.pressKey('Enter');\n        I.fillField('#to_ratio_value_input', params.ratioTo);\n        I.pressKey('Enter');\n        let results = [];\n        I.waitForResponse(async res => {\n            if(res.url().includes('/api/product/diamonds')) {\n                results.push(await res.json());\n                if(results.length >= 2) {\n                    results[0].response.total > 0 ? results[0] = results[0] : results[0] = results[1];\n                    if(results[0].response.total > 0) {\n                        const total = results[0].response.total > 10 ? 10 : results[0].response.total\n                        for (let i = 0; i < total; i++) {\n                            // The ratio response is null\n                            // results[0].response.items[i].ratio < parseFloat(params.ratioFrom) || results[0].response.items[i].ratio > parseFloat(params.ratioTo)\n                            if(results[0].response.items[i].ratio != null && (results[0].response.items[i].ratio < parseFloat(params.ratioFrom) || results[0].response.items[i].ratio > parseFloat(params.ratioTo))) {\n                                console.log(`>>> Error in values obtained from RATIO filter.`);\n                                console.log(`>>> Error in values obtained from RATIO filter: option ${params.ratioFrom} to ${params.ratioTo} expected, but ${results[0].response.items[i].ratio} was found.`);\n                            }\n                        }\n                    }else{\n                        console.log(`>>> No record was found according to the filter: RATIO, option ${params.ratioFrom} to ${params.ratioTo}.`);\n                        return true;\n                    }\n                    return true;\n                }\n            }\n        }, waitTime)\n        I.fillField('#from_ratio_value_input', 1);\n        I.pressKey('Enter');\n        I.fillField('#to_ratio_value_input', 3);\n        I.pressKey('Enter');\n    };\n    const sortByCarat = async (order) => {\n        const carat = await I.grabTextFromAll('tbody tr td:nth-child(3)');\n        let previousNumber = 0;\n        if (order == \"higher\") {\n            previousNumber = Number.MAX_SAFE_INTEGER;\n        }\n        for (const elem of carat) {\n            let actualNumber = Number(elem);\n            if(!isNaN(actualNumber)) {\n                if(order == \"higher\") {\n                    if(actualNumber > previousNumber) {\n                        console.log(\"Error in the values obtained when organizing the list by major carats.\");\n                    }\n                }else if(order == \"smaller\") {\n                    if(actualNumber < previousNumber) {\n                        console.log(\"Error in the values obtained when organizing the list by minor carats.\");\n                    }\n                }\n            }\n            previousNumber = actualNumber;\n        };\n    };\n    const sortByReport = async (order) => {\n        const report = await I.grabTextFromAll('tbody tr td:nth-child(7)');\n        for (const elem of report) {\n            if(order == \"higher\") {\n                if(elem != \"IGI\" && elem != \"GIA\") {\n                    console.log(\"Error in the values obtained when organizing the list by Report.\");\n                }\n            }else if(order == \"smaller\") {\n                if(elem != \"GCAL\" && elem != \"GIA\") {\n                    console.log(\"Error in the values obtained when organizing the list by Report.\");\n                }\n            }\n        };\n    };\n    const checkURLcertificate = async () => {\n        let url =  await I.grabCurrentUrl();\n        if(!(url.includes('https://www.gcalusa.com/certificate-search.html')) && !(url.includes('https://www.igi.org/reports/'))) {\n            console.log('Error in current URL of certificate.');\n        }\n    };\n    const selectDiamond = async () => {\n        const diamonds = await I.grabHTMLFromAll('#body_table_results tr td:last-child a');\n        let i = 1;\n        for (const elem of diamonds) {\n            if(elem.includes(\"img\")) {\n                return i;\n            };\n            i++;\n        };\n    };\n    const checkPersonaliseYourRing = () => {\n        I.waitForText('PERSONALISE YOUR RING', waitTime, 'h2')\n        I.see('PERSONALISE YOUR RING');\n        I.say('CLAW STYLE');\n        I.click('#personalised_select_claw_style');\n        I.click('#eagle_claw_link');\n        I.see('Claw Style: Eagle');\n        I.click('#personalised_select_claw_style');\n        I.click('#square_claw_link');\n        I.see('Claw Style: Square');\n        I.click('#personalised_select_claw_style');\n        I.click('#round_claw_link');\n        I.see('Claw Style: Round');\n        // Diamond setting\n        I.say('DIAMOND SETTING');\n        I.click('#personalised_select_stone_setting');\n        I.click('#low_height_link');\n        I.see('Diamond Setting: Very Low');\n        I.click('#personalised_select_stone_setting');\n        I.click('#high_height_link');\n        I.see('Diamond Setting: Medium-High');\n        I.click('#personalised_select_stone_setting');\n        I.click('#medium_height_link');\n        I.see('Diamond Setting: Medium-Low');\n        I.click('#save_store_personalisation');\n    };\n    const compareDiamonds = () => {\n        I.click('//*[@id=\"body_table_results\"]/tr[1]/td[9]/div/span[1]/img');\n        I.click('//*[@id=\"body_table_results\"]/tr[2]/td[9]/div/span[1]/img');\n        I.click(\"#to_compare_diamonds_from_diamond_list\");\n    };\n    // ----------------------------------------------------\n    // ----------------------------------------------------\n    I.amOnPage(\"/\")\n    I.forceClick(\"Start With a Ring Design\")\n    I.seeInCurrentUrl(\"/engagement-ring/create/ring\")\n    // CHECKING RING GUIDE BAR\n    //------------------------------------------------------------------------------\n    I.say('CHECKING RING GUIDE BAR')\n    I.say('STEP - SELECT DIAMOND')\n    I.waitForElement('//*[@id=\"create_engage_ring_container\"]/section[3]/div[1]/div[1]/div[3]/div[2]/a', waitTime)\n    I.forceClick('Browse diamonds', '//*[@id=\"create_engage_ring_container\"]/section[3]/div[1]/div[1]/div[3]/div[2]/a')\n    I.seeInCurrentUrl('/engagement-ring/create/diamond')\n    I.say('STEP - RING DESIGN')\n    I.waitForElement('//*[@id=\"diamond_list_section\"]/div[1]/div[2]/div[3]/div[2]/a', waitTime)\n    I.forceClick('Browse settings', '//*[@id=\"diamond_list_section\"]/div[1]/div[2]/div[3]/div[2]/a')\n    I.seeInCurrentUrl('/engagement-ring/create/ring')\n    \n    //  SELECT A DESIGN\n    //----------------------------------------------------------------------------------------------------------\n    I.say('SELECT ONE DESIGN')\n    I.waitForElement('#ring_list_section .setting_list .ring_detail_link', waitTime)\n    I.click('//*[@id=\"ring_list_section\"]/div/div[1]/a')\n    // 20% Deposit Available\n    I.click('20% Deposit Available');\n    I.wait(10);\n    I.switchToNextTab();\n    I.seeInCurrentUrl('/deposit');\n    I.closeCurrentTab();\n    I.seeInCurrentUrl('/engagement-ring/create/ring');\n    // More information\n    I.say('MORE INFORMATION');\n    I.click('#more_info_link');\n    I.waitForText('PRODUCT DETAILS', waitTime, 'h2')\n    I.see('PRODUCT DETAILS', 'h2');\n    I.click('//*[@id=\"ring_more_details_box\"]/button');\n    // Personalise your ring\n    I.say('PERSONALISE YOUR RING')\n    I.click('//*[@id=\"personalise_ring_link\"]/div/a');\n    checkPersonaliseYourRing();\n    // TO CHOOSE 'ADD LOOSE DIAMOND TO CART' OPTION\n    I.say('CHOOSE THIS DESIGN');\n    I.click('//*[@id=\"ring_detail_content\"]/div[9]/div[1]/a[2]');\n    waitResponseInTable()\n    //----------------------------------------------- SHAPE FILTER -----------------------------------------------\n    I.say('CHECKING SHAPE FILTER');\n    checkDiamondShape();\n    //----------------------------------------------- CARAT FILTER -----------------------------------------------\n    I.say('CHECKING CARAT FILTER');\n    checkDiamondCarat();\n    //----------------------------------------------- COLOUR FILTER -----------------------------------------------\n    I.say('CHECKING COLOUR FILTER');\n    checkDiamondColour();\n    //----------------------------------------------- PRICE FILTER -----------------------------------------------\n    I.say('CHECKING PRICE FILTER');\n    checkDiamondPrice();\n    //----------------------------------------------- CUT FILTER --------------------------------------------------\n    I.say('CHECKING CUT FILTER');\n    checkDiamondCut();\n    //----------------------------------------------- CLARITY FILTER -----------------------------------------------\n    I.say('CHECKING CLARITY FILTER');\n    checkDiamondClarity();\n    //------------------------------------------- BUTTON ADVANCED FILTERS ------------------------------------------\n    I.say('BUTTON ADVANCED FILTERS');\n    I.click(\"#advanced_filters_button\");\n    // CHECKING ADVANCED FILTERS\n    //----------------------------------------------- POLISH FILTER ------------------------------------------------\n    I.say('CHECKING POLISH FILTER');\n    checkDiamondPolish();\n    //----------------------------------------------- SYMMETRY FILTER ------------------------------------------------\n    I.say('CHECKING SYMMETRY FILTERS');\n    checkDiamondSymmetry();\n    //----------------------------------------------- REPORT FILTER ------------------------------------------------    \n    I.say('CHECKING REPORT FILTER');\n    checkDiamondReport();\n    //----------------------------------------------- RATIO FILTER ------------------------------------------------\n    I.say('CHECKING RATIO FILTER');\n    checkDiamondRatio();\n    waitResponseInTable()\n    // SORT RESULTS\n    //------------------------------------------------------------------------------\n    // I.say('SORT RESULTS');\n    // waitResponseInTable();\n    // I.click('#carat_table_header');\n    // waitResponseInTable();\n    // sortByCarat('higher');\n    // I.click('#carat_table_header');\n    // waitResponseInTable();\n    // sortByCarat('smaller');\n    // I.click('#report_table_header');\n    // waitResponseInTable();\n    // sortByReport('higher');\n    // I.click('#report_table_header');\n    // waitResponseInTable();\n    // sortByReport('smaller');\n    // waitResponseInTable();\n    I.say('OPTION COMPARE DIAMONDS');\n    compareDiamonds();\n    // Select Results options form the table\n    I.click('#to_diamond_list_from_compare_diamonds');\n    // Select one diamond (Click on detail)\n    I.say('SELECT ONE DIAMOND');\n    const video = await selectDiamond();\n    I.wait(4);\n    I.click(`//*[@id=\"body_table_results\"]/tr[${video}]/td[10]/a/div`);\n    I.seeInCurrentUrl('/engagement-ring/create/ring');\n    I.waitForElement('//*[@id=\"diamond_detail_section\"]/div[2]/div[2]/div[6]', waitTime)\n    // Choose this diamond\n    I.click('//*[@id=\"diamond_detail_section\"]/div[2]/div[2]/div[6]/a[2]')\n    // Add to cart\n    I.waitForElement('#add_to_cart_form', waitTime)\n    I.wait(2)\n    I.click('#add_to_cart_submit')\n    // Shopping cart\n    I.waitForText('SHOPPING CART', waitTime)\n    I.see('SHOPPING CART')\n    // Ring Size\n    I.selectOption('//*[@id=\"cart\"]/div/div[1]/div[2]/div[1]/div[2]/div[2]/div[1]/div[2]/div/div[3]/select', '2')\n    // Checkout\n    I.click('//*[@id=\"cart\"]/div/div[2]/div[2]/table/tbody/tr[4]/td/a')\n    I.waitForText('WHERE DO YOU WANT THESE ITEMS SENT?', waitTime, 'h2')\n    I.see('WHERE DO YOU WANT THESE ITEMS SENT?', 'h2');\n    I.wait(4)\n    I.fillField('#shipping_billing_information_form_shippingFirstName', 'Jose Testing');\n    I.fillField('#shipping_billing_information_form_shippingLastName', 'Jose Testing');\n    I.fillField('#shipping_billing_information_form_shippingAddressLineOne', 'Test Address');\n    I.click('#shipping_billing_information_form_shippingCountry');\n    I.selectOption('#shipping_billing_information_form_shippingCountry', 'Australia');\n    I.fillField('#shipping_billing_information_form_shippingState', 'Testing');\n    I.fillField('#shipping_billing_information_form_shippingSuburb', 'Testing');\n    I.fillField('#shipping_billing_information_form_shippingPostcode', '4000');\n    I.fillField('#shipping_billing_information_form_shippingPhone', '1234567');\n    I.fillField('#shipping_billing_information_form_deliveryInstructions', 'Test form, please ignore this request.');\n    I.fillField('#shipping_billing_information_form_customerNotesProposalDate', 'Test form, please ignore this request.');\n    I.fillField('#shipping_billing_information_form_shippingEmail', 'testing@testing.com');\n    // Use the same address for billing and shipping\n    I.say('USE THE SAME ADDRESS FOR BILLING AND SHIPPING');\n    I.click('#cart_shipping_content .same_shipping_billing_fields label .form-check');\n    I.fillField('#shipping_billing_information_form_billingFirstName', 'Jose Testing');\n    I.fillField('#shipping_billing_information_form_billingLastName', 'Jose Testing');\n    I.fillField('#shipping_billing_information_form_billingAddressLineOne', 'Test Address');\n    I.click('#shipping_billing_information_form_billingCountry');\n    I.selectOption('#shipping_billing_information_form_billingCountry', 'Australia');\n    I.fillField('#shipping_billing_information_form_billingState', 'Testing');\n    I.fillField('#shipping_billing_information_form_billingSuburb', 'Testing');\n    I.fillField('#shipping_billing_information_form_billingPostcode', '4000');\n    I.fillField('#shipping_billing_information_form_billingPhone', '123456');\n    I.click('#cart_shipping_content .last_row .right_submit input');\n    I.seeInCurrentUrl('/cart/payment-information');",
              "err": {},
              "uuid": "35f9fa81-62cb-433e-b5bd-cbabed15dbf4",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [
            "35f9fa81-62cb-433e-b5bd-cbabed15dbf4"
          ],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 0
        },
        {
          "uuid": "141ba3fc-77e0-4657-a4b8-d1257947e2a2",
          "title": "FORMS",
          "fullFile": "C:\\Users\\Daniela\\Documents\\CodeceptJS-Novita\\test\\Forms\\Forms_test.js",
          "file": "\\test\\Forms\\Forms_test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook: codeceptjs.beforeSuite",
              "fullTitle": "FORMS \"before all\" hook: codeceptjs.beforeSuite",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.suiteSetup(suite)",
              "err": {},
              "uuid": "bf52403c-02c6-438a-8ef6-1045ea329bf7",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook: codeceptjs.before",
              "fullTitle": "FORMS \"before each\" hook: codeceptjs.before",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.setup(suite)",
              "err": {},
              "uuid": "97b9cde6-55e3-4f82-a48b-3d817e0e8e54",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook: codeceptjs.afterSuite",
              "fullTitle": "FORMS \"after all\" hook: codeceptjs.afterSuite",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.suiteTeardown(suite)",
              "err": {},
              "uuid": "7045ab4f-bc98-4bb2-9cbe-5ddf71459890",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook: finalize codeceptjs",
              "fullTitle": "FORMS \"after each\" hook: finalize codeceptjs",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.teardown(suite)",
              "err": {},
              "uuid": "aa17536f-6c73-4ad5-97eb-3d9b1b5b96ca",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "FORMS: CONTACT, FEEDBACK, RING SIZE REQUEST",
              "fullTitle": "FORMS: FORMS: CONTACT, FEEDBACK, RING SIZE REQUEST",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "I }) => {\n    waitTime = 300 //Seconds\n    I.amOnPage(\"/\");\n    I.waitForText('CONTACT', waitTime)\n    I.forceClick('CONTACT')\n    I.seeInCurrentUrl('/contact')\n    I.waitForText('CONTACT', waitTime)\n    I.fillField('#contact_message_form_name', 'Testing')\n    I.fillField('#contact_message_form_email', 'Testing@testing.com')\n    I.fillField('#contact_message_form_phone', '1234567890')\n    I.fillField('#contact_message_form_message', 'Test form, please ignore this request.')\n    I.forceClick('//*[@id=\"contactForm\"]/div[6]/div/div[2]/input')\n    I.waitForText(\"Captcha validation wasn't success. Please try again.\", waitTime)\n    I.see(\"Captcha validation wasn't success. Please try again.\")\n    I.wait(2)\n    // Feedback\n    I.click('FEEDBACK')\n    I.seeInCurrentUrl('/feedback')\n    I.waitForText('FEEDBACK', waitTime)\n    I.fillField('#feedback_message_form_name', 'Testing')\n    I.fillField('#feedback_message_form_email', 'Testing@testing.com')\n    I.fillField('#feedback_message_form_phone', '1234567890')\n    I.fillField('#feedback_message_form_message', 'Test form, please ignore this request.')\n    I.forceClick('//*[@id=\"contactForm\"]/div[6]/div/div[2]/input')\n    I.waitForText(\"Captcha validation wasn't success. Please try again.\", waitTime)\n    I.see(\"Captcha validation wasn't success. Please try again.\")\n    I.wait(2)\n    // Ring size request\n    I.forceClick('Find Your Ring Size', '//*[@id=\"main_menu_container\"]/div[2]/div/div[4]/div/div[2]/div[1]/div[2]/ul/li[1]/a')\n    I.seeInCurrentUrl('/guide-ring-size-chart-how-to-measure-ring-size')\n    I.waitForText('HOW TO FIND YOUR RING SIZE', waitTime)\n    I.click('REQUEST RING SIZER')\n    I.fillField('#ring_sizer_request_form_name', 'Testing')\n    I.fillField('#ring_sizer_request_form_email', 'Testing@testing.com')\n    I.fillField('#ring_sizer_request_form_address', 'Testing-123')\n    I.fillField('#ring_sizer_request_form_city', 'Testing')\n    I.selectOption('#ring_sizer_request_form_province', 'Australian Capital Territory')\n    I.fillField('#ring_sizer_request_form_postalCode', '4000')\n    I.fillField('#ring_sizer_request_form_message', 'Test form, please ignore this request.')",
              "err": {},
              "uuid": "e02d08ae-c103-4371-b1cb-330af28d53be",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [
            "e02d08ae-c103-4371-b1cb-330af28d53be"
          ],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 0
        },
        {
          "uuid": "5c004274-b3e1-4eb4-b889-6c6d9564047d",
          "title": "TESTING PAGE URLs",
          "fullFile": "C:\\Users\\Daniela\\Documents\\CodeceptJS-Novita\\test\\Url\\URLs_test.js",
          "file": "\\test\\Url\\URLs_test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook: codeceptjs.beforeSuite in \"TESTING PAGE URLs\"",
              "fullTitle": "TESTING PAGE URLs \"before all\" hook: codeceptjs.beforeSuite in \"TESTING PAGE URLs\"",
              "timedOut": false,
              "duration": 617,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.suiteSetup(suite)",
              "err": {},
              "uuid": "57560eca-f464-49cf-b663-44e9af873b05",
              "parentUUID": "5c004274-b3e1-4eb4-b889-6c6d9564047d",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook: codeceptjs.before in \"TESTING PAGE URLs\"",
              "fullTitle": "TESTING PAGE URLs \"before each\" hook: codeceptjs.before in \"TESTING PAGE URLs\"",
              "timedOut": false,
              "duration": 170,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.setup(suite)",
              "err": {},
              "uuid": "5ff1fc8c-eaf6-4f8d-af42-08712237339c",
              "parentUUID": "5c004274-b3e1-4eb4-b889-6c6d9564047d",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook: codeceptjs.afterSuite in \"TESTING PAGE URLs\"",
              "fullTitle": "TESTING PAGE URLs \"after all\" hook: codeceptjs.afterSuite in \"TESTING PAGE URLs\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.suiteTeardown(suite)",
              "err": {},
              "uuid": "bfb6e2e0-2498-48f5-ad83-2254c4ad00a2",
              "parentUUID": "5c004274-b3e1-4eb4-b889-6c6d9564047d",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook: finalize codeceptjs in \"TESTING PAGE URLs\"",
              "fullTitle": "TESTING PAGE URLs \"after each\" hook: finalize codeceptjs in \"TESTING PAGE URLs\"",
              "timedOut": false,
              "duration": 14,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.teardown(suite)",
              "err": {},
              "uuid": "4c677097-b224-4716-a73a-0afc860f2778",
              "parentUUID": "5c004274-b3e1-4eb4-b889-6c6d9564047d",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "TESTING PAGE URLs",
              "fullTitle": "TESTING PAGE URLs: TESTING PAGE URLs",
              "timedOut": false,
              "duration": 20100,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "I }) => {\n    const waitTime = 60;\n    I.amOnPage('/');\n    // Links of Engagement Rings ---------------------------------------------->\n    I.say('LINKS OF ENGAGEMENT RINGS')\n    I.say('START WITH A DIAMOND')\n    I.forceClick('Startt With a Diamond')\n    I.waitInUrl('/engagement-ring/create/diamond', waitTime)\n    I.say('START WITH A RING DESIGND')\n    I.waitForText('Start With a Diamond', waitTime, '//*[@id=\"main_menu_container\"]/div[2]/div/div[1]/div/div[1]/div[1]/div[2]/ul/li[1]/a')\n    I.forceClick('Start With a Ring Design')\n    I.waitInUrl('/engagement-ring/create/ring', waitTime)\n    I.say('BUY LOOSE DIAMOND')\n    I.waitForText('BUY LOOSE DIAMONDS', waitTime, '//*[@id=\"main_menu_container\"]/div[2]/div/div[1]/div/div[1]/div[2]/div/a')\n    I.forceClick('BUY LOOSE DIAMONDS')\n    I.waitInUrl('/buy-loose-diamond-start-buying', waitTime)\n    I.say('CUSTOM ENGAGEMENT RINGS')\n    I.waitForText('CUSTOM ENGAGEMENT RINGS', waitTime, '//*[@id=\"main_menu_container\"]/div[2]/div/div[1]/div/div[1]/div[3]/div/a')\n    I.forceClick('CUSTOM ENGAGEMENT RINGS')\n    I.waitInUrl('/custom-engagement-rings-custom-made-rings', waitTime)\n    I.say('ENGAGEMENT RINGS READY TO SHIP')\n    I.waitForText('ENGAGEMENT RINGS READY TO SHIP', waitTime, '//*[@id=\"main_menu_container\"]/div[2]/div/div[1]/div/div[1]/div[4]/div/a')\n    I.forceClick('ENGAGEMENT RINGS READY TO SHIP')\n    I.waitInUrl('/engagement-ring/ready-to-ship', waitTime)\n    I.say('SHOP NOW')\n    I.waitForText('SHOP NOW', waitTime, '//*[@id=\"main_menu_container\"]/div[2]/div/div[1]/div/div[2]/div/div/div/a')\n    I.forceClick('SHOP NOW', '//*[@id=\"main_menu_container\"]/div[2]/div/div[1]/div/div[2]/div/div/div/a')\n    I.waitInUrl('/engagement-ring/create/ring', waitTime)\n    // Links of Weddings Rings ---------------------------------------------->\n    I.say('LINKS OF WEDDINGS RINGS')\n    I.say(\"WOMEN's WEDDINGS RINGS\")\n    I.waitForText(\"WOMEN's WEDDING RINGS\", waitTime, '//*[@id=\"main_menu_container\"]/div[2]/div/div[2]/div/div[1]/div[1]/div/a')\n    I.forceClick(\"WOMEN's WEDDING RINGS\")\n    I.waitInUrl('/lab-grown-diamond-wedding-band-lab-diamond-wedding-band-lab-created-diamond-wedding-band', waitTime)\n    I.say(\"MEN's WEDDING RINGS\")\n    I.waitForText(\"MEN's WEDDING RINGS\", waitTime, '//*[@id=\"main_menu_container\"]/div[2]/div/div[2]/div/div[1]/div[2]/div/a')\n    I.forceClick(\"MEN's WEDDING RINGS\")\n    I.waitInUrl('/mens-wedding-bands-mens-wedding-rings-wedding-bands-for-men', waitTime)\n    // Links of Diamond Jewellery ---------------------------------------------->\n    I.say('LINKS OF DIAMOND JEWELLERY')\n    I.say(\"DIAMOND STUDS\")\n    I.waitForText(\"DIAMOND STUDS\", waitTime, '//*[@id=\"main_menu_container\"]/div[2]/div/div[3]/div/div[1]/div[1]/div/a')\n    I.forceClick(\"DIAMOND STUDS\")\n    I.seeInCurrentUrl('/lab-grown-diamond-earrings-lab-created-diamond-earrings-lab-grown-diamond-jewellery')\n    I.say(\"DIAMOND EARRINGS\")\n    I.waitForText(\"DIAMOND EARRINGS\", waitTime, '//*[@id=\"main_menu_container\"]/div[2]/div/div[3]/div/div[1]/div[2]/div/a')\n    I.forceClick(\"DIAMOND EARRINGS\")\n    I.seeInCurrentUrl('/lab-grown-diamond-earrings-lab-created-diamond-earrings-lab-grown-diamond-jewellery')\n    I.say(\"TENNIS BRACELETS\")\n    I.waitForText(\"TENNIS BRACELETS\", waitTime, '//*[@id=\"main_menu_container\"]/div[2]/div/div[3]/div/div[1]/div[3]/div/a')\n    I.forceClick(\"TENNIS BRACELETS\")\n    I.seeInCurrentUrl('/lab-grown-diamond-earrings-lab-created-diamond-earrings-lab-grown-diamond-jewellery')\n    I.say(\"DIAMOND NECKLACES\")\n    I.waitForText(\"DIAMOND NECKLACES\", waitTime, '//*[@id=\"main_menu_container\"]/div[2]/div/div[3]/div/div[1]/div[4]/div/a')\n    I.forceClick(\"DIAMOND NECKLACES\")\n    I.seeInCurrentUrl('/lab-grown-diamond-earrings-lab-created-diamond-earrings-lab-grown-diamond-jewellery')\n    I.say(\"DRESS RINGS\")\n    I.waitForText(\"DRESS RINGS\", waitTime, '//*[@id=\"main_menu_container\"]/div[2]/div/div[3]/div/div[1]/div[5]/div/a')\n    I.forceClick(\"DRESS RINGS\")\n    I.seeInCurrentUrl('/lab-grown-diamond-earrings-lab-created-diamond-earrings-lab-grown-diamond-jewellery')\n    I.say(\"SHOP NOW\")\n    I.waitForText(\"SHOP NOW\", waitTime, '//*[@id=\"main_menu_container\"]/div[2]/div/div[3]/div/div[2]/div/div/div/a')\n    I.forceClick(\"SHOP NOW\", '//*[@id=\"main_menu_container\"]/div[2]/div/div[3]/div/div[2]/div/div/div/a')\n    I.seeInCurrentUrl('/lab-grown-diamond-earrings-lab-created-diamond-earrings-lab-grown-diamond-jewellery')\n    // Links of Education ---------------------------------------------->\n    I.say('LINKS OF EDUCATION - DIAMOND EDUCATION')\n    I.say('DIAMOND EDUCATION - WHY LAB GROWN DIAMONDS')\n    I.waitForText(\"Why Lab Grown Diamonds\", waitTime, '//*[@id=\"main_menu_container\"]/div[2]/div/div[4]/div/div[1]/div/div[2]/ul/li[1]/a')\n    I.forceClick('Why Lab Grown Diamonds')\n    I.seeInCurrentUrl('/ethical-diamonds-ethical-lab-grown-diamonds-ethical-engagement-rings')\n    I.say('DIAMOND EDUCATION - ABOUT LAB GROWN DIAMONDS')\n    I.waitForText(\"About Lab Grown Diamonds\", waitTime, '//*[@id=\"main_menu_container\"]/div[2]/div/div[4]/div/div[1]/div/div[2]/ul/li[2]/a')\n    I.forceClick('About Lab Grown Diamonds')\n    I.seeInCurrentUrl('/about-lab-diamonds')\n    I.say('DIAMOND EDUCATION - COMPARISON LAB GROWN vs. MINED DIAMONDS')\n    I.waitForText(\"Comparison Lab Grown vs. Mined Diamonds\", waitTime, '//*[@id=\"main_menu_container\"]/div[2]/div/div[4]/div/div[1]/div/div[2]/ul/li[3]/a')\n    I.forceClick('Comparison Lab Grown vs. Mined Diamonds')\n    I.seeInCurrentUrl('/lab-diamonds-vs-real-diamonds-Lab-Grown-diamonds-vs-real-man-made-diamonds-vs-real')\n    I.say('DIAMOND EDUCATION - SHAPES')\n    I.waitForText(\"Shapes\", waitTime, '//*[@id=\"main_menu_container\"]/div[2]/div/div[4]/div/div[1]/div/div[2]/ul/li[4]/a')\n    I.forceClick('Shapes')\n    I.seeInCurrentUrl('/diamond-shapes-types-of-diamond-cuts')\n    I.say('DIAMOND EDUCATION - LEARN ABOUT THE 4Cs')\n    I.waitForText(\"Learn About The 4Cs\", waitTime, '//*[@id=\"main_menu_container\"]/div[2]/div/div[4]/div/div[1]/div/div[2]/ul/li[5]/a')\n    I.forceClick('Learn About The 4Cs')\n    I.seeInCurrentUrl('/diamond-4cs-diamond-4cs-chart-4-cs-of-diamonds-4cs-diamond')\n    I.say('DIAMOND EDUCATION - CVD VS HPHT')\n    I.waitForText(\"CVD VS HPHT\", waitTime, '//*[@id=\"main_menu_container\"]/div[2]/div/div[4]/div/div[1]/div/div[2]/ul/li[6]/a')\n    I.forceClick('CVD VS HPHT')\n    I.seeInCurrentUrl('/hpht-vs-cvd-cvd-vs-hpht-cvd-vs-hpht-diamonds-vs-cvd')\n    I.say('LINKS OF EDUCATION - RING EDUCATION')\n    I.say('RING EDUCATION - FIND YOUR RING SIZE')\n    I.waitForText(\"Find Your Ring Size\", waitTime, '//*[@id=\"main_menu_container\"]/div[2]/div/div[4]/div/div[2]/div[1]/div[2]/ul/li[1]/a')\n    I.forceClick('Find Your Ring Size')\n    I.seeInCurrentUrl('/guide-ring-size-chart-how-to-measure-ring-size')\n    I.say('RING EDUCATION - PRECIOUS METAL GUIDE')\n    I.waitForText(\"Precious Metal Guide\", waitTime, '//*[@id=\"main_menu_container\"]/div[2]/div/div[4]/div/div[2]/div[1]/div[2]/ul/li[2]/a')\n    I.forceClick('Precious Metal Guide')\n    I.seeInCurrentUrl('/precious-metals-guide-Platinum-White-Gold%E2%80%93Yellow-gold-Rose-gold')\n    I.say('LINKS OF EDUCATION - HOW TO SHOP')\n    I.waitForText(\"How To Shop\", waitTime, '//*[@id=\"main_menu_container\"]/div[2]/div/div[4]/div/div[2]/div[2]/div/a')\n    I.forceClick('How To Shop')\n    I.seeInCurrentUrl('/how-to-shop')\n    I.say('LINKS OF EDUCATION - FAQs')\n    I.waitForText(\"FAQs\", waitTime, '//*[@id=\"main_menu_container\"]/div[2]/div/div[4]/div/div[2]/div[3]/div/a')\n    I.forceClick('FAQs', '//*[@id=\"main_menu_container\"]/div[2]/div/div[4]/div/div[2]/div[3]/div/a')\n    I.seeInCurrentUrl('/faq')\n    I.say('LINKS OF EDUCATION - BLOG')\n    I.waitForText(\"BLOG\", waitTime, '//*[@id=\"main_menu_container\"]/div[2]/div/div[4]/div/div[2]/div[4]/div/a')\n    I.forceClick('BLOG')\n    I.seeInCurrentUrl('/blog')\n    I.say('LINKS OF EDUCATION - ABOUT LAB GROWN DIAMONDS')\n    I.waitForText(\"ABOUT LAB GROWN DIAMONDS\", waitTime, '//*[@id=\"main_menu_container\"]/div[2]/div/div[4]/div/div[3]/div/div/div/a')\n    I.forceClick('ABOUT LAB GROWN DIAMONDS', '//*[@id=\"main_menu_container\"]/div[2]/div/div[4]/div/div[3]/div/div/div/a')\n    I.seeInCurrentUrl('/about-lab-diamonds')\n    // Links of Contact ---------------------------------------------->\n    I.say('LINKS OF CONTACT - CONTACT US')\n    I.waitForText(\"CONTACT US\", waitTime, '//*[@id=\"main_menu_container\"]/div[2]/div/div[5]/div/div[1]/div/div/ul/li[1]/div/div/a')\n    I.forceClick('CONTACT US')\n    I.seeInCurrentUrl('/contact')\n    I.say('LINKS OF CONTACT - ABOUT US')\n    I.waitForText(\"ABOUT US\", waitTime)\n    I.forceClick('ABOUT US')\n    I.seeInCurrentUrl('/our_story')\n    I.say('LINKS OF CONTACT - SHOWROOMS')\n    I.say('AUSTRALIA - SIDNEY')\n    I.wait(4)\n    I.waitForText(\"Sydney (NSW)\", waitTime, '//*[@id=\"collapse1\"]/div/a[1]')\n    I.forceClick('Sydney (NSW)', '//*[@id=\"collapse1\"]/div/a[1]')\n    I.seeInCurrentUrl('/lab-grown-diamonds-sydney-lab-diamonds-sydney')\n    I.say('AUSTRALIA - PARRAMATTA')\n    I.waitForText(\"Parramatta (NSW)\", waitTime, '//*[@id=\"collapse1\"]/div/a[2]')\n    I.forceClick('Parramatta (NSW)', '//*[@id=\"collapse1\"]/div/a[2]')\n    I.seeInCurrentUrl('/lab-grown-diamonds-parramatta-lab-diamonds-parramatta')\n    I.say('AUSTRALIA - MELBOURNE')\n    I.waitForText(\"Melbourne (VIC)\", waitTime, '//*[@id=\"collapse1\"]/div/a[3]')\n    I.forceClick('Melbourne (VIC)', '//*[@id=\"collapse1\"]/div/a[3]')\n    I.seeInCurrentUrl('/lab-grown-diamonds-melbourne-lab-diamonds-melbourne')\n    I.say('AUSTRALIA - PERTH')\n    I.waitForText(\"Perth (WA)\", waitTime, '//*[@id=\"collapse1\"]/div/a[4]')\n    I.forceClick('Perth (WA)', '//*[@id=\"collapse1\"]/div/a[4]')\n    I.seeInCurrentUrl('/lab-grown-diamonds-perth-lab-diamonds-perth')\n    I.say('AUSTRALIA - ADELAIDE')\n    I.waitForText(\"Adelaide (SA)\", waitTime, '//*[@id=\"collapse1\"]/div/a[5]')\n    I.forceClick('Adelaide (SA)', '//*[@id=\"collapse1\"]/div/a[5]')\n    I.seeInCurrentUrl('/lab-grown-diamonds-adelaide-lab-diamonds-adelaide')\n    I.say('AUSTRALIA - BRISBANE')\n    I.waitForText(\"Brisbane (QLD)\", waitTime, '//*[@id=\"collapse1\"]/div/a[6]')\n    I.forceClick('Brisbane (QLD)', '//*[@id=\"collapse1\"]/div/a[6]')\n    I.seeInCurrentUrl('/lab-grown-diamonds-brisbane-lab-diamonds-brisbane')\n    I.say('NEW ZEALAND')\n    I.waitForText(\"New Zealand\", waitTime)\n    I.forceClick('New Zealand')\n    I.seeInCurrentUrl('/lab-grown-diamonds-nz-lab-diamonds-nz-man-made-diamonds-nz')\n    I.say('SINGAPORE')\n    // I.waitForText(\"Singapore\", waitTime, '.sublinks_contact .links .custom-ul-right')\n    I.forceClick('Singapore')\n    I.seeInCurrentUrl('/contact')    \n    I.say('UK')\n    // I.waitForText(\"UK\", waitTime, '.sublinks_contact .links .custom-ul-right')\n    I.forceClick('UK')\n    I.seeInCurrentUrl('/contact')\n    I.say('GERMANY')\n    // I.waitForText(\"Germany\", waitTime, '.sublinks_contact .links .custom-ul-right')\n    I.forceClick('Germany')\n    I.seeInCurrentUrl('/contact')",
              "err": {
                "message": "Error: Clickable element \"Startt With a Diamond\" was not found by text|CSS|XPath",
                "estack": "Error: Clickable element \"Startt With a Diamond\" was not found by text|CSS|XPath\n    at new ElementNotFound (node_modules\\codeceptjs\\lib\\helper\\errors\\ElementNotFound.js:14:11)\n    at assertElementExists (node_modules\\codeceptjs\\lib\\helper\\Playwright.js:2756:11)\n    at Playwright.proceedClick (node_modules\\codeceptjs\\lib\\helper\\Playwright.js:2532:5)",
                "diff": null
              },
              "uuid": "347e73e2-ff90-43bb-bd83-b12f84af03f6",
              "parentUUID": "5c004274-b3e1-4eb4-b889-6c6d9564047d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "347e73e2-ff90-43bb-bd83-b12f84af03f6"
          ],
          "pending": [],
          "skipped": [],
          "duration": 20100,
          "root": false,
          "rootEmpty": false,
          "_timeout": 0
        },
        {
          "uuid": "9cc5cfe0-f915-4e00-9c13-66645ea32e51",
          "title": "WEDDING RINGS - MEN's WEDDING RINGS",
          "fullFile": "C:\\Users\\Daniela\\Documents\\CodeceptJS-Novita\\test\\Wedding Rings\\MenWeddingRings_test.js",
          "file": "\\test\\Wedding Rings\\MenWeddingRings_test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook: codeceptjs.beforeSuite",
              "fullTitle": "WEDDING RINGS - MEN's WEDDING RINGS \"before all\" hook: codeceptjs.beforeSuite",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.suiteSetup(suite)",
              "err": {},
              "uuid": "06382c50-ab81-4b67-8b03-4a6283992826",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook: codeceptjs.before",
              "fullTitle": "WEDDING RINGS - MEN's WEDDING RINGS \"before each\" hook: codeceptjs.before",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.setup(suite)",
              "err": {},
              "uuid": "f4aaee65-1bb3-4465-9a13-7f37bc650f32",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook: codeceptjs.afterSuite",
              "fullTitle": "WEDDING RINGS - MEN's WEDDING RINGS \"after all\" hook: codeceptjs.afterSuite",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.suiteTeardown(suite)",
              "err": {},
              "uuid": "eddf8c0c-1148-40eb-8c19-b4486ebbab6c",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook: finalize codeceptjs",
              "fullTitle": "WEDDING RINGS - MEN's WEDDING RINGS \"after each\" hook: finalize codeceptjs",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.teardown(suite)",
              "err": {},
              "uuid": "76cee474-cc2a-4d9f-9d8e-949cc9e486ef",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "MEN's WEDDING RINGS",
              "fullTitle": "WEDDING RINGS - MEN's WEDDING RINGS: MEN's WEDDING RINGS",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "I }) => {\n    const waitTime = 300; //Seconds\n    const waitResponseMetalType = (metalType) => {\n        let results = [];\n        I.waitForResponse(async res => {\n            if(res.url().includes('/api/product/wedding-bands')) {\n                results.push(await res.json());\n                if(results[0].response.total > 0) {      \n                    const total = results[0].response.total > 10 ? 10 : results[0].response.total;      \n                    // Analize the first 10 elements from response\n                    for (let i = 0; i < total; i++) {\n                        if(!(results[0].response.items[i].metal_name === metalType)) {\n                            console.log(`>>> Error in values obtained from METAL TYPE filter: ${metalType.toUpperCase()} expected, but ${results[0].response.items[i].metal_name.toUpperCase()} was found.`);\n                        }\n                    }\n                }else {\n                    console.log(`>>> No record was found according to the filter: METAL TYPE, option ${metalType.toUpperCase()}`);\n                    return true\n                }\n                return true;\n            }\n        }, waitTime);\n    }\n    const waitResponseStyleRing = (ringStyle) => {\n        let results = [];\n        I.waitForResponse(async res => {\n            if(res.url().includes('/api/product/wedding-bands')) {\n                results.push(await res.json());\n                if(results[0].response.total > 0) {\n                    const total = results[0].response.total > 10 ? 10 : results[0].response.total;\n                    for (let i = 0; i < total; i++) {\n                        let style = results[0].response.items[i].ring_styles.some(elem => elem.style_slug === ringStyle);\n                        if(!style) {\n                            console.log(`>>> Error in values obtained from STYLE filter: ${ringStyle.toUpperCase()} expected, but it was not found.`);\n                        }\n                    }\n                }else {\n                    console.log(`>>> No record was found according to the filter: STYLE, option ${ringStyle.toUpperCase()}`);\n                    return true\n                }\n                return true;             \n            }\n        }, waitTime);\n    }\n    const waitResponseRingWidth = (ringWidth, option) => {\n        let results = [];\n        I.waitForResponse(async res => {\n            if(res.url().includes('/api/product/wedding-bands')) {\n                results.push(await res.json());\n                if(results[0].response.total > 0) {\n                    const total = results[0].response.total > 10 ? 10 : results[0].response.total;\n                    for (let i = 0; i < total; i++) {\n                        if(ringWidth == 'minimum') {\n                            if(!(results[0].response.items[i].width >= 5 && results[0].response.items[i].width < 7)) {\n                                console.log(`>>> Error in values obtained from WIDTH filter: option ${option} expected, but ${results[0].response.items[i].width} was found.`);\n                            }\n                        }else if(ringWidth == 'medium') {\n                            if(!(results[0].response.items[i].width >= 7 && results[0].response.items[0].width < 9)) {\n                                console.log(`>>> Error in values obtained from WIDTH filter: option ${option} expected, but ${results[0].response.items[i].width} was found.`);\n                            }\n                        }else if(ringWidth == 'high') {\n                            if(!(results[0].response.items[i].width >= 9)) {\n                                console.log(`>>> Error in values obtained from WIDTH filter: option ${option} expected, but ${results[0].response.items[i].width} was found.`);\n                            }\n                        }\n                    }\n                }else {\n                    console.log(`>>> No record was found according to the filter: WIDTH, option ${option}.`);\n                    return true\n                }\n                return true;\n            }\n        }, waitTime);\n    }\n    const waitResponseRingsPrice = (ringPrice, option) => {\n        let results = [];\n        I.waitForResponse(async res => {\n            if(res.url().includes('/api/product/wedding-bands')) {\n                results.push(await res.json());\n                if(results[0].response.total > 0) {\n                    const total = results[0].response.total > 10 ? 10 : results[0].response.total; \n                    for (let i = 0; i < total; i++) {\n                        if(ringPrice == 'under') {\n                            if(!(results[0].response.items[i].price <= 1000)) {\n                                console.log(`>>> Error in values obtained from PRICE filter: option ${option} expected, but ${results[0].response.items[i].price} was found.`);\n                            }\n                        }else if(ringPrice == 'between') {\n                            if(!(results[0].response.items[i].price > 1000 && results[0].response.items[0].width <= 1500)) {\n                                console.log(`>>> Error in values obtained from PRICE filter: option ${option} expected, but ${results[0].response.items[i].price} was found.`);\n                            }\n                        }else if(ringPrice == 'over') {\n                            if(!(results[0].response.items[i].price > 1500)) {\n                                console.log(`>>> Error in values obtained from PRICE filter: option ${option} expected, but ${results[0].response.items[i].price} was found.`);\n                            }\n                        }\n                    }\n                }else {\n                    console.log(`>>> No record was found according to the filter: PRICE, option ${option}.`);\n                    return true\n                }\n                return true;\n            }\n        }, waitTime);\n    }\n    I.amOnPage('/');\n    I.forceClick(\"MEN's WEDDING RINGS\");\n    I.seeInCurrentUrl('/mens-wedding-bands-mens-wedding-rings-wedding-bands-for-men');\n    I.waitForElement('.jewellery_detail_link', 30);\n    // ------------------------ METAL FILTER -----------------------------------\n    // METAL: 18ct White Gold\n    I.say('FILTER METAL: 18ct White Gold');\n    I.forceClick('#metal_type_2');\n    I.seeCheckboxIsChecked('#metal_type_2');\n    waitResponseMetalType('18ct White Gold');\n    I.forceClick('#metal_type_2');\n    // FILTER METAL: 18ct Yellow Gold\n    I.say('FILTER METAL: 18ct Yellow Gold');\n    I.forceClick('#metal_type_3');\n    I.seeCheckboxIsChecked('#metal_type_3');\n    waitResponseMetalType('18ct Yellow Gold');\n    I.forceClick('#metal_type_3');\n    // FILTER METAL: 18ct Rose Gold\n    I.say('FILTER METAL: 18ct Rose Gold');\n    I.forceClick('#metal_type_4');\n    I.seeCheckboxIsChecked('#metal_type_4');\n    waitResponseMetalType('18ct Rose Gold');\n    I.forceClick('#metal_type_4');\n    // FILTER METAL: Platinum\n    I.say('FILTER METAL: Platinum');\n    I.forceClick('#metal_type_5');\n    I.seeCheckboxIsChecked('#metal_type_5');\n    waitResponseMetalType('Platinum');\n    I.forceClick('#metal_type_5');\n    // FILTER METAL: Platinum\n    I.say('FILTER METAL: Platinum');\n    I.forceClick('#metal_type_6');\n    I.seeCheckboxIsChecked('#metal_type_6');\n    waitResponseMetalType('Multi-Tone');\n    I.forceClick('#metal_type_6');\n    I.forceClick('#metal_type_1');\n    // ------------------------ STYLE FILTER -----------------------------------\n    // Style Pave\n    I.say('STYLE PAVE');\n    I.forceClick('#jewellery_category_2');\n    I.seeCheckboxIsChecked('#jewellery_category_2');\n    waitResponseStyleRing('plain');\n    I.forceClick('#jewellery_category_2');\n    // Style Pattern\n    I.say('STYLE PATTERN')\n    I.forceClick('#jewellery_category_4');\n    I.seeCheckboxIsChecked('#jewellery_category_4');\n    waitResponseStyleRing('pattern');\n    I.forceClick('#jewellery_category_4');\n    \n    // Style Diamonds\n    I.say('STYLE DIAMONDS')\n    I.forceClick('#jewellery_category_6');\n    I.seeCheckboxIsChecked('#jewellery_category_6');\n    waitResponseStyleRing('diamonds');\n    I.forceClick('#jewellery_category_6');\n    I.forceClick('#jewellery_category_1');\n    // ------------------------ WIDTH FILTER -----------------------------------\n    // Width 5 to 6mm\n    I.say('WIDTH BETWEEN 5 to 6MM')\n    I.forceClick('#jewellery_width_range_2');\n    I.seeCheckboxIsChecked('#jewellery_width_range_2');\n    waitResponseRingWidth('minimum', '5 TO 6 MM');\n    I.forceClick('#jewellery_width_range_2');\n    // Width between 2 to 2.5mm\n    I.say('WIDTH BETWEEN 7 TO 8MM')\n    I.forceClick('#jewellery_width_range_3');\n    I.seeCheckboxIsChecked('#jewellery_width_range_3');\n    waitResponseRingWidth('medium', '7 TO 8 MM');\n    I.forceClick('#jewellery_width_range_3');\n    // Width above 2.6mm\n    I.say('WIDTH OVER 9MM')\n    I.forceClick('#jewellery_width_range_4');\n    I.seeCheckboxIsChecked('#jewellery_width_range_4');\n    waitResponseRingWidth('high', '9 MM +');\n    I.forceClick('#jewellery_width_range_4');\n    I.forceClick('#jewellery_width_range_1');\n    // ------------------------ PRICE FILTER -----------------------------------\n    // PRICE $1000 and Under\n    I.say('PRICE $1000 and Under');\n    I.forceClick('#jewellery_price_range_2');\n    I.seeCheckboxIsChecked('#jewellery_price_range_2');\n    waitResponseRingsPrice('under', '$1000 AND UNDER');\n    I.forceClick('#jewellery_price_range_2');\n    // PRICE BETWEEN $1000 to $1500\n    I.say('PRICE BETWEEN $1000 to $1500');\n    I.forceClick('#jewellery_price_range_3');\n    I.seeCheckboxIsChecked('#jewellery_price_range_3');\n    waitResponseRingsPrice('between', '$1000 TO $1500');\n    I.forceClick('#jewellery_price_range_3');\n    // PRICE Over $1500\n    I.say('PRICE OVER $1500');\n    I.forceClick('#jewellery_price_range_4');\n    I.seeCheckboxIsChecked('#jewellery_price_range_4');\n    waitResponseRingsPrice('over', 'OVER $1500');\n    I.forceClick('#jewellery_price_range_4');\n    \n    I.forceClick('#jewellery_price_range_1');\n    // -------------------------------------------- SELECT FIRST ITEM/ELEMENT --------------------------------------------\n    I.say('FIRST ITEM SELECTED');\n    I.waitForElement('#jewellery_list_section .jewellery_list .jewellery_detail_link', waitTime)\n    I.click('#jewellery_list_section .jewellery_list .jewellery_detail_link')\n    // 15 days express\n    I.click('//*[@id=\"express_included_col\"]/div[1]/label/div/img[1]')\n    // 20% Deposit Available\n    I.say('20% DEPOSIT AVAILABLE');\n    I.click('//*[@id=\"pay_deposit_box\"]/div/a')\n    I.wait(5)\n    I.switchToNextTab();\n    I.seeInCurrentUrl('/deposit');\n    I.closeCurrentTab();\n    I.seeInCurrentUrl('/mens-wedding-bands-mens-wedding-rings-wedding-bands-for-men');\n    // Add Engraving\n    I.click('//*[@id=\"add_engraving\"]/div/a')\n    I.see('Add Engraving(+$50)')\n    // Font\n    I.click('#fontdropdown')\n    I.click('#font_trebuchet')\n    I.fillField('#engraving_textarea', 'Jose Testing')\n    I.click('//*[@id=\"engraving_form_container\"]/div[3]/a/div/label/div/img[1]')\n    I.click('#save_engraving_message_link')\n    // Test of cancel button\n    I.click('//*[@id=\"add_engraving\"]/div/a')\n    I.see('Add Engraving(+$50)')\n    I.click('#cancel_engraving_message_link')\n    // Ring Size\n    I.selectOption('#select_ring_size', '2')\n    // More info\n    I.click('#more_info_link')\n    I.waitForText('PRODUCT DETAILS', 30)\n    I.see('PRODUCT DETAILS')\n    I.click('//*[@id=\"jewellery_more_details_box\"]/button')\n    // Add to Cart\n    I.say('ADD TO CART')\n    I.click('#add_product_to_cart_submit')\n    I.waitForText('SHOPPING CART', 30)\n    I.wait(2)\n    I.see('SHOPPING CART')\n    // Jewellery Personalisation - Change\n    I.say('JEWELLERY PERSONALISATION')\n    I.waitForElement('//*[@id=\"cart\"]/div/div[1]/div[2]/div[1]/div[2]/div[2]/div[1]/div[2]/div/a', 30)\n    I.wait(5)\n    I.forceClick('//*[@id=\"cart\"]/div/div[1]/div[2]/div[1]/div[2]/div[2]/div[1]/div[2]/div/a')\n    I.waitForText('PERSONALISE YOUR JEWELLERY', 30)\n    I.see('PERSONALISE YOUR JEWELLERY')\n    I.click('//*[@id=\"personalised_jewellery_select_engraving\"]')\n    I.click('#jewellery_engraving_font_type')\n    I.click('//*[@id=\"change_jewellery_engraving_font_select\"]/a[2]')\n    I.fillField('#jewellery_engraving_textarea', 'Jose Testing')\n    I.click('#save_jewellery_engraving_message_link')\n    I.click('#save_jewellery_store_personalisation')\n    I.wait(5)\n    // Pay deposit\n    I.say('PAY DEPOSIT')\n    I.click('//*[@id=\"cart\"]/div/div[2]/div[2]/table/tbody/tr[2]/td[1]/label')\n    I.click('#accept_deposit_policy')\n    I.click('//*[@id=\"cart\"]/div/div[2]/div[2]/table/tbody/tr[4]/td/a')\n    // Checkout\n    I.waitForText('WHERE DO YOU WANT THESE ITEMS SENT?', 30)\n    I.see('WHERE DO YOU WANT THESE ITEMS SENT?')\n    I.wait(4)\n    // WHERE DO YOU WANT THESE ITEMS SENT? - FORM\n    I.fillField('#shipping_billing_information_form_shippingFirstName', 'Jose Testing');\n    I.fillField('#shipping_billing_information_form_shippingLastName', 'Jose Testing');\n    I.fillField('#shipping_billing_information_form_shippingAddressLineOne', 'Test Address');\n    I.click('#shipping_billing_information_form_shippingCountry');\n    I.selectOption('#shipping_billing_information_form_shippingCountry', 'Australia');\n    I.fillField('#shipping_billing_information_form_shippingState', 'Testing');\n    I.fillField('#shipping_billing_information_form_shippingSuburb', 'Testing');\n    I.fillField('#shipping_billing_information_form_shippingPostcode', '4000');\n    I.fillField('#shipping_billing_information_form_shippingPhone', '1234567');\n    I.fillField('#shipping_billing_information_form_deliveryInstructions', 'Test form, please ignore this request.');\n    I.fillField('#shipping_billing_information_form_customerNotesProposalDate', 'Test form, please ignore this request.');\n    I.fillField('#shipping_billing_information_form_shippingEmail', 'testing@testing.com');\n    // Use the same address for billing and shipping\n    I.say('USE THE SAME ADDRESS FOR BILLING AND SHIPPING');\n    I.click('#cart_shipping_content .same_shipping_billing_fields label .form-check');\n    I.fillField('#shipping_billing_information_form_billingFirstName', 'Jose Testing');\n    I.fillField('#shipping_billing_information_form_billingLastName', 'Jose Testing');\n    I.fillField('#shipping_billing_information_form_billingAddressLineOne', 'Test Address');\n    I.click('#shipping_billing_information_form_billingCountry');\n    I.selectOption('#shipping_billing_information_form_billingCountry', 'Australia');\n    I.fillField('#shipping_billing_information_form_billingState', 'Testing');\n    I.fillField('#shipping_billing_information_form_billingSuburb', 'Testing');\n    I.fillField('#shipping_billing_information_form_billingPostcode', '4000');\n    I.fillField('#shipping_billing_information_form_billingPhone', '123456');\n    I.click('#cart_shipping_content .last_row .right_submit input');\n    I.seeInCurrentUrl('/cart/payment-information');",
              "err": {},
              "uuid": "b99c2d23-9e04-46a2-82c5-9900364dc46a",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [
            "b99c2d23-9e04-46a2-82c5-9900364dc46a"
          ],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 0
        },
        {
          "uuid": "5ec6f371-24d0-4d53-b453-74fa1d29c504",
          "title": "WEDDING RINGS - WOMEN's WEDDING RINGS",
          "fullFile": "C:\\Users\\Daniela\\Documents\\CodeceptJS-Novita\\test\\Wedding Rings\\WomenWeddingRings_test.js",
          "file": "\\test\\Wedding Rings\\WomenWeddingRings_test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook: codeceptjs.beforeSuite",
              "fullTitle": "WEDDING RINGS - WOMEN's WEDDING RINGS \"before all\" hook: codeceptjs.beforeSuite",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.suiteSetup(suite)",
              "err": {},
              "uuid": "4bd39e86-3695-4b5d-9243-c4994da4ffc8",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook: codeceptjs.before",
              "fullTitle": "WEDDING RINGS - WOMEN's WEDDING RINGS \"before each\" hook: codeceptjs.before",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.setup(suite)",
              "err": {},
              "uuid": "2b0f2b40-9340-4a36-a757-119e881acab6",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook: codeceptjs.afterSuite",
              "fullTitle": "WEDDING RINGS - WOMEN's WEDDING RINGS \"after all\" hook: codeceptjs.afterSuite",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.suiteTeardown(suite)",
              "err": {},
              "uuid": "0ed86603-1b7e-4607-b135-305929d070d2",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook: finalize codeceptjs",
              "fullTitle": "WEDDING RINGS - WOMEN's WEDDING RINGS \"after each\" hook: finalize codeceptjs",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.teardown(suite)",
              "err": {},
              "uuid": "31127774-bace-4718-96c0-c9a63b98c162",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "WOMEN's WEDDING RINGS",
              "fullTitle": "WEDDING RINGS - WOMEN's WEDDING RINGS: WOMEN's WEDDING RINGS",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "I }) => {\n    const waitTime = 300; //Seconds\n    const waitResponseMetalType = (metalType) => {\n        let results = [];\n        I.waitForResponse(async res => {\n            if(res.url().includes('/api/product/wedding-bands')) {\n                results.push(await res.json());\n                if(results[0].response.total > 0) {\n                    const total = results[0].response.total > 10 ? 10 : results[0].response.total;\n                    for (let i = 0; i < total; i++) {\n                        if(!(results[0].response.items[i].metal_name === metalType)) {\n                            console.log(`>>> Error in values obtained from METAL TYPE filter: ${metalType.toUpperCase()} expected, but ${results[0].response.items[i].metal_name.toUpperCase()} was found.`);\n                        }\n                    }\n                }else {\n                    console.log(`>>> No record was found according to the filter: METAL TYPE, option ${metalType.toUpperCase()}`);\n                    return true;\n                }return true\n            }\n        }, waitTime);\n    }\n    const waitResponseStyleRing = (ringStyle) => {\n        let results = [];\n        I.waitForResponse(async res => {\n            if(res.url().includes('/api/product/wedding-bands')) {\n                results.push(await res.json());\n                if(results[0].response.total > 0) {\n                    const total = results[0].response.total > 10 ? 10 : results[0].response.total; \n                    for (let i = 0; i < total; i++) {\n                        let style = results[0].response.items[i].ring_styles.some(elem => elem.style_slug === ringStyle);\n                        if(!style) {\n                            console.log(`>>> Error in values obtained from STYLE filter: ${ringStyle.toUpperCase()} expected, but it was not found.`);\n                        }\n                    }\n                }else {\n                    console.log(`>>> No record was found according to the filter: STYLE, option ${ringStyle.toUpperCase()}`);\n                    return true;\n                }\n                return true;\n            }\n        }, waitTime);\n    }\n    const waitResponseRingWidth = (ringWidth, option) => {\n        let results = [];\n        I.waitForResponse(async res => {\n            if(res.url().includes('/api/product/wedding-bands')) {\n                results.push(await res.json());\n                if(results[0].response.total > 0) {\n                    const total = results[0].response.total > 10 ? 10 : results[0].response.total;\n                    for (let i = 0; i < total; i++) {\n                        if(ringWidth == 'under') {\n                            if(!(results[0].response.items[i].width < 2.0)) {\n                                console.log(`>>> Error in values obtained from WIDTH filter: option ${option} expected, but ${results[0].response.items[i].width} was found.`);\n                            }\n                        }else if(ringWidth == 'between') {\n                            if(!(results[0].response.items[i].width >= 2.0 && results[0].response.items[0].width <= 2.5)) {\n                                console.log(`>>> Error in values obtained from WIDTH filter: option ${option} expected, but ${results[0].response.items[i].width} was found.`);\n                            }\n                        }else if(ringWidth == 'over') {\n                            if(!(results[0].response.items[i].width > 2.5)) {\n                                console.log(`>>> Error in values obtained from WIDTH filter: option ${option} expected, but ${results[0].response.items[i].width} was found.`);\n                            }\n                        }\n                    }\n                }else {\n                    console.log(`>>> No record was found according to the filter: WIDTH, option ${option}.`);\n                    return true;\n                }\n                return true\n            }\n        }, waitTime);\n    }\n    const waitResponseRingsPrice = (ringPrice, option) => {\n        let results = [];\n        I.waitForResponse(async res => {\n            if(res.url().includes('/api/product/wedding-bands')) {\n                results.push(await res.json());\n                if(results[0].response.total > 0) {\n                    const total = results[0].response.total > 10 ? 10 : results[0].response.total; \n                    for (let i = 0; i < total; i++) {\n                        if(ringPrice == 'under') {\n                            if(!(results[0].response.items[i].price <= 1000)) {\n                                console.log(`>>> Error in values obtained from PRICE filter: option ${option} expected, but ${results[0].response.items[i].price} was found.`);\n                            }\n                        }else if(ringPrice == 'between') {\n                            if(!(results[0].response.items[i].price > 1000 && results[0].response.items[0].price <= 1500)) {\n                                console.log(`>>> Error in values obtained from PRICE filter: option ${option} expected, but ${results[0].response.items[i].price} was found.`);\n                            }\n                        }else if(ringPrice == 'over') {\n                            if(!(results[0].response.items[i].price > 1500)) {\n                                console.log(`>>> Error in values obtained from PRICE filter: option ${option} expected, but ${results[0].response.items[i].price} was found.`);\n                            }\n                        }\n                    }\n                }else {\n                    console.log(`>>> No record was found according to the filter: PRICE, option ${option}.`);\n                    return true;\n                }\n                return true\n            }\n        }, waitTime);\n    }\n    I.amOnPage('/');\n    I.forceClick(\"WOMEN's WEDDING RINGS\");\n    I.seeInCurrentUrl('/lab-grown-diamond-wedding-band-lab-diamond-wedding-band-lab-created-diamond-wedding-band');\n    I.waitForElement('.jewellery_detail_link', waitTime);\n    // ------------------------ METAL FILTER -----------------------------------\n    // METAL: 18ct White Gold\n    I.say('FILTER METAL: 18ct White Gold');\n    I.forceClick('#metal_type_2');\n    I.seeCheckboxIsChecked('#metal_type_2');\n    waitResponseMetalType('18ct White Gold');\n    I.forceClick('#metal_type_2');\n    // FILTER METAL: 18ct Yellow Gold\n    I.say('FILTER METAL: 18ct Yellow Gold');\n    I.forceClick('#metal_type_3');\n    I.seeCheckboxIsChecked('#metal_type_3');\n    waitResponseMetalType('18ct Yellow Gold');\n    I.forceClick('#metal_type_3');\n    // FILTER METAL: 18ct Rose Gold\n    I.say('FILTER METAL: 18ct Rose Gold');\n    I.forceClick('#metal_type_4');\n    I.seeCheckboxIsChecked('#metal_type_4');\n    waitResponseMetalType('18ct Rose Gold');\n    I.forceClick('#metal_type_4');\n    // FILTER METAL: Platinum\n    I.say('FILTER METAL: Platinum');\n    I.forceClick('#metal_type_5');\n    I.seeCheckboxIsChecked('#metal_type_5');\n    waitResponseMetalType('Platinum');\n    I.forceClick('#metal_type_5');\n    I.forceClick('#metal_type_1');\n    // ------------------------ STYLE FILTER -----------------------------------\n    // Style Pave\n    I.say('STYLE PAVE');\n    I.forceClick('#jewellery_category_2');\n    I.seeCheckboxIsChecked('#jewellery_category_2');\n    waitResponseStyleRing('pave');\n    I.forceClick('#jewellery_category_2');\n    // Style Eternity\n    I.say('STYLE ETERNITY')\n    I.forceClick('#jewellery_category_3');\n    I.seeCheckboxIsChecked('#jewellery_category_3');\n    waitResponseStyleRing('eternity');\n    I.forceClick('#jewellery_category_3');\n    // Style Plain\n    I.say('STYLE PLAIN')\n    I.forceClick('#jewellery_category_4');\n    I.seeCheckboxIsChecked('#jewellery_category_4');\n    waitResponseStyleRing('plain');\n    I.forceClick('#jewellery_category_4');\n    // Style Modern\n    I.say('STYLE MODERN')\n    I.forceClick('#jewellery_category_5');\n    I.seeCheckboxIsChecked('#jewellery_category_5');\n    waitResponseStyleRing('modern');\n    I.forceClick('#jewellery_category_5');\n    \n    // Style Vintage\n    I.say('STYLE VINTAGE')\n    I.forceClick('#jewellery_category_6');\n    I.seeCheckboxIsChecked('#jewellery_category_6');\n    waitResponseStyleRing('vintage');\n    I.forceClick('#jewellery_category_6');\n    I.forceClick('#jewellery_category_1');\n    // ------------------------ WIDTH FILTER -----------------------------------\n    // Width under 2mm\n    I.say('WIDTH UNDER 2MM')\n    I.forceClick('#jewellery_width_range_2');\n    I.seeCheckboxIsChecked('#jewellery_width_range_2');\n    waitResponseRingWidth('under', 'UNDER 2 MM');\n    I.forceClick('#jewellery_width_range_2');\n    // Width between 2 to 2.5mm\n    I.say('WIDTH BETWEEN 2 TO 2.5MM')\n    I.forceClick('#jewellery_width_range_3');\n    I.seeCheckboxIsChecked('#jewellery_width_range_3');\n    waitResponseRingWidth('between', '2 TO 2.5 MM');\n    I.forceClick('#jewellery_width_range_3');\n    // Width above 2.6mm\n    I.say('WIDTH over 2.6MM')\n    I.forceClick('#jewellery_width_range_4');\n    I.seeCheckboxIsChecked('#jewellery_width_range_4');\n    waitResponseRingWidth('over', 'OVER 2.6 MM');\n    I.forceClick('#jewellery_width_range_4');\n    I.forceClick('#jewellery_width_range_1');\n    \n    // ------------------------ PRICE FILTER -----------------------------------\n    // PRICE $1000 and Under\n    I.say('PRICE $1000 and Under');\n    I.forceClick('#jewellery_price_range_2');\n    I.seeCheckboxIsChecked('#jewellery_price_range_2');\n    waitResponseRingsPrice('under', '$1000 AND UNDER');\n    I.forceClick('#jewellery_price_range_2');\n    // PRICE BETWEEN $1000 to $1500\n    I.say('PRICE BETWEEN $1000 to $1500');\n    I.forceClick('#jewellery_price_range_3');\n    I.seeCheckboxIsChecked('#jewellery_price_range_3');\n    waitResponseRingsPrice('between', '$1000 TO $1500');\n    I.forceClick('#jewellery_price_range_3');\n    // PRICE Over $1500\n    I.say('PRICE OVER $1500');\n    I.forceClick('#jewellery_price_range_4');\n    I.seeCheckboxIsChecked('#jewellery_price_range_4');\n    waitResponseRingsPrice('over', 'OVER $1500');\n    I.forceClick('#jewellery_price_range_4');\n    \n    I.forceClick('#jewellery_price_range_1');\n    // -------------------------------------------- I SELECT FIRST ITEM/ELEMENT --------------------------------------------\n    I.say('FIRST ITEM SELECTED');\n    I.waitForElement('#jewellery_list_section .jewellery_list .jewellery_detail_link', waitTime)\n    I.click('#jewellery_list_section .jewellery_list .jewellery_detail_link')\n    // 15 days express\n    I.click('//*[@id=\"express_included_col\"]/div[1]/label/div/img[1]')\n    // 20% Deposit Available\n    I.say('20% DEPOSIT AVAILABLE');\n    I.click('//*[@id=\"pay_deposit_box\"]/div/a')\n    I.wait(10)\n    I.switchToNextTab();\n    I.seeInCurrentUrl('/deposit');\n    I.closeCurrentTab();\n    I.seeInCurrentUrl('/lab-grown-diamond-wedding-band-lab-diamond-wedding-band-lab-created-diamond-wedding-band');\n    // Add Engraving\n    I.click('//*[@id=\"add_engraving\"]/div/a')\n    I.see('Add Engraving(+$50)')\n    // Font\n    I.click('#fontdropdown')\n    I.click('#font_trebuchet')\n    I.fillField('#engraving_textarea', 'Jose Testing')\n    I.click('//*[@id=\"engraving_form_container\"]/div[3]/a/div/label/div/img[1]')\n    I.click('#save_engraving_message_link')\n    // Test of cancel button\n    I.click('//*[@id=\"add_engraving\"]/div/a')\n    I.see('Add Engraving(+$50)')\n    I.click('#cancel_engraving_message_link')\n    // Ring Size\n    I.selectOption('#select_ring_size', '2')\n    // More info\n    I.click('#more_info_link')\n    I.waitForText('PRODUCT DETAILS', 30)\n    I.see('PRODUCT DETAILS')\n    I.click('//*[@id=\"jewellery_more_details_box\"]/button')\n    // Add to Cart\n    I.say('ADD TO CART')\n    I.click('#add_product_to_cart_submit')\n    I.waitForText('SHOPPING CART', 30)\n    I.see('SHOPPING CART')\n    // Jewellery Personalisation - Change\n    I.say('SHOPPING CART')\n    I.wait(5)\n    I.click('//*[@id=\"cart\"]/div/div[1]/div[2]/div[1]/div[2]/div[2]/div[1]/div[2]/div/a')\n    // I.waitForText('PERSONALISE YOUR JEWELLERY', 30)\n    I.see('PERSONALISE YOUR JEWELLERY')\n    I.waitForElement('#personalised_jewellery_select_engraving', 30)\n    I.click('#personalised_jewellery_select_engraving')\n    I.click('#jewellery_engraving_font_type')\n    I.click('//*[@id=\"change_jewellery_engraving_font_select\"]/a[2]')\n    \n    I.fillField('#jewellery_engraving_textarea', 'Jose Testing')\n    I.click('#save_jewellery_engraving_message_link')\n    I.click('#save_jewellery_store_personalisation')\n    I.wait(8)\n    // Pay deposit\n    I.say('PAY DEPOSIT')\n    I.click('//*[@id=\"cart\"]/div/div[2]/div[2]/table/tbody/tr[2]/td[1]/label')\n    I.click('#accept_deposit_policy')\n    I.click('//*[@id=\"cart\"]/div/div[2]/div[2]/table/tbody/tr[4]/td/a')\n    // Checkout\n    I.waitForText('WHERE DO YOU WANT THESE ITEMS SENT?', 30)\n    I.see('WHERE DO YOU WANT THESE ITEMS SENT?')\n    I.wait(4)\n    // WHERE DO YOU WANT THESE ITEMS SENT? - FORM\n    I.fillField('#shipping_billing_information_form_shippingFirstName', 'Jose Testing');\n    I.fillField('#shipping_billing_information_form_shippingLastName', 'Jose Testing');\n    I.fillField('#shipping_billing_information_form_shippingAddressLineOne', 'Test Address');\n    I.click('#shipping_billing_information_form_shippingCountry');\n    I.selectOption('#shipping_billing_information_form_shippingCountry', 'Australia');\n    I.fillField('#shipping_billing_information_form_shippingState', 'Testing');\n    I.fillField('#shipping_billing_information_form_shippingSuburb', 'Testing');\n    I.fillField('#shipping_billing_information_form_shippingPostcode', '4000');\n    I.fillField('#shipping_billing_information_form_shippingPhone', '1234567');\n    I.fillField('#shipping_billing_information_form_deliveryInstructions', 'Test form, please ignore this request.');\n    I.fillField('#shipping_billing_information_form_customerNotesProposalDate', 'Test form, please ignore this request.');\n    I.fillField('#shipping_billing_information_form_shippingEmail', 'testing@testing.com');\n    // Use the same address for billing and shipping\n    I.say('USE THE SAME ADDRESS FOR BILLING AND SHIPPING');\n    I.click('#cart_shipping_content .same_shipping_billing_fields label .form-check');\n    I.fillField('#shipping_billing_information_form_billingFirstName', 'Jose Testing');\n    I.fillField('#shipping_billing_information_form_billingLastName', 'Jose Testing');\n    I.fillField('#shipping_billing_information_form_billingAddressLineOne', 'Test Address');\n    I.click('#shipping_billing_information_form_billingCountry');\n    I.selectOption('#shipping_billing_information_form_billingCountry', 'Australia');\n    I.fillField('#shipping_billing_information_form_billingState', 'Testing');\n    I.fillField('#shipping_billing_information_form_billingSuburb', 'Testing');\n    I.fillField('#shipping_billing_information_form_billingPostcode', '4000');\n    I.fillField('#shipping_billing_information_form_billingPhone', '123456');\n    I.click('#cart_shipping_content .last_row .right_submit input');\n    I.seeInCurrentUrl('/cart/payment-information');",
              "err": {},
              "uuid": "3e1f4311-5982-493b-ad95-9f3b8b844394",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [
            "3e1f4311-5982-493b-ad95-9f3b8b844394"
          ],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 0
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 0
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.1.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "report",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "output",
        "reportFilename": "report"
      },
      "version": "6.2.0"
    }
  }
}